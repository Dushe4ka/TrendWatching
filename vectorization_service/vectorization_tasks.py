import os
import logging
from celery import Celery
from vector_store import VectorStore
from database import get_unvectorized_data_async, update_vectorization_status_async
from telegram_notifications import send_admin_notification

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://:Ollama12357985@127.0.0.1:14571/2")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://:Ollama12357985@127.0.0.1:14571/2")

celery_app = Celery(
    "vectorization_service",
    broker=CELERY_BROKER_URL,
    backend=CELERY_RESULT_BACKEND
)

celery_app.conf.update(
    task_serializer="json",
    accept_content=["json"],
    result_serializer="json",
    timezone="UTC",
    enable_utc=True,
)

def run_async(coro):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
    import asyncio
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import concurrent.futures
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(asyncio.run, coro)
                return future.result()
        else:
            return loop.run_until_complete(coro)
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        return asyncio.run(coro)

@celery_app.task(bind=True, name="vectorization_service.start_vectorization_task")
def start_vectorization_task(self, chat_id=None, force=False):
    """–ó–∞–¥–∞—á–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        unvectorized_data = run_async(get_unvectorized_data_async())
        
        if not unvectorized_data and not force:
            message = "‚ö†Ô∏è –ù–µ—Ç –Ω–µ–≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            logger.warning(message)
            send_admin_notification(message, chat_id)
            return {
                "status": "no_data",
                "message": message,
                "vectorized_count": 0,
                "total_unvectorized": 0
            }
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(unvectorized_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        vector_store = VectorStore()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        total_records = len(unvectorized_data)
        max_records_per_batch = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        
        if total_records > max_records_per_batch:
            logger.info(f"üì¶ –†–∞–∑–±–∏–≤–∞–µ–º {total_records} –∑–∞–ø–∏—Å–µ–π –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ {max_records_per_batch}")
            chunks = [unvectorized_data[i:i + max_records_per_batch] 
                     for i in range(0, total_records, max_records_per_batch)]
        else:
            chunks = [unvectorized_data]
        
        total_vectorized = 0
        success = True
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
        for i, chunk in enumerate(chunks):
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ {i+1}/{len(chunks)} ({len(chunk)} –∑–∞–ø–∏—Å–µ–π)")
            
            try:
                # –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º —á–∞–Ω–∫
                chunk_success = vector_store.add_materials(chunk)
                
                if chunk_success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ë–î –¥–ª—è —ç—Ç–æ–≥–æ —á–∞–Ω–∫–∞
                    from bson import ObjectId
                    ids_to_update = [ObjectId(x["_id"]) for x in chunk]
                    run_async(update_vectorization_status_async(ids_to_update))
                    
                    total_vectorized += len(chunk)
                    logger.info(f"‚úÖ –ß–∞–Ω–∫ {i+1} —É—Å–ø–µ—à–Ω–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ({len(chunk)} –∑–∞–ø–∏—Å–µ–π)")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ {i+1}")
                    success = False
                    break
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ {i+1}: {e}")
                success = False
                break
        
        if success and total_vectorized > 0:
            message = f"‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n‚Ä¢ –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_vectorized}\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}"
            logger.info(f"‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ {total_vectorized} –∑–∞–ø–∏—Å–µ–π")
            send_admin_notification(message, chat_id)
            
            return {
                "status": "completed",
                "message": message,
                "vectorized_count": total_vectorized,
                "total_unvectorized": len(unvectorized_data)
            }
        elif not success:
            error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
            logger.error(error_message)
            send_admin_notification(error_message, chat_id)
            
            return {
                "status": "error",
                "message": error_message,
                "vectorized_count": 0,
                "total_unvectorized": len(unvectorized_data)
            }
        else:
            message = "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            logger.warning(message)
            send_admin_notification(message, chat_id)
            
            return {
                "status": "no_data",
                "message": message,
                "vectorized_count": 0,
                "total_unvectorized": 0
            }
            
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
        logger.error(error_message)
        send_admin_notification(error_message, chat_id)
        
        return {
            "status": "error",
            "message": error_message,
            "vectorized_count": 0,
            "total_unvectorized": 0
        }

def get_vectorization_status(task_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        task = celery_app.AsyncResult(task_id)
        if task.ready():
            result = task.result
            return {
                "task_id": task_id,
                "status": result.get("status", "unknown"),
                "message": result.get("message", ""),
                "vectorized_count": result.get("vectorized_count", 0),
                "total_unvectorized": result.get("total_unvectorized", 0)
            }
        else:
            return {
                "task_id": task_id,
                "status": "running",
                "message": "–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ",
                "vectorized_count": 0,
                "total_unvectorized": 0
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
        return {
            "task_id": task_id,
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}",
            "vectorized_count": 0,
            "total_unvectorized": 0
        } 