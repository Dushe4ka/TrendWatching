from celery_app import app
from usecases.daily_news import analyze_trend
from aiogram import Bot
import os
from dotenv import load_dotenv
import asyncio
import time
from celery import current_task
from datetime import datetime, timedelta
from telegram_channels_service import telegram_channels_service
from utils.message_utils import split_analysis_message, format_message_part
from logger_config import setup_logger
import warnings
from celery.schedules import crontab
import json

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ MongoDB –∏ fork
warnings.filterwarnings("ignore", message="MongoClient opened before fork")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logger("digest_tasks")

async def send_digest_to_channel(bot, channel_id: int, message_parts: list):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª"""
    try:
        for i, part in enumerate(message_parts, 1):
            formatted_part = format_message_part(part, i, len(message_parts))
            await bot.send_message(chat_id=channel_id, text=formatted_part, parse_mode="HTML")
            if i < len(message_parts):
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {channel_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª {channel_id}: {str(e)}")
        raise
    finally:
        await bot.session.close()

@app.task(bind=True, name='celery_app.tasks.digest_tasks.send_telegram_digest')
def send_telegram_digest(self, channel_id: int, digest_id: str, category: str) -> dict:
    """
    –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª
    
    Args:
        channel_id: ID Telegram –∫–∞–Ω–∞–ª–∞
        digest_id: ID –¥–∞–π–¥–∂–µ—Å—Ç–∞
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    start_time = time.time()
    worker_id = current_task.request.hostname
    process_id = os.getpid()
    worker_num = process_id % 5 + 1  # –ù–æ–º–µ—Ä –≤–æ—Ä–∫–µ—Ä–∞ (1-5)
    
    logger.info(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –Ω–∞—á–∞–ª –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞ ===")
    logger.info(f"–ö–∞–Ω–∞–ª: {channel_id}")
    logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç: {digest_id}")
    logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = telegram_channels_service.get_channel_by_id(channel_id)
        if not channel_info:
            error_msg = f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            logger.error(error_msg)
            return {'status': 'error', 'message': error_msg}
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞–π–¥–∂–µ—Å—Ç
        digest = None
        for d in channel_info.digests:
            if d.id == digest_id:
                digest = d
                break
        
        if not digest:
            # –ï—Å–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            if digest_id.startswith('test_'):
                logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç {digest_id} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è")
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
                class TempDigest:
                    def __init__(self, time_str):
                        self.time = time_str
                        self.is_active = True
                
                digest = TempDigest("–¢–ï–°–¢")
            else:
                error_msg = f"–î–∞–π–¥–∂–µ—Å—Ç {digest_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel_id}"
                logger.error(error_msg)
                return {'status': 'error', 'message': error_msg}
        
        if not digest.is_active:
            logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç {digest_id} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return {'status': 'skipped', 'message': '–î–∞–π–¥–∂–µ—Å—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        today = datetime.now().strftime('%Y-%m-%d')
        result = analyze_trend(
            category=category,
            analysis_date=today
        )
        
        if result['status'] == 'success':
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            message_parts = split_analysis_message(
                analysis_text=result['analysis'],
                materials_count=result['materials_count'],
                category=category,
                date=today,
                analysis_type='daily_digest'
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            header = f"üì∞ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç</b>\n\n"
            header += f"üì¢ –ö–∞–Ω–∞–ª: {channel_info.channel.title}\n"
            header += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            header += f"üìÖ –î–∞—Ç–∞: {today}\n"
            header += f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {digest.time}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            if message_parts:
                message_parts[0] = header + message_parts[0]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –≤ –∫–∞–Ω–∞–ª
            bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
            asyncio.run(send_digest_to_channel(bot, channel_id, message_parts))
            
            execution_time = time.time() - start_time
            logger.info(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥ ===")
            
            return {
                'status': 'success',
                'channel_id': channel_id,
                'digest_id': digest_id,
                'category': category,
                'parts_count': len(message_parts),
                'message': '–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
            }
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {result['message']}"
            logger.error(error_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª
            try:
                bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
                error_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–û—à–∏–±–∫–∞: {result['message']}"
                asyncio.run(bot.send_message(chat_id=channel_id, text=error_text, parse_mode="HTML"))
                asyncio.run(bot.session.close())
            except Exception as bot_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(bot_error)}")
            
            return {
                'status': 'error',
                'channel_id': channel_id,
                'digest_id': digest_id,
                'message': error_message
            }
            
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}"
        logger.error(error_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∫–∞–Ω–∞–ª
        try:
            bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
            error_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–û—à–∏–±–∫–∞: {str(e)}"
            asyncio.run(bot.send_message(chat_id=channel_id, text=error_text, parse_mode="HTML"))
            asyncio.run(bot.session.close())
        except Exception as bot_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(bot_error)}")
        
        return {
            'status': 'error',
            'channel_id': channel_id,
            'digest_id': digest_id,
            'message': error_message
        }

@app.task(bind=True, name='celery_app.tasks.digest_tasks.send_test_digest')
def send_test_digest(self, channel_id: int, category: str = "–í–∏–¥–µ–æ–∏–≥—Ä—ã") -> dict:
    """
    –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã)
    
    Args:
        channel_id: ID Telegram –∫–∞–Ω–∞–ª–∞
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    start_time = time.time()
    worker_id = current_task.request.hostname
    process_id = os.getpid()
    worker_num = process_id % 5 + 1
    
    logger.info(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –Ω–∞—á–∞–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ ===")
    logger.info(f"–ö–∞–Ω–∞–ª: {channel_id}")
    logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = telegram_channels_service.get_channel_by_id(channel_id)
        if not channel_info:
            error_msg = f"–ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            logger.error(error_msg)
            return {'status': 'error', 'message': error_msg}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        today = datetime.now().strftime('%Y-%m-%d')
        result = analyze_trend(
            category=category,
            analysis_date=today
        )
        
        if result['status'] == 'success':
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            message_parts = split_analysis_message(
                analysis_text=result['analysis'],
                materials_count=result['materials_count'],
                category=category,
                date=today,
                analysis_type='daily_digest'
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            header = f"üß™ <b>–¢–ï–°–¢–û–í–´–ô –¥–∞–π–¥–∂–µ—Å—Ç</b>\n\n"
            header += f"üì¢ –ö–∞–Ω–∞–ª: {channel_info.channel.title}\n"
            header += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            header += f"üìÖ –î–∞—Ç–∞: {today}\n"
            header += f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: –¢–ï–°–¢\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            if message_parts:
                message_parts[0] = header + message_parts[0]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –≤ –∫–∞–Ω–∞–ª
            bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
            asyncio.run(send_digest_to_channel(bot, channel_id, message_parts))
            
            execution_time = time.time() - start_time
            logger.info(f"=== –í–æ—Ä–∫–µ—Ä {worker_num} (PID: {process_id}) –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥ ===")
            
            return {
                'status': 'success',
                'channel_id': channel_id,
                'category': category,
                'parts_count': len(message_parts),
                'message': '–¢–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
            }
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {result['message']}"
            logger.error(error_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª
            try:
                bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
                error_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–û—à–∏–±–∫–∞: {result['message']}"
                asyncio.run(bot.send_message(chat_id=channel_id, text=error_text, parse_mode="HTML"))
                asyncio.run(bot.session.close())
            except Exception as bot_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(bot_error)}")
            
            return {
                'status': 'error',
                'channel_id': channel_id,
                'message': error_message
            }
            
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}"
        logger.error(error_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∫–∞–Ω–∞–ª
        try:
            bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
            error_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–û—à–∏–±–∫–∞: {str(e)}"
            asyncio.run(bot.send_message(chat_id=channel_id, text=error_text, parse_mode="HTML"))
            asyncio.run(bot.session.close())
        except Exception as bot_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(bot_error)}")
        
        return {
            'status': 'error',
            'channel_id': channel_id,
            'message': error_message
        } 