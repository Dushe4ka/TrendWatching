import os
import requests
from celery import shared_task
from datetime import datetime, timedelta
from logger_config import setup_logger

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logger("parsing_tasks")

# URL —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
AUTH_SERVICE_URL = os.getenv("AUTH_SERVICE_URL", "http://localhost:8000")

@shared_task
def periodic_parse_all_sources():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –í—ã–∑—ã–≤–∞–µ–º API —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        response = requests.post(
            f"{AUTH_SERVICE_URL}/parsing/parse_all_sources",
            json={"limit": 100, "chat_id": None},
            timeout=300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        )
        
        if response.status_code == 200:
            result = response.json()
            logger.info(f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {result}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            try:
                vectorization_response = requests.post(
                    f"{AUTH_SERVICE_URL}/vectorization/start",
                    json={},
                    timeout=60
                )
                if vectorization_response.status_code == 200:
                    logger.info("‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: {vectorization_response.status_code}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            
            return result
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {response.status_code}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return None

@shared_task
def periodic_parse_rss_sources():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        response = requests.post(
            f"{AUTH_SERVICE_URL}/parsing/parse_rss_sources",
            json={"limit": 50, "chat_id": None},
            timeout=180
        )
        
        if response.status_code == 200:
            result = response.json()
            logger.info(f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π RSS –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {result}")
            return result
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ RSS –ø–∞—Ä—Å–∏–Ω–≥–µ: {response.status_code}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ RSS –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return None

@shared_task
def periodic_parse_telegram_sources():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        response = requests.post(
            f"{AUTH_SERVICE_URL}/parsing/parse_telegram_sources",
            json={"limit": 50, "chat_id": None},
            timeout=300
        )
        
        if response.status_code == 200:
            result = response.json()
            logger.info(f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π Telegram –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {result}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            try:
                vectorization_response = requests.post(
                    f"{AUTH_SERVICE_URL}/vectorization/start",
                    json={},
                    timeout=60
                )
                if vectorization_response.status_code == 200:
                    logger.info("‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ—Å–ª–µ Telegram –ø–∞—Ä—Å–∏–Ω–≥–∞")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: {vectorization_response.status_code}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            
            return result
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ Telegram –ø–∞—Ä—Å–∏–Ω–≥–µ: {response.status_code}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ Telegram –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return None

@shared_task
def cleanup_old_data():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False 