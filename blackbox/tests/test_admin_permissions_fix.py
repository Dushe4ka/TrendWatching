#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

async def test_admin_permissions_fix():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    print("üîç –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
    print("=" * 50)
    
    try:
        from role_model.mongodb_provider import MongoDBRoleProvider
        from role_model.role_manager import RoleManager
        from role_model.lark_provider import LarkUserProvider
        from bot.keyboards.inline_keyboards import get_permission_keyboard
        import os
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        role_provider = MongoDBRoleProvider()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LarkUserProvider —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        app_id = os.getenv("LARK_APP_ID")
        app_secret = os.getenv("LARK_APP_SECRET")
        table_app_id = os.getenv("LARK_TABLE_APP_ID")
        table_id = os.getenv("LARK_TABLE_ID")
        
        user_provider = LarkUserProvider(app_id, app_secret, table_app_id, table_id)
        role_manager = RoleManager(user_provider, role_provider)
        
        print("‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        print(f"\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
        available_permissions = await role_manager.get_available_permissions()
        print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {available_permissions}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        print(f"\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
        for permission in available_permissions:
            description = await role_manager.get_permission_description(permission)
            print(f"   üìù {permission}: {description}")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        print(f"\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
        selected_permissions = {
            "can_access_sources": True,
            "can_access_analysis": True,
            "can_access_subscriptions": False,
            "can_manage_roles": False,
            "can_manage_users": False,
            "can_manage_telegram_auth": False
        }
        
        keyboard = get_permission_keyboard(available_permissions, selected_permissions)
        print(f"   üì± –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:")
        for i, row in enumerate(keyboard.inline_keyboard):
            for j, button in enumerate(row):
                print(f"     [{i}][{j}]: {button.text} -> {button.callback_data}")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ tester –≤ –±–∞–∑–µ
        print(f"\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ tester –≤ –±–∞–∑–µ...")
        tester_permissions = await role_provider.get_role_permissions("tester")
        if tester_permissions:
            print(f"   ‚úÖ –ü—Ä–∞–≤–∞ —Ä–æ–ª–∏ tester: {tester_permissions.permissions}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∞
            old_permissions = ["can_use_analysis", "can_manage_sources", "can_receive_digest", "can_auth_telegram", "can_create_roles"]
            found_old = [perm for perm in old_permissions if perm in tester_permissions.permissions]
            if found_old:
                print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∞: {found_old}")
            else:
                print(f"   ‚úÖ –°—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"   ‚ùå –†–æ–ª—å tester –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –†–µ–∑—é–º–µ:")
        print("   - –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        print("   - –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞")
        print("   - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
    print("=" * 50)
    
    await test_admin_permissions_fix()
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main()) 