#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.message_utils import split_message, split_analysis_message, split_digest_message, format_message_part

def test_split_message():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("=== –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ===")
    
    # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    short_text = "–≠—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    parts = split_message(short_text)
    print(f"–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(parts)} —á–∞—Å—Ç–µ–π")
    assert len(parts) == 1, "–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –æ–¥–Ω–∏–º –∫—É—Å–∫–æ–º"
    
    # –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    long_text = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. " * 200  # –ü—Ä–∏–º–µ—Ä–Ω–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
    parts = split_message(long_text)
    print(f"–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(parts)} —á–∞—Å—Ç–µ–π")
    assert len(parts) > 1, "–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ —á–∞—Å—Ç–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    for i, part in enumerate(parts):
        assert len(part) <= 4096, f"–ß–∞—Å—Ç—å {i+1} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç: {len(part)} —Å–∏–º–≤–æ–ª–æ–≤"
        print(f"–ß–∞—Å—Ç—å {i+1}: {len(part)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n")

def test_split_analysis_message():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∞"""
    print("=== –¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    long_analysis = "–≠—Ç–æ –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑. " * 150  # –ü—Ä–∏–º–µ—Ä–Ω–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤
    
    parts = split_analysis_message(
        analysis_text=long_analysis,
        materials_count=25,
        category="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        date="2025-01-13"
    )
    
    print(f"–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å (–¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    first_part = parts[0]
    assert "‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω!" in first_part
    assert "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏" in first_part
    assert "üìÖ –î–∞—Ç–∞: 2025-01-13" in first_part
    assert "üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: 25" in first_part
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
    for i, part in enumerate(parts[1:], 2):
        assert "üìù –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞:" in part
        print(f"–ß–∞—Å—Ç—å {i}: {len(part)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("‚úÖ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–π–¥–µ–Ω\n")

def test_split_digest_message():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print("=== –¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
    long_digest = "üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\nüìä –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: 10\nüìù –ê–Ω–∞–ª–∏–∑: –≠—Ç–æ –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. " * 100
    
    parts = split_digest_message(
        digest_text=long_digest,
        date="2025-01-13",
        total_materials=50
    )
    
    print(f"–î–∞–π–¥–∂–µ—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
    first_part = parts[0]
    assert "üì∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ 2025-01-13" in first_part
    assert "üìä –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: 50" in first_part
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
    for i, part in enumerate(parts[1:], 2):
        assert f"üì∞ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (—á–∞—Å—Ç—å {i}):" in part
        print(f"–ß–∞—Å—Ç—å {i}: {len(part)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("‚úÖ –¢–µ—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω\n")

def test_format_message_part():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("=== –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è ===")
    
    # –¢–µ—Å—Ç —Å –æ–¥–Ω–æ–π —á–∞—Å—Ç—å—é
    single_part = format_message_part("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", 1, 1)
    assert "--- –ß–∞—Å—Ç—å 1 –∏–∑ 1 ---" not in single_part
    
    # –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–∞—Å—Ç—è–º–∏
    multi_part = format_message_part("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", 2, 3)
    assert "--- –ß–∞—Å—Ç—å 2 –∏–∑ 3 ---" in multi_part
    
    print("‚úÖ –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω\n")

def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("=== –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ ===")
    
    # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    empty_parts = split_message("")
    assert len(empty_parts) == 1
    assert empty_parts[0] == ""
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ª–∏–º–∏—Ç–∞
    boundary_text = "A" * 4096
    boundary_parts = split_message(boundary_text)
    assert len(boundary_parts) == 1
    assert len(boundary_parts[0]) == 4096
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ —á—É—Ç—å –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
    over_limit_text = "A" * 4097
    over_limit_parts = split_message(over_limit_text)
    print(f"–¢–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(over_limit_text)} —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(over_limit_parts)} —á–∞—Å—Ç–µ–π")
    assert len(over_limit_parts) >= 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 2 —á–∞—Å—Ç–∏, –ø–æ–ª—É—á–µ–Ω–æ {len(over_limit_parts)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
    for i, part in enumerate(over_limit_parts):
        assert len(part) <= 4096, f"–ß–∞—Å—Ç—å {i+1} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç: {len(part)} —Å–∏–º–≤–æ–ª–æ–≤"
        print(f"–ß–∞—Å—Ç—å {i+1}: {len(part)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –ø—Ä–æ–π–¥–µ–Ω—ã\n")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...\n")
    
    try:
        test_split_message()
        test_split_analysis_message()
        test_split_digest_message()
        test_format_message_part()
        test_edge_cases()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1) 