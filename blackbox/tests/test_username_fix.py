#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å username
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

async def test_username_logic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å username"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å username")
    print("=" * 60)
    
    try:
        from bot.utils.misc import check_user_access, check_permission
        from role_model.lark_provider import LarkUserProvider
        from config import get_role_system_config
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        role_config = get_role_system_config()
        lark_config = role_config["lark"]
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        user_provider = LarkUserProvider(
            app_id=lark_config["app_id"],
            app_secret=lark_config["app_secret"],
            table_app_id=lark_config["table_app_id"],
            table_id=lark_config["table_id"]
        )
        
        print("‚úÖ LarkUserProvider —Å–æ–∑–¥–∞–Ω")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        test_cases = [
            (5032415442, "SHIFYuu"),  # –î–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
            (5032415442, "Lavkaaa_helper"),  # –°—Ç–∞—Ç—É—Å "–£–≤–æ–ª–µ–Ω"
            (123456789, "test_user"),  # –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        ]
        
        for user_id, username in test_cases:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ID {user_id}, username @{username}")
            print("-" * 50)
            
            # –¢–µ—Å—Ç 1: check_user_access
            print(f"1Ô∏è‚É£ –¢–µ—Å—Ç check_user_access...")
            access_granted, message, role = await check_user_access(user_id, username)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω' if access_granted else '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            print(f"   –†–æ–ª—å: {role}")
            
            # –¢–µ—Å—Ç 2: check_permission
            print(f"2Ô∏è‚É£ –¢–µ—Å—Ç check_permission...")
            has_permission = await check_permission(user_id, "can_use_analysis", username)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å' if has_permission else '‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ—Ç'}")
            
            print()
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ user_provider –Ω–∞–ø—Ä—è–º—É—é
        print(f"3Ô∏è‚É£ –¢–µ—Å—Ç —á–µ—Ä–µ–∑ user_provider –Ω–∞–ø—Ä—è–º—É—é")
        print("-" * 50)
        
        for username in ["SHIFYuu", "Lavkaaa_helper", "test_user"]:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ @{username}...")
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_doc = await user_provider.get_user_by_username_from_lark(username)
            
            if user_doc:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:")
                print(f"   - Username: {user_doc.get('username', 'N/A')}")
                print(f"   - –ò–º—è: {user_doc.get('employee_name', 'N/A')}")
                print(f"   - –†–æ–ª—å: {user_doc.get('role', 'N/A')}")
                print(f"   - –°—Ç–∞—Ç—É—Å: {user_doc.get('employee_status', 'N/A')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
                access_granted, error_message = await user_provider.check_user_access(username)
                print(f"   - –î–æ—Å—Ç—É–ø: {'‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω' if access_granted else '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω'}")
                if not access_granted:
                    print(f"   - –ü—Ä–∏—á–∏–Ω–∞: {error_message}")
            else:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω")
            
            print()
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏")
    print("=" * 60)
    
    await test_username_logic()
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main()) 