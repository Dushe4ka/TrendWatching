#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import get_role_system_config
from role_model.lark_provider import LarkUserProvider, LarkRoleProvider
from role_model.role_manager import RoleManager


async def test_role_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        role_config = get_role_system_config()["lark"]
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {role_config['app_id']}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        user_provider = LarkUserProvider(
            app_id=role_config["app_id"],
            app_secret=role_config["app_secret"],
            table_app_id=role_config["table_app_id"],
            table_id=role_config["table_id"]
        )
        
        role_provider = LarkRoleProvider()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ–ª–µ–π
        role_manager = RoleManager(user_provider, role_provider)
        print("‚úÖ –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüìä –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        users = await role_manager.get_all_users()
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        if users:
            print("–ü–µ—Ä–≤—ã–µ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            for i, user in enumerate(users[:3]):
                print(f"  {i+1}. @{user.telegram_username} (ID: {user.user_id}, –†–æ–ª—å: {user.role})")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
        print("\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π")
        roles = await role_manager.get_all_roles()
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–æ–ª–µ–π: {len(roles)}")
        
        for role in roles:
            permissions_count = sum(1 for perm, enabled in role.permissions.items() if enabled)
            print(f"  üîπ {role.role_name}: {permissions_count} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüîë –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        if users:
            test_user = users[0]
            test_user_id = test_user.user_id
            
            print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{test_user.telegram_username} (ID: {test_user_id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            permissions_to_test = [
                "can_use_analysis",
                "can_manage_sources", 
                "can_receive_digest",
                "can_auth_telegram",
                "can_manage_users"
            ]
            
            for permission in permissions_to_test:
                has_permission = await role_manager.check_permission(test_user_id, permission)
                status = "‚úÖ" if has_permission else "‚ùå"
                print(f"  {status} {permission}: {has_permission}")
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print("\nüë§ –¢–µ—Å—Ç 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        if users:
            test_user = users[0]
            user_info = await role_manager.get_user_info(test_user.user_id)
            
            if user_info:
                print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_info.telegram_username}")
                print(f"  –†–æ–ª—å: {user_info.role}")
                print(f"  Whitelisted: {user_info.is_whitelisted}")
                print(f"  –ê–∫—Ç–∏–≤–µ–Ω: {user_info.is_active}")
                print(f"  –ö–æ–º–ø–∞–Ω–∏—è: {user_info.company_id}")
        
        # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüîê –¢–µ—Å—Ç 5: –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if users:
            test_user = users[0]
            permissions = await role_manager.get_user_permissions(test_user.user_id)
            
            if permissions:
                enabled_permissions = [perm for perm, enabled in permissions.items() if enabled]
                disabled_permissions = [perm for perm, enabled in permissions.items() if not enabled]
                
                print(f"  –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ({len(enabled_permissions)}):")
                for perm in enabled_permissions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    description = await role_manager.get_permission_description(perm)
                    print(f"    ‚úÖ {description}")
                
                if len(enabled_permissions) > 5:
                    print(f"    ... –∏ –µ—â–µ {len(enabled_permissions) - 5}")
                
                print(f"  –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ({len(disabled_permissions)}):")
                for perm in disabled_permissions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    description = await role_manager.get_permission_description(perm)
                    print(f"    ‚ùå {description}")
                
                if len(disabled_permissions) > 3:
                    print(f"    ... –∏ –µ—â–µ {len(disabled_permissions) - 3}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()


async def test_specific_user(user_id: int):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
    print("=" * 30)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        role_config = get_role_system_config()["lark"]
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        user_provider = LarkUserProvider(
            app_id=role_config["app_id"],
            app_secret=role_config["app_secret"],
            table_app_id=role_config["table_app_id"],
            table_id=role_config["table_id"]
        )
        
        role_provider = LarkRoleProvider()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ–ª–µ–π
        role_manager = RoleManager(user_provider, role_provider)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await role_manager.get_user_info(user_id)
        
        if not user_info:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_info.telegram_username}")
        print(f"üîë –†–æ–ª—å: {user_info.role}")
        print(f"üìä Whitelisted: {user_info.is_whitelisted}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        permissions = await role_manager.get_user_permissions(user_id)
        
        if permissions:
            enabled_permissions = [perm for perm, enabled in permissions.items() if enabled]
            print(f"\n‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ({len(enabled_permissions)}):")
            for perm in enabled_permissions:
                description = await role_manager.get_permission_description(perm)
                print(f"  ‚Ä¢ {description}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        test_permissions = [
            "can_use_analysis",
            "can_manage_sources",
            "can_receive_digest",
            "can_auth_telegram",
            "can_manage_users"
        ]
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:")
        for permission in test_permissions:
            has_permission = await role_manager.check_permission(user_id, permission)
            status = "‚úÖ" if has_permission else "‚ùå"
            description = await role_manager.get_permission_description(permission)
            print(f"  {status} {permission}: {has_permission} ({description})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument("--user-id", type=int, help="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    args = parser.parse_args()
    
    if args.user_id:
        asyncio.run(test_specific_user(args.user_id))
    else:
        asyncio.run(test_role_system()) 