#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ Telegram –∫–∞–Ω–∞–ª–æ–≤
"""
import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from celery_app import app
from celery_app.tasks.telegram_digest_tasks import send_test_digest, schedule_daily_digests
from telegram_channels_service import telegram_channels_service
from datetime import datetime, timedelta

def test_digest_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ Telegram –∫–∞–Ω–∞–ª–æ–≤")
    print("=" * 70)
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Celery
        print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Celery...")
        i = app.control.inspect()
        active_tasks = i.active()
        if active_tasks:
            print("‚úÖ Celery –ø–æ–¥–∫–ª—é—á–µ–Ω, –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è Celery –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...")
        active_digests = telegram_channels_service.get_active_digests()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(active_digests)}")
        
        if active_digests:
            for i, digest in enumerate(active_digests, 1):
                print(f"   {i}. –ö–∞–Ω–∞–ª: {digest['channel_id']}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {digest['category']}, –í—Ä–µ–º—è: {digest['time']}")
        else:
            print("   ‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            print("   üí° –°–æ–∑–¥–∞–π—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞")
            return
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞)
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
        if active_digests:
            test_digest = active_digests[0]
            print(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {test_digest['channel_id']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
            future_time = datetime.now() + timedelta(minutes=1)
            result = send_test_digest.apply_async(
                args=[test_digest['channel_id'], test_digest['category']],
                eta=future_time
            )
            
            print(f"   ‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Å ID: {result.id}")
            print(f"   ‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {future_time.strftime('%H:%M:%S')}")
            print(f"   üìã –°—Ç–∞—Ç—É—Å: {result.status}")
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...")
        print("   üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—Ä—É—á–Ω—É—é
        result = schedule_daily_digests.delay()
        print(f"   ‚úÖ –ó–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —Å ID: {result.id}")
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("   ‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        try:
            schedule_result = result.get(timeout=30)
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {schedule_result}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")
        
        # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        print("\n5Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
        print("   üîß Celery Beat: –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:01")
        print("   üì± Telegram Bot: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
        print("   üß† AI Analysis: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é analyze_trend")
        print("   üíæ MongoDB: —Ö—Ä–∞–Ω–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤")
        print("   üöÄ Redis: –±—Ä–æ–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Celery")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   - Celery Flower: http://localhost:5555")
        print("   - Celery CLI: celery -A celery_app inspect active")
        print("   - –õ–æ–≥–∏: tail -f logs/celery.log")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()

def show_digest_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    print("\nüìä –°—Ç–∞—Ç—É—Å –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤:")
    print("=" * 50)
    
    try:
        active_digests = telegram_channels_service.get_active_digests()
        
        if not active_digests:
            print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"üìà –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(active_digests)}")
        print()
        
        for i, digest in enumerate(active_digests, 1):
            print(f"üîπ –î–∞–π–¥–∂–µ—Å—Ç {i}:")
            print(f"   üì± –ö–∞–Ω–∞–ª ID: {digest['channel_id']}")
            print(f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {digest['category']}")
            print(f"   ‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {digest['time']}")
            print(f"   üÜî Digest ID: {digest['digest_id']}")
            print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        tomorrow = datetime.now().date() + timedelta(days=1)
        print(f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {tomorrow.strftime('%d.%m.%Y')} –≤ 00:01")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ Telegram –∫–∞–Ω–∞–ª–æ–≤")
    print("=" * 70)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
    show_digest_status()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    response = input("\nüß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã? (y/N): ").strip().lower()
    
    if response in ['y', 'yes', '–¥–∞']:
        test_digest_system()
    else:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        print("\nüí° –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   - send_test_digest.delay(channel_id, category)")
        print("   - schedule_daily_digests.delay()")
        print("   - send_channel_digest.delay(channel_id, digest_id, category, time)") 