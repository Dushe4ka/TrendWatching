#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_telegram_channels_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤...")
    
    try:
        from telegram_channels_service import telegram_channels_service
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        print("üì¢ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        channels = telegram_channels_service.get_all_channels()
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
        
        # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        print("üì¢ –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞...")
        test_channel = {
            "id": 999999999,
            "title": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª",
            "username": "test_channel",
            "type": "channel"
        }
        
        success = telegram_channels_service.add_channel(test_channel)
        print(f"   –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {'‚úÖ' if success else '‚ùå'}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ ID
        print("üì¢ –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ ID...")
        channel_info = telegram_channels_service.get_channel_by_id(999999999)
        if channel_info:
            print(f"   –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel_info.channel.title}")
        else:
            print("   ‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        print("üì¢ –¢–µ—Å—Ç 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
        success = telegram_channels_service.add_digest_to_channel(
            999999999, "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "14:30"
        )
        print(f"   –î–∞–π–¥–∂–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {'‚úÖ' if success else '‚ùå'}")
        
        # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        print("üì¢ –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...")
        active_digests = telegram_channels_service.get_active_digests()
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(active_digests)}")
        
        # –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        print("üì¢ –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
        if active_digests:
            digest_id = active_digests[0]["digest_id"]
            success = telegram_channels_service.update_digest(
                999999999, digest_id, {"time": "15:00"}
            )
            print(f"   –î–∞–π–¥–∂–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {'‚úÖ' if success else '‚ùå'}")
        
        # –¢–µ—Å—Ç 7: –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        print("üì¢ –¢–µ—Å—Ç 7: –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
        if active_digests:
            digest_id = active_digests[0]["digest_id"]
            success = telegram_channels_service.delete_digest(999999999, digest_id)
            print(f"   –î–∞–π–¥–∂–µ—Å—Ç —É–¥–∞–ª–µ–Ω: {'‚úÖ' if success else '‚ùå'}")
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()

def test_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from models import TelegramChannel, DigestSchedule, TelegramChannelWithDigests
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        print("üìã –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–∞–Ω–∞–ª–∞...")
        channel = TelegramChannel(
            id=123456789,
            title="–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª",
            username="test_channel",
            type="channel"
        )
        print(f"   –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: {channel.title}")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        print("üìã –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞...")
        digest = DigestSchedule(
            id="test-uuid",
            category="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            time="14:30"
        )
        print(f"   –î–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {digest.category} - {digest.time}")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏
        print("üìã –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏...")
        channel_with_digests = TelegramChannelWithDigests(
            channel=channel,
            digests=[digest]
        )
        print(f"   –ö–∞–Ω–∞–ª —Å –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω: {len(channel_with_digests.digests)} –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤")
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {str(e)}")
        import traceback
        traceback.print_exc()

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database import db
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        result = db.command("ping")
        print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB: {'‚úÖ' if result else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é telegram_channels
        collections = db.list_collection_names()
        if "telegram_channels" in collections:
            print("   –ö–æ–ª–ª–µ–∫—Ü–∏—è telegram_channels: ‚úÖ")
        else:
            print("   –ö–æ–ª–ª–µ–∫—Ü–∏—è telegram_channels: ‚ùå (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        import traceback
        traceback.print_exc()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤...\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["MONGODB_URI", "MONGODB_DB"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
        return
    
    print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   MongoDB URI: {os.getenv('MONGODB_URI')}")
    print(f"   MongoDB DB: {os.getenv('MONGODB_DB')}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_database_connection()
    print()
    
    test_models()
    print()
    
    test_telegram_channels_service()
    print()
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    main() 