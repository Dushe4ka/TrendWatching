#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import asyncio
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_role_system_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        from config import get_role_system_config
        role_config = get_role_system_config()
        print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {role_config}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
        from role_model.lark_provider import LarkUserProvider
        from role_model.mongodb_provider import MongoDBRoleProvider
        from role_model.role_manager import RoleManager
        print("   ‚úÖ –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
        lark_config = role_config["lark"]
        
        user_provider = LarkUserProvider(
            app_id=lark_config["app_id"],
            app_secret=lark_config["app_secret"],
            table_app_id=lark_config["table_app_id"],
            table_id=lark_config["table_id"]
        )
        print("   ‚úÖ LarkUserProvider —Å–æ–∑–¥–∞–Ω")
        
        role_provider = MongoDBRoleProvider()
        print("   ‚úÖ MongoDBRoleProvider —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–æ–ª–µ–π
        print("\n4. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–æ–ª–µ–π...")
        role_manager = RoleManager(user_provider, role_provider)
        print("   ‚úÖ RoleManager —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
        try:
            roles = await role_manager.get_all_roles()
            print(f"   ‚úÖ get_all_roles(): –ø–æ–ª—É—á–µ–Ω–æ {len(roles)} —Ä–æ–ª–µ–π")
        except Exception as e:
            print(f"   ‚ùå get_all_roles(): –æ—à–∏–±–∫–∞ - {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        try:
            permissions = await role_manager.get_available_permissions()
            print(f"   ‚úÖ get_available_permissions(): –ø–æ–ª—É—á–µ–Ω–æ {len(permissions)} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        except Exception as e:
            print(f"   ‚ùå get_available_permissions(): –æ—à–∏–±–∫–∞ - {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏
        try:
            exists = await role_manager.role_exists("test_role")
            print(f"   ‚úÖ role_exists(): {exists}")
        except Exception as e:
            print(f"   ‚ùå role_exists(): –æ—à–∏–±–∫–∞ - {str(e)}")
        
        print("\n" + "=" * 50)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return role_manager
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        return None

async def test_main_role_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_role_manager –∏–∑ main.py"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_role_manager –∏–∑ main.py")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        from main import initialize_role_system, get_role_manager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        role_manager = await initialize_role_system()
        
        if role_manager:
            print("   ‚úÖ –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print("   ‚ùå –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_role_manager
        print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ get_role_manager...")
        retrieved_manager = get_role_manager()
        
        if retrieved_manager:
            print("   ‚úÖ get_role_manager() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä")
        else:
            print("   ‚ùå get_role_manager() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        
        try:
            roles = await retrieved_manager.get_all_roles()
            print(f"   ‚úÖ get_all_roles(): {len(roles)} —Ä–æ–ª–µ–π")
        except Exception as e:
            print(f"   ‚ùå get_all_roles(): {str(e)}")
        
        try:
            permissions = await retrieved_manager.get_available_permissions()
            print(f"   ‚úÖ get_available_permissions(): {len(permissions)} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
        except Exception as e:
            print(f"   ‚ùå get_available_permissions(): {str(e)}")
        
        print("\n" + "=" * 50)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ main.py –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return retrieved_manager
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ main.py: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    required_vars = [
        "LARK_APP_ID", "LARK_APP_SECRET", "LARK_TABLE_APP_ID", "LARK_TABLE_ID",
        "MONGODB_URI", "MONGODB_DB"
    ]
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"   ‚úÖ {var}: {value[:10]}..." if len(value) > 10 else f"   ‚úÖ {var}: {value}")
        else:
            print(f"   ‚ùå {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(test_role_system_initialization())
    asyncio.run(test_main_role_manager())
    
    print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Lark API")
    print("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫") 