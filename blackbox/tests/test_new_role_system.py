#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

async def test_new_role_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        from main import initialize_role_system
        role_manager = await initialize_role_system()
        
        if not role_manager:
            print("   ‚ùå –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
        
        print("   ‚úÖ –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
        available_permissions = await role_manager.get_available_permissions()
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {len(available_permissions)}")
        for perm in available_permissions:
            description = await role_manager.get_permission_description(perm)
            print(f"   ‚Ä¢ {perm}: {description}")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        roles = await role_manager.get_all_roles()
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–æ–ª–µ–π: {len(roles)}")
        for role in roles:
            permissions_count = sum(1 for perm, enabled in role.permissions.items() if enabled)
            print(f"   ‚Ä¢ {role.role_name}: {permissions_count} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
            print(f"     üìù {role.description}")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Lark Base
        print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Lark Base...")
        try:
            users_count = await role_manager.user_provider.sync_users_from_lark()
            print(f"   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users_lark
        print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users_lark...")
        try:
            from database import db
            users_lark_count = await db.users_lark.count_documents({})
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users_lark: {users_lark_count}")
            
            if users_lark_count > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
                sample_users = await db.users_lark.find({}).limit(3).to_list(length=3)
                print("   –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
                for user in sample_users:
                    print(f"     ‚Ä¢ @{user.get('username', 'N/A')} - {user.get('employee_name', 'N/A')} - {user.get('role', 'N/A')}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        
        # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞...")
        test_usernames = ["alexdru", "test_user", "admin"]
        
        for username in test_usernames:
            try:
                access_granted, error_message = await role_manager.check_user_access(username)
                status = "‚úÖ" if access_granted else "‚ùå"
                print(f"   {status} @{username}: {error_message}")
            except Exception as e:
                print(f"   ‚ùå @{username}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–æ–≤–æ–π —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()


async def test_permission_checking():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    print("\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
    print("=" * 50)
    
    try:
        from main import initialize_role_system
        role_manager = await initialize_role_system()
        
        if not role_manager:
            print("‚ùå –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        test_cases = [
            ("admin", "can_use_analysis", True),
            ("admin", "can_manage_sources", True),
            ("manager", "can_use_analysis", True),
            ("manager", "can_manage_sources", True),
            ("analyst", "can_use_analysis", True),
            ("analyst", "can_manage_sources", False),
            ("tester", "can_use_analysis", True),
            ("tester", "can_manage_sources", False),
        ]
        
        for role_name, permission, expected in test_cases:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–æ–ª–∏
                role_permissions = await role_manager.role_provider.get_role_permissions(role_name)
                if role_permissions:
                    has_permission = role_permissions.permissions.get(permission, False)
                    status = "‚úÖ" if has_permission == expected else "‚ùå"
                    print(f"   {status} {role_name}.{permission}: {has_permission} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
                else:
                    print(f"   ‚ùå –†–æ–ª—å {role_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {role_name}.{permission}: {e}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {str(e)}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ–π —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã - {datetime.now()}")
    print("=" * 80)
    
    await test_new_role_system()
    await test_permission_checking()
    
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - {datetime.now()}")


if __name__ == "__main__":
    asyncio.run(main()) 