#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ MongoDB —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from role_model.mongodb_provider import MongoDBRoleProvider


async def test_mongodb_roles():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MongoDB —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MongoDB —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        role_provider = MongoDBRoleProvider()
        print("‚úÖ MongoDB –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
        print("\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π")
        roles = await role_provider.get_all_roles()
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–æ–ª–µ–π: {len(roles)}")
        
        for role in roles:
            permissions_count = sum(1 for perm, enabled in role.permissions.items() if enabled)
            print(f"  üîπ {role.role_name}: {permissions_count} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
            print(f"     üìù {role.description}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏
        print("\nüîç –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏")
        admin_role = await role_provider.get_role_permissions("admin")
        if admin_role:
            print(f"‚úÖ –†–æ–ª—å 'admin' –Ω–∞–π–¥–µ–Ω–∞")
            print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: {sum(admin_role.permissions.values())}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {admin_role.description}")
        else:
            print("‚ùå –†–æ–ª—å 'admin' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏
        print("\nüîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π")
        test_roles = ["admin", "manager", "nonexistent"]
        for role_name in test_roles:
            exists = await role_provider.role_exists(role_name)
            status = "‚úÖ" if exists else "‚ùå"
            print(f"  {status} {role_name}: {exists}")
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª–∏
        print("\nüìä –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª–∏")
        role_info = await role_provider.get_role_info("manager")
        if role_info:
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏ 'manager':")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {role_info['role_name']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {role_info['description']}")
            print(f"   –°–æ–∑–¥–∞–Ω–∞: {role_info['created_at']}")
            print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∞: {role_info['updated_at']}")
            print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: {len(role_info['permissions'])}")
        else:
            print("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏ 'manager' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        print("\nüîë –¢–µ—Å—Ç 5: –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
        permissions = await role_provider.get_available_permissions()
        print(f"–î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {len(permissions)}")
        for perm in permissions:
            description = await role_provider.get_permission_description(perm)
            print(f"  ‚Ä¢ {perm}: {description}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã MongoDB —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()


async def test_role_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–æ–ª—è–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–æ–ª—è–º–∏")
    print("=" * 50)
    
    try:
        role_provider = MongoDBRoleProvider()
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
        print("\n‚ûï –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏")
        test_permissions = {
            "can_use_analysis": True,
            "can_receive_digest": True,
            "can_view_statistics": True
        }
        
        success = await role_provider.create_role(
            "test_role", 
            test_permissions, 
            "–¢–µ—Å—Ç–æ–≤–∞—è —Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        )
        
        if success:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞
            role = await role_provider.get_role_permissions("test_role")
            if role:
                print(f"‚úÖ –†–æ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {role.role_name}")
                print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: {sum(role.permissions.values())}")
            
            # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏
            print("\nüîß –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏")
            updated_permissions = {
                "can_use_analysis": True,
                "can_receive_digest": True,
                "can_view_statistics": True,
                "can_export_data": True
            }
            
            update_success = await role_provider.update_role(
                "test_role",
                updated_permissions,
                "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–æ–ª—å"
            )
            
            if update_success:
                print("‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                updated_role = await role_provider.get_role_permissions("test_role")
                if updated_role:
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å: {updated_role.description}")
                    print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: {sum(updated_role.permissions.values())}")
            
            # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
            print("\nüóëÔ∏è –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏")
            delete_success = await role_provider.delete_role("test_role")
            
            if delete_success:
                print("‚úÖ –†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                deleted_role = await role_provider.get_role_permissions("test_role")
                if not deleted_role:
                    print("‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã")
                else:
                    print("‚ùå –†–æ–ª—å –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–æ–ª–∏")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_mongodb_roles())
    asyncio.run(test_role_operations()) 