import asyncio
import aiohttp
from typing import Dict, List, Optional
from datetime import datetime
import time
from .base_provider import BaseUserProvider, BaseRoleProvider, UserInfo, RolePermissions
from database import db


class LarkUserProvider(BaseUserProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è Lark Base"""
    
    def __init__(self, app_id: str, app_secret: str, table_app_id: str, table_id: str):
        self.app_id = app_id
        self.app_secret = app_secret
        self.table_app_id = table_app_id
        self.table_id = table_id
        self._access_token = None
        self._users_cache = {}
        self._users_by_id_cache = {}  # –ö—ç—à –ø–æ user_id
        self._cache_expires = 0
        self.users_lark_collection = db.users_lark  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark
        self._sync_task = None  # –ó–∞–¥–∞—á–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    
    async def start_periodic_sync(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        if self._sync_task is None:
            self._sync_task = asyncio.create_task(self._periodic_sync())
    
    async def stop_periodic_sync(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        if self._sync_task:
            self._sync_task.cancel()
            try:
                await self._sync_task
            except asyncio.CancelledError:
                pass
            self._sync_task = None
    
    async def _periodic_sync(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
        while True:
            try:
                await self.sync_users_from_lark()
                print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Lark Base –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now()}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Lark Base: {e}")
            
            # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç
            await asyncio.sleep(600)  # 600 —Å–µ–∫—É–Ω–¥ = 10 –º–∏–Ω—É—Ç
    
    async def _get_access_token(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ Lark API"""
        if self._access_token and time.time() < self._cache_expires:
            return self._access_token
        
        url = "https://open.larksuite.com/open-apis/auth/v3/tenant_access_token/internal/"
        payload = {"app_id": self.app_id, "app_secret": self.app_secret}
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                data = await response.json()
                self._access_token = data["tenant_access_token"]
                # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ 1 —á–∞—Å
                self._cache_expires = time.time() + 3600
                return self._access_token
    
    async def _fetch_all_users(self) -> List[UserInfo]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark Base"""
        access_token = await self._get_access_token()
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
        
        base_url = f"https://open.larksuite.com/open-apis/bitable/v1/apps/{self.table_app_id}/tables/{self.table_id}/records"
        
        all_users = []
        page_token = ""
        
        async with aiohttp.ClientSession() as session:
            while True:
                if page_token:
                    url = f"{base_url}?page_token={page_token}"
                else:
                    url = base_url
                
                async with session.get(url, headers=headers) as response:
                    data = await response.json()
                    
                    if not data.get("data", {}).get("items"):
                        break
                    
                    for record in data["data"]["items"]:
                        fields = record.get("fields", {})
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ø–æ–ª—è –°–æ—Ç—Ä—É–¥–Ω–∏–∫
                        employee_name = ""
                        employee_email = ""
                        if fields.get("–°–æ—Ç—Ä—É–¥–Ω–∏–∫"):
                            employee_data = fields.get("–°–æ—Ç—Ä—É–¥–Ω–∏–∫")
                            if isinstance(employee_data, list) and employee_data:
                                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ email
                                first_item = employee_data[0]
                                if isinstance(first_item, dict):
                                    employee_name = first_item.get('name', '') or first_item.get('en_name', '')
                                    employee_email = first_item.get('email', '')
                            elif isinstance(employee_data, dict):
                                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                                employee_name = employee_data.get('name', '') or employee_data.get('en_name', '')
                                employee_email = employee_data.get('email', '')
                            else:
                                employee_name = str(employee_data)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º Telegram username –∏–∑ –ø–æ–ª—è Telegram
                        telegram_field = fields.get("Telegram", "")
                        if isinstance(telegram_field, list) and telegram_field:
                            telegram_username = telegram_field[0].get("text", "")
                        elif isinstance(telegram_field, str):
                            telegram_username = telegram_field
                        else:
                            telegram_username = ""
                        
                        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
                        if telegram_username.startswith("@"):
                            telegram_username = telegram_username[1:]
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º user_id –∏–∑ username (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
                        user_id = hash(telegram_username) % (2**31) if telegram_username else 0
                        
                        user_info = UserInfo(
                            user_id=user_id,
                            telegram_username=telegram_username,
                            role=fields.get("–†–æ–ª—å"),
                            is_whitelisted=True,  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ Lark —Å—á–∏—Ç–∞—é—Ç—Å—è whitelisted
                            is_active=True,
                            company_id=fields.get("–ö–æ–º–ø–∞–Ω–∏—è"),
                            employee_status=fields.get("–°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"),
                            employee_name=employee_name,
                            employee_email=employee_email
                        )
                        all_users.append(user_info)
                    
                    if not data["data"].get("has_more"):
                        break
                    
                    page_token = data["data"].get("page_token", "")
        
        return all_users
    
    async def get_user_info(self, user_id: int) -> Optional[UserInfo]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        print(f"üîç [DEBUG] get_user_info –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è user_id: {user_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await self._update_cache_if_needed()
        
        print(f"üîç [DEBUG] –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω. –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø–æ user_id: {len(self._users_by_id_cache)}")
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∫—ç—à–µ –ø–æ user_id
        if user_id in self._users_by_id_cache:
            user = self._users_by_id_cache[user_id]
            print(f"‚úÖ [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –ø–æ user_id {user_id}:")
            print(f"   - Username: @{user.telegram_username}")
            print(f"   - –ò–º—è: {user.employee_name}")
            print(f"   - –†–æ–ª—å: {user.role}")
            print(f"   - –°—Ç–∞—Ç—É—Å: {user.employee_status}")
            return user
        
        print(f"‚ùå [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {user_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –ø–æ user_id")
        print(f"üîç [DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ user_id –≤ –∫—ç—à–µ: {list(self._users_by_id_cache.keys())[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        print(f"üîç [DEBUG] –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∫—ç—à–µ (—Ä–∞–∑–º–µ—Ä: {len(self._users_cache)})")
        for username, user in self._users_cache.items():
            if user.user_id == user_id:
                print(f"‚úÖ [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ user_id {user_id} –≤ –∫—ç—à–µ –ø–æ username:")
                print(f"   - Username: @{user.telegram_username}")
                print(f"   - –ò–º—è: {user.employee_name}")
                print(f"   - –†–æ–ª—å: {user.role}")
                print(f"   - –°—Ç–∞—Ç—É—Å: {user.employee_status}")
                self._users_by_id_cache[user_id] = user
                return user
        
        print(f"‚ùå [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {user_id} –ù–ï –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ")
        print(f"üîç [DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ username –≤ –∫—ç—à–µ: {list(self._users_cache.keys())[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        
        return None
    
    async def get_user_by_username(self, username: str) -> Optional[UserInfo]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
        await self._update_cache_if_needed()
        
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if username.startswith("@"):
            username = username[1:]
        
        return self._users_cache.get(username)
    
    async def get_all_users(self) -> List[UserInfo]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        await self._update_cache_if_needed()
        return list(self._users_cache.values())
    
    async def is_user_whitelisted(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ whitelist"""
        user_info = await self.get_user_info(user_id)
        return user_info is not None and user_info.is_whitelisted
    
    async def get_user_role(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_info = await self.get_user_info(user_id)
        return user_info.role if user_info else None
    
    async def _update_cache_if_needed(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        current_time = time.time()
        if not self._users_cache or current_time > self._cache_expires:
            users = await self._fetch_all_users()
            self._users_cache = {user.telegram_username: user for user in users if user.telegram_username}
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ user_id –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            self._users_by_id_cache = {}
            # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
            self._cache_expires = current_time + 300
    
    async def refresh_cache(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à"""
        self._cache_expires = 0
        await self._update_cache_if_needed()
    
    async def sync_users_from_lark(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark Base –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ MongoDB"""
        try:
            print(f"üîÑ [DEBUG] –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark Base...")
            
            users = await self._fetch_all_users()
            print(f"üîç [DEBUG] –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark Base")
            
            # –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é users_lark (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
            print(f"üßπ [DEBUG] –û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users_lark...")
            delete_result = self.users_lark_collection.delete_many({})
            print(f"‚úÖ [DEBUG] –£–¥–∞–ª–µ–Ω–æ {delete_result.deleted_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users_lark")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ MongoDB
            saved_count = 0
            for user in users:
                if user.telegram_username:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å username
                    user_doc = {
                        "username": user.telegram_username,
                        "employee_name": user.employee_name or "",
                        "role": user.role or "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞",
                        "status": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
                        "employee_status": user.employee_status or "–ù–µ —É–∫–∞–∑–∞–Ω",
                        "synced_at": datetime.now().isoformat()
                    }
                    print(f"üíæ [DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.telegram_username} - {user.employee_name} - {user.role}")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π insert_one –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    result = self.users_lark_collection.insert_one(user_doc)
                    saved_count += 1
                    print(f"‚úÖ [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.telegram_username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {result.inserted_id}")
                else:
                    print(f"‚ö†Ô∏è [DEBUG] –ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ username: {user.employee_name}")
            
            print(f"üíæ [DEBUG] –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ MongoDB: {saved_count}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._users_cache = {user.telegram_username: user for user in users if user.telegram_username}
            self._users_by_id_cache = {user.user_id: user for user in users}
            self._cache_expires = time.time() + 300  # 5 –º–∏–Ω—É—Ç
            
            print(f"üîÑ [DEBUG] –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self._users_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username, {len(self._users_by_id_cache)} –ø–æ user_id")
            print(f"‚úÖ [DEBUG] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            return len(users)
        except Exception as e:
            print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark: {e}")
            return 0
    
    async def get_user_by_username_from_lark(self, username: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users_lark –ø–æ username"""
        try:
            print(f"üîç [DEBUG] –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users_lark –ø–æ username: '{username}'")
            
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_username = username.lstrip('@')
            print(f"üîç [DEBUG] –û—á–∏—â–µ–Ω–Ω—ã–π username –¥–ª—è –ø–æ–∏—Å–∫–∞: '{clean_username}'")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π find_one –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            user_doc = self.users_lark_collection.find_one({"username": clean_username})
            
            if user_doc:
                print(f"‚úÖ [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user_doc}")
            else:
                print(f"‚ùå [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username '{clean_username}' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users_lark")
                print(f"üîç [DEBUG] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users_lark:")
                try:
                    all_users = list(self.users_lark_collection.find({}))
                    print(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {len(all_users)}")
                    for i, user in enumerate(all_users[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        print(f"   {i+1}. username: '{user.get('username', 'N/A')}', –∏–º—è: '{user.get('employee_name', 'N/A')}', —Ä–æ–ª—å: '{user.get('role', 'N/A')}'")
                    if len(all_users) > 5:
                        print(f"   ... –∏ –µ—â–µ {len(all_users) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            
            return user_doc
        except Exception as e:
            print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            return None
    
    async def check_user_access(self, username: str) -> tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
        
        Returns:
            tuple[bool, str]: (–¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        try:
            print(f"üîç [DEBUG] –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}")
            
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_username = username.lstrip('@')
            print(f"üîç [DEBUG] –û—á–∏—â–µ–Ω–Ω—ã–π username: {clean_username}")
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            print(f"üîç [DEBUG] –®–∞–≥ 1: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users_lark...")
            user_doc = await self.get_user_by_username_from_lark(clean_username)
            
            if not user_doc:
                print(f"‚ùå [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users_lark")
                return False, "‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
            
            print(f"‚úÖ [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users_lark")
            print(f"üîç [DEBUG] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_doc}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employee_status = user_doc.get("employee_status", "")
            print(f"üîç [DEBUG] –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: '{employee_status}'")
            print(f"üîç [DEBUG] –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: '–†–∞–±–æ—Ç–∞–µ—Ç'")
            
            if employee_status != "–†–∞–±–æ—Ç–∞–µ—Ç":
                print(f"‚ùå [DEBUG] –°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ù–ï '–†–∞–±–æ—Ç–∞–µ—Ç': '{employee_status}'")
                return False, "‚ùå –í–∞—à —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
            
            print(f"‚úÖ [DEBUG] –°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: '{employee_status}' - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            role = user_doc.get("role", "")
            print(f"üîç [DEBUG] –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{role}'")
            print(f"üîç [DEBUG] –û–∂–∏–¥–∞–µ–º–∞—è —Ä–æ–ª—å: –ù–ï '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'")
            
            if role == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞":
                print(f"‚ùå [DEBUG] –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'")
                return False, "‚ùå –í–∞–º –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏"
            
            print(f"‚úÖ [DEBUG] –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{role}' - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–ª–∏ –≤ –ë–î blackbox.roles
            print(f"üîç [DEBUG] –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–ª–∏ '{role}' –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ blackbox.roles...")
            from .mongodb_provider import MongoDBRoleProvider
            role_provider = MongoDBRoleProvider()
            role_exists = await role_provider.role_exists(role)
            
            if not role_exists:
                print(f"‚ùå [DEBUG] –†–æ–ª—å '{role}' –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ blackbox.roles")
                return False, "‚ùå –í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±–æ—Ç–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ–ª–∏"
            
            print(f"‚úÖ [DEBUG] –†–æ–ª—å '{role}' –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ blackbox.roles")
            print(f"üéâ [DEBUG] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{username}")
            
            return True, "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω"
            
        except Exception as e:
            print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"


class LarkRoleProvider(BaseRoleProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–æ–ª–µ–π –¥–ª—è Lark Base (–∑–∞–≥–ª—É—à–∫–∞)"""
    
    def __init__(self):
        # –í Lark —Ä–æ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self._roles = {}
        self._load_default_roles()
    
    def _load_default_roles(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        default_roles = {
            "admin": RolePermissions(
                role_name="admin",
                permissions={
                    "can_use_analysis": True,
                    "can_manage_sources": True,
                    "can_receive_digest": True,
                    "can_auth_telegram": True,
                    "can_create_roles": True,
                    "can_manage_roles": True
                },
                description="–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º"
            ),
            "manager": RolePermissions(
                role_name="manager",
                permissions={
                    "can_use_analysis": True,
                    "can_manage_sources": True,
                    "can_receive_digest": True,
                    "can_auth_telegram": True,
                    "can_create_roles": False,
                    "can_manage_roles": False
                },
                description="–î–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ"
            ),
            "analyst": RolePermissions(
                role_name="analyst",
                permissions={
                    "can_use_analysis": True,
                    "can_manage_sources": False,
                    "can_receive_digest": True,
                    "can_auth_telegram": False,
                    "can_create_roles": False,
                    "can_manage_roles": False
                },
                description="–î–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞–º"
            ),
            "tester": RolePermissions(
                role_name="tester",
                permissions={
                    "can_use_analysis": True,
                    "can_manage_sources": False,
                    "can_receive_digest": False,
                    "can_auth_telegram": False,
                    "can_create_roles": False,
                    "can_manage_roles": False
                },
                description="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
        }
        
        self._roles.update(default_roles)
    
    async def get_role_permissions(self, role_name: str) -> Optional[RolePermissions]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–æ–ª–∏"""
        return self._roles.get(role_name)
    
    async def get_all_roles(self) -> List[RolePermissions]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏"""
        return list(self._roles.values())
    
    async def create_role(self, role_name: str, permissions: Dict[str, bool], description: str = "") -> bool:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å"""
        if role_name in self._roles:
            return False
        
        self._roles[role_name] = RolePermissions(
            role_name=role_name,
            permissions=permissions,
            description=description
        )
        return True
    
    async def update_role(self, role_name: str, permissions: Dict[str, bool], description: str = "") -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å"""
        if role_name not in self._roles:
            return False
        
        self._roles[role_name] = RolePermissions(
            role_name=role_name,
            permissions=permissions,
            description=description
        )
        return True
    
    async def delete_role(self, role_name: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å"""
        if role_name in self._roles:
            del self._roles[role_name]
            return True
        return False
    
    async def role_exists(self, role_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏"""
        return role_name in self._roles 