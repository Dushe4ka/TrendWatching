#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –∏ –ø—Ä–∞–≤ –≤ MongoDB
"""

import asyncio
import sys
import os
from pymongo import MongoClient
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def update_roles_permissions():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∏ –ø—Ä–∞–≤ –≤ MongoDB"""
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∏ –ø—Ä–∞–≤ –≤ MongoDB")
    print("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        mongo_uri = os.getenv("MONGODB_URI", "mongodb://localhost:27017/")
        client = MongoClient(mongo_uri)
        db = client.blackbox
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–æ–ª–∏
        print("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–æ–ª–∏...")
        db.roles.delete_many({})
        print("‚úÖ –°—Ç–∞—Ä—ã–µ —Ä–æ–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ä–æ–ª–∏ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
        new_roles = [
            {
                "name": "admin",
                "description": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º",
                "permissions": {
                    "can_access_sources": True,
                    "can_access_analysis": True,
                    "can_access_subscriptions": True,
                    "can_manage_roles": True,
                    "can_manage_users": True,
                    "can_manage_telegram_auth": True
                }
            },
            {
                "name": "manager",
                "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –∞–Ω–∞–ª–∏–∑—É",
                "permissions": {
                    "can_access_sources": True,
                    "can_access_analysis": True,
                    "can_access_subscriptions": False,
                    "can_manage_roles": False,
                    "can_manage_users": False,
                    "can_manage_telegram_auth": False
                }
            },
            {
                "name": "analyst",
                "description": "–ê–Ω–∞–ª–∏—Ç–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º —Ç–æ–ª—å–∫–æ –∫ –∞–Ω–∞–ª–∏–∑—É",
                "permissions": {
                    "can_access_sources": False,
                    "can_access_analysis": True,
                    "can_access_subscriptions": False,
                    "can_manage_roles": False,
                    "can_manage_users": False,
                    "can_manage_telegram_auth": False
                }
            },
            {
                "name": "curator",
                "description": "–ö—É—Ä–∞—Ç–æ—Ä —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º",
                "permissions": {
                    "can_access_sources": True,
                    "can_access_analysis": False,
                    "can_access_subscriptions": True,
                    "can_manage_roles": False,
                    "can_manage_users": False,
                    "can_manage_telegram_auth": False
                }
            },
            {
                "name": "viewer",
                "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º —Ç–æ–ª—å–∫–æ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º",
                "permissions": {
                    "can_access_sources": False,
                    "can_access_analysis": False,
                    "can_access_subscriptions": True,
                    "can_manage_roles": False,
                    "can_manage_users": False,
                    "can_manage_telegram_auth": False
                }
            },
            {
                "name": "tester",
                "description": "–¢–µ—Å—Ç–µ—Ä —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º",
                "permissions": {
                    "can_access_sources": True,
                    "can_access_analysis": True,
                    "can_access_subscriptions": True,
                    "can_manage_roles": False,
                    "can_manage_users": False,
                    "can_manage_telegram_auth": False
                }
            }
        ]
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–æ–ª–∏
        print("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ä–æ–ª–∏...")
        result = db.roles.insert_many(new_roles)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(result.inserted_ids)} —Ä–æ–ª–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏:")
        for role in db.roles.find():
            print(f"   üè∑Ô∏è {role['name']}: {role['description']}")
            print(f"      –ü—Ä–∞–≤–∞:")
            for permission, value in role['permissions'].items():
                status = "‚úÖ" if value else "‚ùå"
                print(f"        {status} {permission}")
            print()
        
        print("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –∏ –ø—Ä–∞–≤")
    print("=" * 50)
    
    await update_roles_permissions()
    
    print("\nüèÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main()) 