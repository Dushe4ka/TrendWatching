#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ Lark Base
"""

import asyncio
import sys
import os
import argparse
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import get_role_system_config
from role_model.lark_provider import LarkUserProvider, LarkRoleProvider
from role_model.role_manager import RoleManager


class RoleAssigner:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self):
        role_config = get_role_system_config()["lark"]
        self.user_provider = LarkUserProvider(
            app_id=role_config["app_id"],
            app_secret=role_config["app_secret"],
            table_app_id=role_config["table_app_id"],
            table_id=role_config["table_id"]
        )
        self.role_provider = LarkRoleProvider()
        self.role_manager = RoleManager(self.user_provider, self.role_provider)
    
    async def get_all_users(self) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = await self.role_manager.get_all_users()
        return [
            {
                'user_id': user.user_id,
                'username': user.telegram_username,
                'role': user.role,
                'company': user.company_id
            }
            for user in users
        ]
    
    async def get_users_without_roles(self) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π"""
        users = await self.get_all_users()
        return [user for user in users if not user['role']]
    
    async def get_users_by_role(self, role: str) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é"""
        users = await self.get_all_users()
        return [user for user in users if user['role'] == role]
    
    async def get_available_roles(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏"""
        roles = await self.role_manager.get_all_roles()
        return [role.role_name for role in roles]
    
    async def assign_role_to_user(self, username: str, role: str) -> bool:
        """–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∑–∞–≥–ª—É—à–∫–∞ - —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ Lark API)"""
        print(f"‚ö†Ô∏è  –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ '{role}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")
        print("   –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Lark API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π")
        print("   –°–µ–π—á–∞—Å —ç—Ç–æ —Ç–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏—è")
        return True
    
    async def show_user_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = await self.get_all_users()
        roles = await self.get_available_roles()
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        print("=" * 40)
        print(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
        role_stats = {}
        for user in users:
            role = user['role'] or '–ë–µ–∑ —Ä–æ–ª–∏'
            role_stats[role] = role_stats.get(role, 0) + 1
        
        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º:")
        for role, count in sorted(role_stats.items()):
            print(f"  {role}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {', '.join(roles)}")
    
    async def show_users_without_roles(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π"""
        users_without_roles = await self.get_users_without_roles()
        
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ —Ä–æ–ª–µ–π ({len(users_without_roles)}):")
        print("=" * 50)
        
        for i, user in enumerate(users_without_roles[:20], 1):
            print(f"{i:2d}. @{user['username']} (ID: {user['user_id']})")
        
        if len(users_without_roles) > 20:
            print(f"... –∏ –µ—â–µ {len(users_without_roles) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    async def show_users_by_role(self, role: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é"""
        users = await self.get_users_by_role(role)
        
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é '{role}' ({len(users)}):")
        print("=" * 50)
        
        for i, user in enumerate(users[:20], 1):
            print(f"{i:2d}. @{user['username']} (ID: {user['user_id']})")
        
        if len(users) > 20:
            print(f"... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    async def interactive_role_assignment(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π"""
        print("üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π")
        print("=" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π
        users_without_roles = await self.get_users_without_roles()
        
        if not users_without_roles:
            print("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∏–º–µ—é—Ç —Ä–æ–ª–∏!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏
        roles = await self.get_available_roles()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(users_without_roles)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {', '.join(roles)}")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("–ü–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π:")
        for i, user in enumerate(users_without_roles[:10], 1):
            print(f"{i:2d}. @{user['username']}")
        
        print()
        print("–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ: username role")
        print("–ù–∞–ø—Ä–∏–º–µ—Ä: Romka201616 analyst")
        print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ: exit")
        print()
        
        while True:
            try:
                command = input("> ").strip()
                
                if command.lower() == 'exit':
                    break
                
                if not command:
                    continue
                
                parts = command.split()
                if len(parts) != 2:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: username role")
                    continue
                
                username, role = parts
                
                # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
                if username.startswith('@'):
                    username = username[1:]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
                if role not in roles:
                    print(f"‚ùå –†–æ–ª—å '{role}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {', '.join(roles)}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_exists = any(u['username'] == username for u in users_without_roles)
                if not user_exists:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π")
                    continue
                
                # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å
                success = await self.assign_role_to_user(username, role)
                if success:
                    print(f"‚úÖ –†–æ–ª—å '{role}' –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏")
                
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    parser.add_argument("--stats", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    parser.add_argument("--no-roles", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–µ–π")
    parser.add_argument("--by-role", type=str, help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é")
    parser.add_argument("--interactive", action="store_true", help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π")
    
    args = parser.parse_args()
    
    assigner = RoleAssigner()
    
    try:
        if args.stats:
            await assigner.show_user_statistics()
        elif args.no_roles:
            await assigner.show_users_without_roles()
        elif args.by_role:
            await assigner.show_users_by_role(args.by_role)
        elif args.interactive:
            await assigner.interactive_role_assignment()
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await assigner.show_user_statistics()
            print()
            await assigner.show_users_without_roles()
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main()) 