from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
# from bot.utils.misc import category_to_callback  # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from typing import List, Dict, Set, Any
import aiogram.types as types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.utils.callback_utils import create_digest_callback

def category_to_callback(category: str) -> str:
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    return category.lower().replace(' ', '_').replace('-', '_')

def get_dynamic_main_menu_keyboard(permissions: dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    buttons = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    if permissions.get("can_access_sources", False):
        buttons.append(InlineKeyboardButton(text="üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="menu_sources"))
    
    if permissions.get("can_access_analysis", False):
        buttons.append(InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑", callback_data="menu_analysis"))
    
    if permissions.get("can_access_subscriptions", False):
        buttons.append(InlineKeyboardButton(text="üì∞ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="menu_subscriptions"))
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    admin_buttons = []
    if permissions.get("can_manage_telegram_auth", False):
        admin_buttons.append(InlineKeyboardButton(text="üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="auth_menu"))
    
    if permissions.get("can_access_admin_panel", False):
        admin_buttons.append(InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω", callback_data="menu_admin"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_rows = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    for i in range(0, len(buttons), 2):
        row = buttons[i:i+2]
        keyboard_rows.append(row)
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    if admin_buttons:
        for i in range(0, len(admin_buttons), 2):
            row = admin_buttons[i:i+2]
            keyboard_rows.append(row)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∞–≤
    if not keyboard_rows:
        keyboard_rows.append([InlineKeyboardButton(text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π", callback_data="no_access")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

def get_user_main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π)"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="menu_sources"),
            InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑", callback_data="menu_analysis")
        ],
        [
            InlineKeyboardButton(text="üì∞ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="menu_subscriptions")
        ]
    ])
    return keyboard

def get_admin_main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏)"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="menu_sources"),
            InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑", callback_data="menu_analysis")
        ],
        [
            InlineKeyboardButton(text="üì∞ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="menu_subscriptions"),
            InlineKeyboardButton(text="üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="auth_menu")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω", callback_data="menu_admin")
        ]
    ])
    return keyboard

def get_menu_sources_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞", callback_data="sources_upload")],
            [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="sources_manage")],
            [InlineKeyboardButton(text="–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="parse_sources_menu")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
        ]
    )
    return keyboard

def get_sources_upload_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="CSV-—Ñ–∞–π–ª (–º–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)", callback_data="upload_csv")],
            [InlineKeyboardButton(text="RSS-–ª–µ–Ω—Ç–∞ (–æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞)", callback_data="upload_rss")],
            [InlineKeyboardButton(text="Telegram-–∫–∞–Ω–∞–ª (–æ–¥–∏–Ω –∫–∞–Ω–∞–ª)", callback_data="upload_tg")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="menu_sources")],
        ]
    )
    return keyboard

def get_sources_manage_keyboard(categories: Set[str]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ set() —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    # –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–Ω—å—à–µ –±—ã–ª–∞ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ
    category_buttons = [
        [InlineKeyboardButton(text=cat_name, callback_data=f"sources_manage_category_{category_to_callback(cat_name)}")]
        for cat_name in sorted(list(categories)) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º set –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π list –¥–ª—è —Ü–∏–∫–ª–∞
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    category_buttons.append([InlineKeyboardButton(text="–í—Å–µ", callback_data="sources_manage_category_all")])
    category_buttons.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="menu_sources")])
    
    return InlineKeyboardMarkup(inline_keyboard=category_buttons)

def get_parse_sources_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data="parse_sources_confirm")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="parse_sources_cancel")],
        ]
    )

def get_add_more_sources_keyboard(source_type: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ", callback_data=f"add_more_{source_type}")],
            [InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="parse_sources_confirm")],
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_adding_sources")],
        ]
    )

def create_sources_pagination_keyboard(sources: List[Dict], category_filter: str = "all", page: int = 0, sources_per_page: int = 10):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    total_sources = len(sources)
    total_pages = (total_sources + sources_per_page - 1) // sources_per_page
    
    if total_sources == 0:
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="menu_sources")]]
        )
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = max(0, min(page, total_pages - 1))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * sources_per_page
    end_idx = min(start_idx + sources_per_page, total_sources)
    page_sources = sources[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    keyboard_rows = []
    for i, src in enumerate(page_sources):
        source_idx = start_idx + i
        source_type = src.get('type', '?')
        source_url = src.get('url', '')
        # –û–±—Ä–µ–∑–∞–µ–º URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_url = source_url[:30] + "..." if len(source_url) > 30 else source_url
        
        keyboard_rows.append([
            InlineKeyboardButton(
                text=f"{source_type}: {display_url}", 
                callback_data=f"noop_{category_to_callback(category_filter)}_{source_idx}_{page}"
            ),
            InlineKeyboardButton(
                text="‚ùå", 
                callback_data=f"delete_source_{category_to_callback(category_filter)}_{source_idx}_{page}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"sources_page_{category_to_callback(category_filter)}_{page-1}"))
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    nav_buttons.append(InlineKeyboardButton(
        text=f"{page+1}/{total_pages}", 
        callback_data="noop_page_info"
    ))
    
    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"sources_page_{category_to_callback(category_filter)}_{page+1}"))
    
    if nav_buttons:
        keyboard_rows.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard_rows.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="menu_sources")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
def get_analysis_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ –ø–æ –∑–∞–ø—Ä–æ—Å—É", callback_data="analysis_query")],
            [InlineKeyboardButton(text="–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="analysis_digest_menu")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")],
        ]
    )

def get_analysis_digest_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π", callback_data="analysis_daily")],
            [InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π", callback_data="analysis_weekly")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="menu_analysis")],
        ]
    )

def get_analysis_category_keyboard(categories: List[str], callback_prefix: str, back_callback: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=cat, callback_data=f"{callback_prefix}_{category_to_callback(cat)}")]
                         for cat in categories] +
        [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data=back_callback)]]
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
def get_subscription_keyboard(categories: List[str], user_subs: List[str]):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=(cat + (" ‚úÖ" if cat in user_subs else "")),
                callback_data=f"toggle_sub_{cat}")]
            for cat in categories
        ] + [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def get_auth_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì± –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_new_account"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", callback_data="check_auth_status")
        ],
        [
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")
        ],
        [
            InlineKeyboardButton(text="üîß –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", callback_data="auth_service_menu")
        ],
        [
            InlineKeyboardButton(text="‚Üê –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])
    return keyboard

def get_auth_service_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì∫ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã", callback_data="distribute_channels"),
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã", callback_data="clean_duplicates")
        ],
        [
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data="clear_all_channels")
        ],
        [
            InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="auth_menu")
        ]
    ])
    return keyboard

def get_auth_service_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π", callback_data="auth_service_status"),
            InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ", callback_data="auth_service_check_all")
        ],
        [
            InlineKeyboardButton(text="üìã –û—Ç–ª–∞–¥–∫–∞", callback_data="auth_service_debug"),
            InlineKeyboardButton(text="üöÄ –ü–∞—Ä—Å–∏–Ω–≥", callback_data="auth_service_parsing")
        ],
        [
            InlineKeyboardButton(text="üì∫ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å", callback_data="auth_service_distribute"),
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="auth_service_clean")
        ],
        [
            InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="menu_admin")
        ]
    ])
    return keyboard

def get_parsing_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="auth_service_parse_all")],
        [InlineKeyboardButton(text="üì° –ü–∞—Ä—Å–∏–Ω–≥ RSS", callback_data="auth_service_parse_rss")],
        [InlineKeyboardButton(text="üì± –ü–∞—Ä—Å–∏–Ω–≥ Telegram", callback_data="auth_service_parse_telegram")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data="auth_service_parsing_status")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auth_service_menu")]
    ])

def get_session_management_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å", callback_data="auth_service_status")],
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ", callback_data="auth_service_check_all")],
        [InlineKeyboardButton(text="üìã –û—Ç–ª–∞–¥–∫–∞", callback_data="auth_service_debug")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auth_service_menu")]
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
def get_csv_upload_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="sources_upload")]
        ]
    )

def get_rss_category_keyboard(categories: List[str]):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è RSS"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=cat, callback_data=f"rss_cat_{cat}")] for cat in categories
        ] + [
            [InlineKeyboardButton(text="–°–≤–æ—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="rss_cat_custom")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="sources_upload")]
        ]
    )

def get_tg_category_keyboard(categories: List[str]):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è Telegram"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=cat, callback_data=f"tg_cat_{cat}")] for cat in categories
        ] + [
            [InlineKeyboardButton(text="–°–≤–æ—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="tg_cat_custom")],
            [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="sources_upload")]
        ]
    )

def get_custom_category_back_keyboard(source_type: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"upload_{source_type}")]]
    )

def get_source_input_back_keyboard(source_type: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"upload_{source_type}")]]
    )

def get_main_menu_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Üê –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    )

def get_role_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å", callback_data="create_role"),
            types.InlineKeyboardButton(text="üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_role")
        ],
        [
            types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π", callback_data="list_roles"),
            types.InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="list_users")
        ],
        [
            types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])
    return keyboard


def get_role_creation_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="role_management")
        ]
    ])
    return keyboard


def get_role_edit_keyboard(role_name: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üîß –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", callback_data="edit_permissions"),
            types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å", callback_data="delete_role")
        ],
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_role")
        ]
    ])
    return keyboard


def get_role_edit_list_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_role")
        ]
    ])
    return keyboard


def get_permission_keyboard(available_permissions: list, selected_permissions: dict):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (—Å —Ä—É—Å—Å–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏)"""
    permission_descriptions = {
        "can_access_sources": "–î–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º",
        "can_access_analysis": "–î–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏–∑—É",
        "can_access_subscriptions": "–î–æ—Å—Ç—É–ø –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º",
        "can_manage_telegram_auth": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π",
        "can_access_admin_panel": "–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"
    }
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(available_permissions), 2):
        row = []
        # –ü–µ—Ä–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ —Ä—è–¥—É
        perm1 = available_permissions[i]
        is_selected1 = selected_permissions.get(perm1, False)
        status1 = "‚úÖ" if is_selected1 else "‚ùå"
        desc1 = permission_descriptions.get(perm1, perm1)
        row.append(types.InlineKeyboardButton(
            text=f"{status1} {desc1}",
            callback_data=f"perm_{perm1}"
        ))
        # –í—Ç–æ—Ä–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(available_permissions):
            perm2 = available_permissions[i + 1]
            is_selected2 = selected_permissions.get(perm2, False)
            status2 = "‚úÖ" if is_selected2 else "‚ùå"
            desc2 = permission_descriptions.get(perm2, perm2)
            row.append(types.InlineKeyboardButton(
                text=f"{status2} {desc2}",
                callback_data=f"perm_{perm2}"
            ))
        keyboard.inline_keyboard.append(row)
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.inline_keyboard.append([
        types.InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_permissions"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_previous_step")
    ])
    return keyboard


def get_confirm_keyboard(action: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data=f"confirm_{action}"),
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_role_edit")
        ]
    ])
    return keyboard


def get_admin_panel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üîß –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å", callback_data="auth_service_menu"),
            types.InlineKeyboardButton(text="üë• –†–æ–ª–∏", callback_data="role_management")
        ],
        [
            types.InlineKeyboardButton(text="üì¢ Telegram –∫–∞–Ω–∞–ª—ã", callback_data="telegram_channels_menu")
        ],
        [
            types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])
    return keyboard


def get_user_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users"),
            types.InlineKeyboardButton(text="üîß –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª–∏", callback_data="assign_roles")
        ],
        [
            types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", callback_data="refresh_cache")
        ],
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="role_management")
        ]
    ])
    return keyboard


def get_back_to_main_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)"""
    return get_main_menu_back_keyboard()

# –ù–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–∞–º–∏
def get_telegram_channels_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–∞–º–∏"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üì¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="telegram_channels_list")
        ],
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_admin")
        ]
    ])
    return keyboard

def get_telegram_channels_list_keyboard(channels: List[Dict[str, Any]]):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    from bot.utils.callback_utils import create_channel_callback
    
    keyboard_rows = []
    
    for channel in channels:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        channel_text = f"üì¢ {channel['title']}"
        if channel.get('username'):
            channel_text += f" (@{channel['username']})"
        
        keyboard_rows.append([
            types.InlineKeyboardButton(
                text=channel_text,
                callback_data=create_channel_callback("channel_info", channel['id'])
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard_rows.append([
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="telegram_channels_menu")
    ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

def get_telegram_channel_info_keyboard(channel_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Telegram –∫–∞–Ω–∞–ª–µ"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.button(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç",
        callback_data=create_digest_callback("add_digest", channel_id)
    )
    keyboard.button(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã",
        callback_data=create_digest_callback("edit_digests", channel_id)
    )
    keyboard.button(
        text="üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        callback_data=create_digest_callback("initialize_schedule", channel_id)
    )
    keyboard.button(
        text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        callback_data=create_digest_callback("check_schedule", channel_id)
    )
    keyboard.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º",
        callback_data="telegram_channels_list"
    )
    
    keyboard.adjust(1)
    return keyboard.as_markup()

def get_digest_category_keyboard(categories: List[str], channel_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    from bot.utils.callback_utils import create_category_callback
    
    keyboard_rows = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(categories), 2):
        row = []
        
        # –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ —Ä—è–¥—É
        cat1 = categories[i]
        row.append(types.InlineKeyboardButton(
            text=cat1,
            callback_data=create_category_callback("digest_cat", channel_id, cat1)
        ))
        
        # –í—Ç–æ—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(categories):
            cat2 = categories[i + 1]
            row.append(types.InlineKeyboardButton(
                text=cat2,
                callback_data=create_category_callback("digest_cat", channel_id, cat2)
            ))
        
        keyboard_rows.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    from bot.utils.callback_utils import create_channel_callback
    keyboard_rows.append([
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=create_channel_callback("channel_info", channel_id))
    ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

def get_digest_edit_category_keyboard(categories: List[str], channel_id: int, digest_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    from bot.utils.callback_utils import create_digest_callback
    
    keyboard_rows = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(categories), 2):
        row = []
        
        # –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ —Ä—è–¥—É
        cat1 = categories[i]
        row.append(types.InlineKeyboardButton(
            text=cat1,
            callback_data=create_digest_callback("edit_digest_category_select", channel_id, digest_id, category=cat1)
        ))
        
        # –í—Ç–æ—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(categories):
            cat2 = categories[i + 1]
            row.append(types.InlineKeyboardButton(
                text=cat2,
                callback_data=create_digest_callback("edit_digest_category_select", channel_id, digest_id, category=cat2)
            ))
        
        keyboard_rows.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard_rows.append([
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=create_digest_callback("digest_info", channel_id, digest_id))
    ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

def get_digest_time_input_keyboard(channel_id: int, category: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    from bot.utils.callback_utils import create_channel_callback
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=create_channel_callback("add_digest", channel_id))
        ]
    ])
    return keyboard

def get_digest_success_keyboard(channel_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    from bot.utils.callback_utils import create_channel_callback
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=create_channel_callback("channel_info", channel_id))
        ]
    ])
    return keyboard

def get_digest_error_keyboard(channel_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    from bot.utils.callback_utils import create_channel_callback
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=create_channel_callback("channel_info", channel_id))
        ]
    ])
    return keyboard

def get_digest_list_keyboard(channel_id: int, digests: List[Dict[str, Any]]):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞"""
    from bot.utils.callback_utils import create_digest_callback, create_channel_callback
    
    keyboard_rows = []
    
    for digest in digests:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        digest_text = f"üì∞ {digest['category']} - {digest['time']}"
        if not digest.get('is_active', True):
            digest_text += " ‚è∏Ô∏è"
        
        keyboard_rows.append([
            types.InlineKeyboardButton(
                text=digest_text,
                callback_data=create_digest_callback("digest_info", channel_id, digest['id'])
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard_rows.append([
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=create_channel_callback("channel_info", channel_id))
    ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

def get_digest_info_keyboard(channel_id: int, digest_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–∞–π–¥–∂–µ—Å—Ç–µ"""
    from bot.utils.callback_utils import create_digest_callback, create_channel_callback
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=create_digest_callback("edit_digest_time", channel_id, digest_id))
        ],
        [
            types.InlineKeyboardButton(text="üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=create_digest_callback("edit_digest_category", channel_id, digest_id))
        ],
        [
            types.InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç", callback_data=create_digest_callback("test_digest", channel_id, digest_id))
        ],
        [
            types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç", callback_data=create_digest_callback("delete_digest", channel_id, digest_id))
        ],
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=create_channel_callback("edit_digests", channel_id))
        ]
    ])
    return keyboard

def get_confirm_delete_digest_keyboard(channel_id: int, digest_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    from bot.utils.callback_utils import create_digest_callback
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=create_digest_callback("confirm_delete_digest", channel_id, digest_id))
        ],
        [
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=create_digest_callback("digest_info", channel_id, digest_id))
        ]
    ])
    return keyboard

