import asyncio
from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from ..keyboards.inline_keyboards import get_main_menu_keyboard
from ..utils.misc import get_role_manager_async


async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    print(f"üöÄ [DEBUG] –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    print(f"üì± [DEBUG] Username –∏–∑ Telegram: '{username}'")
    print(f"üë§ [DEBUG] –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{message.from_user.first_name}'")
    print(f"üìù [DEBUG] –ü–æ–ª–Ω–æ–µ –∏–º—è: '{message.from_user.full_name}'")
    
    if not username:
        print(f"‚ùå [DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –ù–ï–¢ username –≤ Telegram")
        await message.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
        return
    
    print(f"‚úÖ [DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –ï–°–¢–¨ username: @{username}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
        role_manager = await get_role_manager_async()
        if not role_manager:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è @{username}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ username
        access_granted, error_message = await role_manager.check_user_access(username)
        
        if not access_granted:
            print(f"‚ùå [DEBUG] –î–æ—Å—Ç—É–ø –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{username}: {error_message}")
            await message.answer(error_message)
            return
        
        print(f"‚úÖ [DEBUG] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{username}, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message, state)
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è @{username}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def cmd_main_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /main_menu —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    print(f"üìã [DEBUG] –ö–æ–º–∞–Ω–¥–∞ /main_menu –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    print(f"üì± [DEBUG] Username –∏–∑ Telegram: '{username}'")
    
    if not username:
        print(f"‚ùå [DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –ù–ï–¢ username –≤ Telegram")
        await message.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
        return
    
    print(f"‚úÖ [DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –ï–°–¢–¨ username: @{username}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
        role_manager = await get_role_manager_async()
        if not role_manager:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è @{username}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ username
        access_granted, error_message = await role_manager.check_user_access(username)
        
        if not access_granted:
            print(f"‚ùå [DEBUG] –î–æ—Å—Ç—É–ø –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{username}: {error_message}")
            await message.answer(error_message)
            return
        
        print(f"‚úÖ [DEBUG] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{username}, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message, state)
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /main_menu –¥–ª—è @{username}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_main_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    print(f"üìã [DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, username: @{username}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
        role_manager = await get_role_manager_async()
        if not role_manager:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await role_manager.get_user_by_username(username)
        if not user_info:
            print(f"‚ùå [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        print(f"üîç [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ username
        permissions = await role_manager.get_user_permissions_by_username(username)
        print(f"üîë [DEBUG] –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {permissions}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, @{username}!\n\n"
        welcome_text += f"üè¢ –†–æ–ª—å: {user_info.role or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}\n"
        welcome_text += f"üîë –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {sum(permissions.values())}\n\n"
        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        print(f"üìù [DEBUG] –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {welcome_text}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
        keyboard = await create_main_menu_keyboard(permissions)
        print(f"‚å®Ô∏è [DEBUG] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å {len(keyboard.inline_keyboard)} —Å—Ç—Ä–æ–∫–∞–º–∏")
        
        await message.answer(welcome_text, reply_markup=keyboard)
        print(f"‚úÖ [DEBUG] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è @{username}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é.")


async def create_main_menu_keyboard(permissions: dict):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤"""
    from ..keyboards.inline_keyboards import get_main_menu_keyboard
    
    print(f"‚å®Ô∏è [DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {permissions}")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_main_menu_keyboard()
    print(f"üîç [DEBUG] –ë–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {len(keyboard.inline_keyboard)} —Å—Ç—Ä–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ —Å–∫—Ä—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ
    available_buttons = []
    
    for row_index, row in enumerate(keyboard.inline_keyboard):
        print(f"üîç [DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ {row_index + 1}: {len(row)} –∫–Ω–æ–ø–æ–∫")
        new_row = []
        for button_index, button in enumerate(row):
            button_text = button.text
            print(f"  üîç [DEBUG] –ö–Ω–æ–ø–∫–∞ {button_index + 1}: '{button_text}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            if "–ê–Ω–∞–ª–∏–∑" in button_text:
                has_permission = permissions.get("can_use_analysis", False)
                print(f"    üîç [DEBUG] –ö–Ω–æ–ø–∫–∞ '–ê–Ω–∞–ª–∏–∑' - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ can_use_analysis: {'‚úÖ –ï–°–¢–¨' if has_permission else '‚ùå –ù–ï–¢'}")
                if not has_permission:
                    print(f"    ‚ùå [DEBUG] –ö–Ω–æ–ø–∫–∞ '–ê–Ω–∞–ª–∏–∑' —Å–∫—Ä—ã—Ç–∞ - –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                    continue
            elif "–ò—Å—Ç–æ—á–Ω–∏–∫–∏" in button_text:
                has_permission = permissions.get("can_manage_sources", False)
                print(f"    üîç [DEBUG] –ö–Ω–æ–ø–∫–∞ '–ò—Å—Ç–æ—á–Ω–∏–∫–∏' - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ can_manage_sources: {'‚úÖ –ï–°–¢–¨' if has_permission else '‚ùå –ù–ï–¢'}")
                if not has_permission:
                    print(f"    ‚ùå [DEBUG] –ö–Ω–æ–ø–∫–∞ '–ò—Å—Ç–æ—á–Ω–∏–∫–∏' —Å–∫—Ä—ã—Ç–∞ - –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                    continue
            elif "–î–∞–π–¥–∂–µ—Å—Ç" in button_text:
                has_permission = permissions.get("can_receive_digest", False)
                print(f"    üîç [DEBUG] –ö–Ω–æ–ø–∫–∞ '–î–∞–π–¥–∂–µ—Å—Ç' - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ can_receive_digest: {'‚úÖ –ï–°–¢–¨' if has_permission else '‚ùå –ù–ï–¢'}")
                if not has_permission:
                    print(f"    ‚ùå [DEBUG] –ö–Ω–æ–ø–∫–∞ '–î–∞–π–¥–∂–µ—Å—Ç' —Å–∫—Ä—ã—Ç–∞ - –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                    continue
            elif "Telegram" in button_text:
                has_permission = permissions.get("can_auth_telegram", False)
                print(f"    üîç [DEBUG] –ö–Ω–æ–ø–∫–∞ 'Telegram' - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ can_auth_telegram: {'‚úÖ –ï–°–¢–¨' if has_permission else '‚ùå –ù–ï–¢'}")
                if not has_permission:
                    print(f"    ‚ùå [DEBUG] –ö–Ω–æ–ø–∫–∞ 'Telegram' —Å–∫—Ä—ã—Ç–∞ - –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                    continue
            elif "–†–æ–ª–∏" in button_text:
                has_permission = permissions.get("can_create_roles", False)
                print(f"    üîç [DEBUG] –ö–Ω–æ–ø–∫–∞ '–†–æ–ª–∏' - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ can_create_roles: {'‚úÖ –ï–°–¢–¨' if has_permission else '‚ùå –ù–ï–¢'}")
                if not has_permission:
                    print(f"    ‚ùå [DEBUG] –ö–Ω–æ–ø–∫–∞ '–†–æ–ª–∏' —Å–∫—Ä—ã—Ç–∞ - –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                    continue
            else:
                print(f"    ‚ö†Ô∏è [DEBUG] –ö–Ω–æ–ø–∫–∞ '{button_text}' - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            new_row.append(button)
            print(f"    ‚úÖ [DEBUG] –ö–Ω–æ–ø–∫–∞ '{button_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫—É {row_index + 1}")
        
        if new_row:  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
            available_buttons.append(new_row)
            print(f"  ‚úÖ [DEBUG] –°—Ç—Ä–æ–∫–∞ {row_index + 1} –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å {len(new_row)} –∫–Ω–æ–ø–∫–∞–º–∏")
        else:
            print(f"  ‚ùå [DEBUG] –°—Ç—Ä–æ–∫–∞ {row_index + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    final_keyboard = types.InlineKeyboardMarkup(inline_keyboard=available_buttons)
    print(f"‚úÖ [DEBUG] –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(available_buttons)} —Å—Ç—Ä–æ–∫, {sum(len(row) for row in available_buttons)} –∫–Ω–æ–ø–æ–∫")
    
    return final_keyboard


async def main_menu_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    data = callback_query.data
    
    print(f"üîò [DEBUG] –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '{data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, username: @{username}")
    
    if not username:
        print(f"‚ùå [DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –Ω–µ—Ç username")
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
        role_manager = await get_role_manager_async()
        if not role_manager:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
            await callback_query.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
            return
        
        print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è @{username}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        access_granted, error_message = await role_manager.check_user_access(username)
        
        if not access_granted:
            print(f"‚ùå [DEBUG] –î–æ—Å—Ç—É–ø –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{username}: {error_message}")
            await callback_query.answer(error_message, show_alert=True)
            return
        
        print(f"‚úÖ [DEBUG] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        permission_required = get_permission_for_action(data)
        if permission_required:
            print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è '{permission_required}' –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{data}'")
            has_permission = await role_manager.check_permission(user_id, permission_required, username)
            if not has_permission:
                print(f"‚ùå [DEBUG] –£ @{username} –ù–ï–¢ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è '{permission_required}' –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{data}'")
                await callback_query.answer("‚ùå –í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç –ø—Ä–∞–≤–∞–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)
                return
            print(f"‚úÖ [DEBUG] –£ @{username} –ï–°–¢–¨ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ '{permission_required}' –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{data}'")
        else:
            print(f"‚ö†Ô∏è [DEBUG] –î–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{data}' –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        print(f"üéØ [DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è '{data}' –¥–ª—è @{username}")
        await handle_main_menu_action(callback_query, data, state)
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è @{username}: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


def get_permission_for_action(action: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–±—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è"""
    permission_map = {
        "analysis": "can_use_analysis",
        "sources": "can_manage_sources", 
        "digest": "can_receive_digest",
        "telegram_auth": "can_auth_telegram",
        "role_management": "can_create_roles"
    }
    
    permission = permission_map.get(action, "")
    print(f"üîç [DEBUG] –î–µ–π—Å—Ç–≤–∏–µ '{action}' -> —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ '{permission}'")
    
    return permission


async def handle_main_menu_action(callback_query: types.CallbackQuery, action: str, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    print(f"üéØ [DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è '{action}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {user_id})")
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    response_text = f"üîß –§—É–Ω–∫—Ü–∏—è '{action}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    print(f"üìù [DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞: {response_text}")
    
    await callback_query.answer(response_text, show_alert=True)
    print(f"‚úÖ [DEBUG] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}")


def register_main_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    dp.message.register(cmd_start, commands=["start"])
    dp.message.register(cmd_main_menu, commands=["main_menu"])
    dp.callback_query.register(main_menu_callback, lambda c: c.data in ["analysis", "sources", "digest", "telegram_auth", "role_management"]) 