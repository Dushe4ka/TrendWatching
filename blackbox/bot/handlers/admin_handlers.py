import asyncio
import logging
from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.utils.misc import check_permission, get_user_info, is_admin, has_admin_permissions
from bot.utils.callback_utils import _callback_cache
from bot.keyboards.inline_keyboards import (
    get_admin_panel_keyboard,
    get_auth_service_keyboard,
    get_role_management_keyboard,
    get_telegram_channels_menu_keyboard
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def log_user_action(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async def wrapper(*args, **kwargs):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            if args and hasattr(args[0], 'from_user'):
                user = args[0].from_user
                user_id = user.id
                username = user.username or "–ë–µ–∑ username"
                first_name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                last_name = user.last_name or ""
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
                func_name = func.__name__
                
                print(f"üîç [DEBUG] –§—É–Ω–∫—Ü–∏—è {func_name} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:")
                print(f"   ID: {user_id}")
                print(f"   Username: @{username}")
                print(f"   –ò–º—è: {first_name} {last_name}".strip())
                
                # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –≤—ã–≤–æ–¥–∏–º –µ—ë
                if hasattr(args[0], 'text') and args[0].text:
                    print(f"   –ö–æ–º–∞–Ω–¥–∞: {args[0].text}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ callback, –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
                if hasattr(args[0], 'data') and args[0].data:
                    print(f"   Callback data: {args[0].data}")
                
                print(f"   –í—Ä–µ–º—è: {asyncio.get_event_loop().time()}")
                print("=" * 50)
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            result = await func(*args, **kwargs)
            return result
            
        except Exception as e:
            print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            return await func(*args, **kwargs)
    
    return wrapper

async def menu_admin_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    text = (
        "‚öôÔ∏è **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n"
        "‚Ä¢ üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ auth_tg_service\n"
        "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üîç –û—Ç–ª–∞–¥–∫–∞ - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    )
    
    await callback_query.message.edit_text(
        text,
        reply_markup=get_admin_panel_keyboard(),
        parse_mode="Markdown"
    )

async def auth_service_menu_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    text = (
        "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–º auth_tg_service**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö —Å–µ—Å—Å–∏—è—Ö\n"
        "‚Ä¢ üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π\n"
        "‚Ä¢ üìã –û—Ç–ª–∞–¥–∫–∞ —Å–µ—Å—Å–∏–π - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "‚Ä¢ üîÑ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª—ã - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Å–µ—Å—Å–∏—è–º\n"
        "‚Ä¢ üì∞ –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–æ–º"
    )
    
    await callback_query.message.edit_text(
        text,
        reply_markup=get_auth_service_keyboard(),
        parse_mode="Markdown"
    )

async def auth_service_status_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–π"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback_query.answer("‚è≥ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å...")
    
    try:
        result = auth_service_client.get_status()
        if result:
            sessions = result.get("sessions", [])
            total_accounts = result.get("total_accounts", 0)
            total_channels = result.get("total_channels", 0)
            available_slots = result.get("available_slots", 0)
            
            text = (
                f"üìä **–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π**\n\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n"
                f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {available_slots}\n\n"
                f"**–°–µ—Å—Å–∏–∏:**\n"
            )
            
            for session in sessions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                phone = session.get("phone_number", "N/A")
                channels_count = len(session.get("channels", []))
                status = session.get("status", "unknown")
                text += f"‚Ä¢ {phone}: {channels_count} –∫–∞–Ω–∞–ª–æ–≤ ({status})\n"
            
            if len(sessions) > 10:
                text += f"\n... –∏ –µ—â–µ {len(sessions) - 10} —Å–µ—Å—Å–∏–π"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_session_management_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_session_management_keyboard()
        )

async def auth_service_check_all_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback_query.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏...")
    
    try:
        result = auth_service_client.check_all_sessions_status()
        if result:
            task_id = result.get("task_id", "N/A")
            text = (
                f"‚úÖ **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π –∑–∞–ø—É—â–µ–Ω–∞**\n\n"
                f"Task ID: `{task_id}`\n\n"
                f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç."
            )
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_session_management_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_session_management_keyboard()
        )

async def auth_service_debug_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback_query.answer("‚è≥ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    try:
        result = auth_service_client.debug_sessions()
        if result:
            sessions = result.get("sessions", [])
            total_sessions = result.get("total_sessions", 0)
            
            text = (
                f"üìã **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n"
                f"–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –≤ –ë–î: {total_sessions}\n\n"
                f"**–î–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–π:**\n"
            )
            
            for i, session in enumerate(sessions[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                phone = session.get("phone_number", "N/A")
                session_id = session.get("session_id", "N/A")
                created_at = session.get("created_at", "N/A")
                text += f"{i+1}. {phone}\n   ID: {session_id}\n   –°–æ–∑–¥–∞–Ω–∞: {created_at}\n\n"
            
            if len(sessions) > 5:
                text += f"... –∏ –µ—â–µ {len(sessions) - 5} —Å–µ—Å—Å–∏–π"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_session_management_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_session_management_keyboard()
        )

async def auth_service_distribute_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback_query.answer("‚è≥ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã...")
    
    try:
        result = auth_service_client.distribute_channels_from_db()
        if result:
            task_id = result.get("task_id", "N/A")
            text = (
                f"üîÑ **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ**\n\n"
                f"Task ID: `{task_id}`\n\n"
                f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç."
            )
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_auth_service_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_auth_service_keyboard()
        )

async def auth_service_parsing_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    text = (
        "üì∞ **–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞:\n"
        "‚Ä¢ üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ - RSS + Telegram\n"
        "‚Ä¢ üì° –ü–∞—Ä—Å–∏–Ω–≥ RSS - —Ç–æ–ª—å–∫–æ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n"
        "‚Ä¢ üì± –ü–∞—Ä—Å–∏–Ω–≥ Telegram - —Ç–æ–ª—å–∫–æ Telegram –∫–∞–Ω–∞–ª—ã\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - —Ç–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )
    
    await callback_query.message.edit_text(
        text,
        reply_markup=get_parsing_menu_keyboard(),
        parse_mode="Markdown"
    )

async def auth_service_parse_all_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback_query.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
    
    try:
        result = auth_service_client.parse_all_sources(limit=100)
        if result:
            task_id = result.get("task_id", "N/A")
            text = (
                f"üöÄ **–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω**\n\n"
                f"Task ID: `{task_id}`\n\n"
                f"–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç."
            )
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_parsing_menu_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_parsing_menu_keyboard()
        )

async def auth_service_parse_rss_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback_query.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ RSS...")
    
    try:
        result = auth_service_client.parse_rss_sources(limit=50)
        if result:
            task_id = result.get("task_id", "N/A")
            text = (
                f"üì° **–ü–∞—Ä—Å–∏–Ω–≥ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω**\n\n"
                f"Task ID: `{task_id}`\n\n"
                f"–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç."
            )
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS"
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_parsing_menu_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_parsing_menu_keyboard()
        )

async def auth_service_parse_telegram_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback_query.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Telegram...")
    
    try:
        result = auth_service_client.parse_telegram_sources(limit=50)
        if result:
            task_id = result.get("task_id", "N/A")
            text = (
                f"üì± **–ü–∞—Ä—Å–∏–Ω–≥ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω**\n\n"
                f"Task ID: `{task_id}`\n\n"
                f"–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç."
            )
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram"
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_parsing_menu_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_parsing_menu_keyboard()
        )

async def auth_service_parsing_status_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback_query.answer("‚è≥ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    try:
        result = auth_service_client.get_parsing_status()
        if result:
            total_sources = result.get("total_sources", 0)
            rss_sources = result.get("rss_sources", 0)
            telegram_sources = result.get("telegram_sources", 0)
            active_sessions = result.get("active_sessions", 0)
            total_parsed_records = result.get("total_parsed_records", 0)
            rss_parsed_records = result.get("rss_parsed_records", 0)
            telegram_parsed_records = result.get("telegram_parsed_records", 0)
            
            text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞**\n\n"
                f"**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_sources}\n"
                f"‚Ä¢ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {rss_sources}\n"
                f"‚Ä¢ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {telegram_sources}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {active_sessions}\n\n"
                f"**–°–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_parsed_records}\n"
                f"‚Ä¢ RSS –∑–∞–ø–∏—Å–µ–π: {rss_parsed_records}\n"
                f"‚Ä¢ Telegram –∑–∞–ø–∏—Å–µ–π: {telegram_parsed_records}"
            )
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_parsing_menu_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_parsing_menu_keyboard()
        )

async def cmd_roles(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /roles - —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    if not username:
        await message.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await has_admin_permissions(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–æ–ª–µ–π.")
        return
    
    try:
        from main import get_role_manager_async as get_role_manager
        role_manager = await get_role_manager()
        
        if not role_manager:
            await message.answer("‚ùå –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏
        roles = await role_manager.get_all_roles()
        
        if not roles:
            await message.answer("üìã –†–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
        roles_text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:\n\n"
        for role in roles:
            permissions_count = sum(1 for perm, enabled in role.permissions.items() if enabled)
            roles_text += f"üîπ {role.role_name}\n"
            roles_text += f"   üìù {role.description}\n"
            roles_text += f"   üîë –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: {permissions_count}\n\n"
        
        await message.answer(roles_text)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {str(e)}")

@log_user_action
async def cmd_users(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã /users –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {user_id})")
    
    if not username:
        print(f"‚ùå [DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –Ω–µ—Ç username")
        await message.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è @{username}...")
        is_admin_user = await has_admin_permissions(user_id, username)
        print(f"üîç [DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ is_admin: {is_admin_user}")
        
        if not is_admin_user:
            print(f"‚ùå [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        print(f"‚úÖ [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from bot.utils.misc import get_role_manager_async
        role_manager = await get_role_manager_async()
        if not role_manager:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        
        print(f"üîç [DEBUG] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = await role_manager.user_provider.get_all_users()
        print(f"üîç [DEBUG] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        if not users:
            await message.answer("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_text = "üìã **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
        for i, user in enumerate(users, 1):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º employee_name
            employee_name = user.employee_name
            if isinstance(employee_name, dict):
                if 'name' in employee_name:
                    employee_name = employee_name['name']
                elif 'en_name' in employee_name:
                    employee_name = employee_name['en_name']
                else:
                    employee_name = str(employee_name)
            
            users_text += f"{i}. **@{user.telegram_username or '–ë–µ–∑ username'}**\n"
            users_text += f"   üë§ –ò–º—è: {employee_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            users_text += f"   üè¢ –†–æ–ª—å: {user.role or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}\n"
            users_text += f"   üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            users_text += f"   üíº –°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {user.employee_status or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        
        print(f"‚úÖ [DEBUG] –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç")
        await message.answer(users_text, parse_mode="Markdown")
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /users: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cmd_permissions(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /permissions - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    if not username:
        await message.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
        return
    
    try:
        from main import get_role_manager_async as get_role_manager
        role_manager = await get_role_manager()
        
        if not role_manager:
            await message.answer("‚ùå –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        access_granted, error_message = await role_manager.check_user_access(username)
        
        if not access_granted:
            await message.answer(error_message)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await role_manager.get_user_info(user_id)
        
        if not user_info:
            await message.answer("‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        permissions = await role_manager.get_user_permissions(user_id)
        
        if not permissions:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        permissions_text = f"üîë –í–∞—à–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:\n\n"
        permissions_text += f"üë§ –†–æ–ª—å: {user_info.role or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}\n"
        permissions_text += f"üìß Username: @{user_info.telegram_username or 'N/A'}\n\n"
        
        enabled_permissions = [perm for perm, enabled in permissions.items() if enabled]
        disabled_permissions = [perm for perm, enabled in permissions.items() if not enabled]
        
        if enabled_permissions:
            permissions_text += "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            for perm in enabled_permissions:
                description = await role_manager.get_permission_description(perm)
                permissions_text += f"   ‚Ä¢ {description}\n"
        
        if disabled_permissions:
            permissions_text += "\n‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            for perm in disabled_permissions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                description = await role_manager.get_permission_description(perm)
                permissions_text += f"   ‚Ä¢ {description}\n"
            
            if len(disabled_permissions) > 5:
                permissions_text += f"   ... –∏ –µ—â–µ {len(disabled_permissions) - 5} —Ñ—É–Ω–∫—Ü–∏–π"
        
        await message.answer(permissions_text)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {str(e)}")

async def cmd_refresh_cache(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /refresh_cache - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    if not username:
        await message.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await has_admin_permissions(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞.")
        return
    
    try:
        from main import get_role_manager_async as get_role_manager
        role_manager = await get_role_manager()
        
        if not role_manager:
            await message.answer("‚ùå –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        await role_manager.user_provider.refresh_cache()
        
        await message.answer("‚úÖ –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {str(e)}")

async def role_management_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    text = (
        "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ ‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏\n"
        "‚Ä¢ üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ–ª–µ–π\n"
        "‚Ä¢ üìã –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–æ–ª–µ–π\n"
        "‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
    )
    
    await callback_query.message.edit_text(
        text,
        reply_markup=get_role_management_keyboard(),
        parse_mode="Markdown"
    )

async def telegram_channels_menu_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–∞–º–∏"""
    print(f"üîç DEBUG: telegram_channels_menu_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    text = (
        "üì¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–∞–º–∏**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã:\n"
        "‚Ä¢ üì¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª:\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π Telegram –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ\n"
        "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å"
    )
    
    print(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {text[:100]}...")
    
    from bot.keyboards.inline_keyboards import get_telegram_channels_menu_keyboard
    
    await callback_query.message.edit_text(
        text,
        reply_markup=get_telegram_channels_menu_keyboard(),
        parse_mode="Markdown"
    )
    
    print(f"üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    dp.callback_query.register(menu_admin_callback, lambda c: c.data == "menu_admin")
    dp.callback_query.register(role_management_callback, lambda c: c.data == "role_management")
    dp.callback_query.register(telegram_channels_menu_callback, lambda c: c.data == "telegram_channels_menu")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ telegram_channels_handlers
    from bot.handlers.telegram_channels_handlers import register_handlers as register_telegram_handlers
    register_telegram_handlers(dp)
    
    dp.callback_query.register(auth_service_menu_callback, lambda c: c.data == "auth_service_menu")
    dp.callback_query.register(auth_service_status_callback, lambda c: c.data == "auth_service_status")
    dp.callback_query.register(auth_service_check_all_callback, lambda c: c.data == "auth_service_check_all")
    dp.callback_query.register(auth_service_debug_callback, lambda c: c.data == "auth_service_debug")
    dp.callback_query.register(auth_service_distribute_callback, lambda c: c.data == "auth_service_distribute")
    dp.callback_query.register(auth_service_parsing_callback, lambda c: c.data == "auth_service_parsing")
    dp.callback_query.register(auth_service_parse_all_callback, lambda c: c.data == "auth_service_parse_all")
    dp.callback_query.register(auth_service_parse_rss_callback, lambda c: c.data == "auth_service_parse_rss")
    dp.callback_query.register(auth_service_parse_telegram_callback, lambda c: c.data == "auth_service_parse_telegram")
    dp.callback_query.register(auth_service_parsing_status_callback, lambda c: c.data == "auth_service_parsing_status") 

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    dp.message.register(cmd_roles, Command("roles"))
    dp.message.register(cmd_users, Command("users"))
    dp.message.register(cmd_permissions, Command("permissions"))
    dp.message.register(cmd_refresh_cache, Command("refresh_cache")) 