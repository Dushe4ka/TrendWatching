from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from bot.states.states import CustomStates
from bot.utils.misc import category_to_callback, callback_to_category
from database import get_categories
from celery_app.tasks.trend_analysis_tasks import analyze_trend_task
from celery_app.tasks.news_tasks import analyze_news_task
from celery_app.tasks.weekly_news_tasks import analyze_weekly_news_task
from aiogram3_calendar import SimpleCalendar, simple_cal_callback
from bot.keyboards.inline_keyboards import (
    get_analysis_menu_keyboard,
    get_analysis_digest_menu_keyboard,
    get_analysis_category_keyboard
)

async def menu_analysis_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞"""
    keyboard = get_analysis_menu_keyboard()
    await callback_query.message.edit_text(
        "üìä –ê–Ω–∞–ª–∏–∑:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def analysis_digest_menu_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    keyboard = get_analysis_digest_menu_keyboard()
    await callback_query.message.edit_text(
        "üì∞ –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=keyboard
    )

# –ê–Ω–∞–ª–∏–∑ –ø–æ –∑–∞–ø—Ä–æ—Å—É
async def analysis_query_category_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    categories = get_categories()
    keyboard = get_analysis_category_keyboard(categories, "analysis_query_cat", "menu_analysis")
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=keyboard
    )
    await state.set_state(CustomStates.analysis_query_category)

async def analysis_query_input_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    category_hash = callback_query.data.replace("analysis_query_cat_", "")
    categories = get_categories()
    category = callback_to_category(category_hash, categories)
    await state.update_data(category=category)
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
    )
    await state.set_state(CustomStates.analysis_query_input)

async def analysis_query_run(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    data = await state.get_data()
    category = data.get("category")
    user_query = message.text.strip()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    from ..keyboards.inline_keyboards import get_back_to_main_menu_keyboard
    
    await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã... –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Å–∞.", 
                        reply_markup=get_back_to_main_menu_keyboard())
    analyze_trend_task.delay(category=category, user_query=user_query, chat_id=message.chat.id)
    await state.clear()

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
async def analysis_daily_category_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    categories = get_categories()
    keyboard = get_analysis_category_keyboard(categories, "analysis_daily_cat", "analysis_digest_menu")
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞:",
        reply_markup=keyboard
    )
    await state.set_state(CustomStates.analysis_daily_category)

async def analysis_daily_date_input_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    category_hash = callback_query.data.replace("analysis_daily_cat_", "")
    categories = get_categories()
    category = callback_to_category(category_hash, categories)
    await state.update_data(category=category)
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=await SimpleCalendar().start_calendar()
    )
    await state.set_state(CustomStates.analysis_daily_date)

async def process_daily_calendar(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        data = await state.get_data()
        category = data.get("category")
        date_str = date.strftime("%Y-%m-%d")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        from ..keyboards.inline_keyboards import get_back_to_main_menu_keyboard
        
        await callback_query.message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç... –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞—Å–∞.", 
                                          reply_markup=get_back_to_main_menu_keyboard())
        analyze_news_task.delay(category=category, analysis_date=date_str, chat_id=callback_query.message.chat.id)
        await state.clear()

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
async def analysis_weekly_category_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    categories = get_categories()
    keyboard = get_analysis_category_keyboard(categories, "analysis_weekly_cat", "analysis_digest_menu")
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞:",
        reply_markup=keyboard
    )
    await state.set_state(CustomStates.analysis_weekly_category)

async def analysis_weekly_date_input_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    category_hash = callback_query.data.replace("analysis_weekly_cat_", "")
    categories = get_categories()
    category = callback_to_category(category_hash, categories)
    await state.update_data(category=category)
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–µ–¥–µ–ª–∏:",
        reply_markup=await SimpleCalendar().start_calendar()
    )
    await state.set_state(CustomStates.analysis_weekly_date)

async def process_weekly_calendar(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        data = await state.get_data()
        category = data.get("category")
        date_str = date.strftime("%Y-%m-%d")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        from ..keyboards.inline_keyboards import get_back_to_main_menu_keyboard
        
        await callback_query.message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç... –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞.", 
                                          reply_markup=get_back_to_main_menu_keyboard())
        analyze_weekly_news_task.delay(category=category, analysis_start_date=date_str, chat_id=callback_query.message.chat.id)
        await state.clear()

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é
    dp.callback_query.register(menu_analysis_callback, lambda c: c.data == "menu_analysis")
    dp.callback_query.register(analysis_digest_menu_callback, lambda c: c.data == "analysis_digest_menu")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    dp.callback_query.register(analysis_query_category_callback, lambda c: c.data == "analysis_query")
    dp.callback_query.register(analysis_query_input_callback, lambda c: c.data.startswith("analysis_query_cat_"))
    dp.message.register(analysis_query_run, CustomStates.analysis_query_input)
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
    dp.callback_query.register(analysis_daily_category_callback, lambda c: c.data == "analysis_daily")
    dp.callback_query.register(analysis_daily_date_input_callback, lambda c: c.data.startswith("analysis_daily_cat_"))
    dp.callback_query.register(process_daily_calendar, simple_cal_callback.filter(), CustomStates.analysis_daily_date)
    
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
    dp.callback_query.register(analysis_weekly_category_callback, lambda c: c.data == "analysis_weekly")
    dp.callback_query.register(analysis_weekly_date_input_callback, lambda c: c.data.startswith("analysis_weekly_cat_"))
    dp.callback_query.register(process_weekly_calendar, simple_cal_callback.filter(), CustomStates.analysis_weekly_date) 