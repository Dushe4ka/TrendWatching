from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.utils.misc import check_permission, get_user_info, has_admin_permissions, escape_markdown
from bot.keyboards.inline_keyboards import (
    get_role_management_keyboard,
    get_role_edit_keyboard,
    get_permission_keyboard,
    get_confirm_keyboard,
    get_role_creation_keyboard,
    get_role_edit_list_keyboard,
    get_main_menu_back_keyboard
)
import json


class RoleManagementStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    waiting_for_role_name = State()
    waiting_for_role_description = State()
    waiting_for_permissions = State()
    editing_role = State()
    editing_permissions = State()
    confirming_delete = State()


async def cmd_role_management(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /role_management - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏"""
    user_id = message.from_user.id
    username = message.from_user.username
    
    if not username:
        await message.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await has_admin_permissions(user_id, username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏.")
        return
    
    try:
        from main import get_role_manager_async as get_role_manager
        role_manager = await get_role_manager()
        
        if not role_manager:
            await message.answer("‚ùå –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏
        roles = await role_manager.get_all_roles()
        
        if not roles:
            await message.answer("üìã –†–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
        roles_text = "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏\n\n"
        roles_text += "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:\n"
        
        for role in roles:
            permissions_count = sum(1 for perm, enabled in role.permissions.items() if enabled)
            roles_text += f"üîπ {role.role_name}\n"
            roles_text += f"   üìù {role.description}\n"
            roles_text += f"   üîë –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: {permissions_count}\n\n"
        
        keyboard = get_role_management_keyboard()
        await message.answer(roles_text, reply_markup=keyboard)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {str(e)}")


async def create_role_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    print(f"[DEBUG] create_role_callback: callback_data={callback_query.data}, user_id={user_id}")
    current_state = await state.get_state()
    print(f"[DEBUG] create_role_callback: FSM state before={current_state}")
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–æ–ª–∏ –∏–∑ Lark
    if callback_query.data.startswith("create_role_"):
        role_name = callback_query.data.replace("create_role_", "")
        print(f"[DEBUG] create_role_callback: Detected Lark role creation, role_name={role_name}")
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
        await state.clear()
        await state.update_data(role_name=role_name)
        await state.set_state(RoleManagementStates.waiting_for_role_description)
        print(f"[DEBUG] create_role_callback: FSM state after set_state={await state.get_state()}")
        
        await callback_query.message.edit_text(
            f"üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑ Lark\n\n"
            f"üìù –†–æ–ª—å: {role_name}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏:"
        )
    else:
        print(f"[DEBUG] create_role_callback: Standard role creation flow")
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await state.set_state(RoleManagementStates.waiting_for_role_name)
        print(f"[DEBUG] create_role_callback: FSM state after set_state={await state.get_state()}")
        await callback_query.message.edit_text(
            "üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: moderator):",
            reply_markup=get_role_creation_keyboard()
        )


async def role_name_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏"""
    role_name = message.text.strip().lower()
    
    if not role_name or len(role_name) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ä–æ–ª—å
    try:
        from main import get_role_manager_async as get_role_manager
        role_manager = await get_role_manager()
        
        if await role_manager.role_exists(role_name):
            await message.answer(f"‚ùå –†–æ–ª—å '{role_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            await state.clear()
            return
        
        await state.update_data(role_name=role_name)
        await state.set_state(RoleManagementStates.waiting_for_role_description)
        
        await message.answer(
            f"üìù –†–æ–ª—å: {role_name}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏:",
            reply_markup=get_role_creation_keyboard()
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


async def role_description_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–∏"""
    description = message.text.strip()
    
    if not description:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    role_name = state_data.get("role_name")
    
    if not role_name:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    await state.update_data(description=description)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    try:
        from main import get_role_manager_async as get_role_manager
        role_manager = await get_role_manager()
        available_permissions = await role_manager.get_available_permissions()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        keyboard = get_permission_keyboard(available_permissions, {})
        
        await state.set_state(RoleManagementStates.waiting_for_permissions)
        await message.answer(
            f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ä–æ–ª–∏\n\n"
            f"üìù –†–æ–ª—å: {role_name}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


async def permission_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    data = callback_query.data
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π.", show_alert=True)
        return
    
    if data == "save_permissions":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å
        state_data = await state.get_data()
        role_name = state_data.get("role_name")
        description = state_data.get("description")
        permissions = state_data.get("permissions", {})
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"DEBUG: state_data = {state_data}")
        print(f"DEBUG: role_name = {role_name}")
        print(f"DEBUG: description = {description}")
        print(f"DEBUG: permissions = {permissions}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not role_name:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_menu_back_keyboard()
            )
            await state.clear()
            return
        
        if not description:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_menu_back_keyboard()
            )
            await state.clear()
            return
        
        try:
            from main import get_role_manager_async as get_role_manager
            role_manager = await get_role_manager()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ä–æ–ª—å
            if await role_manager.role_exists(role_name):
                # –ï—Å–ª–∏ —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
                success = await role_manager.update_role(role_name, permissions, description)
                action_text = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            else:
                # –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                success = await role_manager.create_role(role_name, permissions, description)
                action_text = "—Å–æ–∑–¥–∞–Ω–∞"
            
            if success:
                await callback_query.message.edit_text(
                    f"‚úÖ –†–æ–ª—å '{escape_markdown(role_name)}' {action_text} —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {escape_markdown(description)}\n"
                    f"üîë –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: {sum(permissions.values())}",
                    reply_markup=get_main_menu_back_keyboard()
                )
            else:
                await callback_query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {action_text} —Ä–æ–ª–∏ '{escape_markdown(role_name)}'.",
                    reply_markup=get_main_menu_back_keyboard()
                )
            
            await state.clear()
            
        except Exception as e:
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_main_menu_back_keyboard()
            )
            await state.clear()
            
    elif data == "back_to_permissions_edit":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–æ–ª–∏
        state_data = await state.get_data()
        role_name = state_data.get("editing_role", "")
        
        if role_name:
            await callback_query.message.edit_text(
                f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏: {escape_markdown(role_name)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_role_edit_keyboard(role_name)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(editing_role=role_name)
        else:
            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π
            await callback_query.message.edit_text(
                "üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_role_edit_list_keyboard()
            )
            await state.clear()
        
    elif data == "back_to_previous_step":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        state_data = await state.get_data()
        current_state = await state.get_state()
        
        if current_state == RoleManagementStates.waiting_for_permissions:
            # –ï—Å–ª–∏ –º—ã –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é —Ä–æ–ª–∏
            role_name = state_data.get("role_name", "")
            description = state_data.get("description", "")
            
            if role_name and description:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
                await state.set_state(RoleManagementStates.waiting_for_role_description)
                await callback_query.message.edit_text(
                    f"üìù –†–æ–ª—å: {escape_markdown(role_name)}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏:",
                    reply_markup=get_role_creation_keyboard()
                )
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏
                await state.set_state(RoleManagementStates.waiting_for_role_name)
                await callback_query.message.edit_text(
                    "üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: moderator):",
                    reply_markup=get_role_creation_keyboard()
                )
        elif current_state == RoleManagementStates.editing_permissions:
            # –ï—Å–ª–∏ –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–æ–ª–∏
            role_name = state_data.get("editing_role", "")
            if role_name:
                await callback_query.message.edit_text(
                    f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏: {role_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_role_edit_keyboard(role_name)
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(editing_role=role_name)
            else:
                # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π
                await callback_query.message.edit_text(
                    "üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                    reply_markup=get_role_edit_list_keyboard()
                )
                await state.clear()
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
            await callback_query.message.edit_text(
                "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                "‚Ä¢ ‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏\n"
                "‚Ä¢ üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ–ª–µ–π\n"
                "‚Ä¢ üìã –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–æ–ª–µ–π\n"
                "‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                reply_markup=get_role_management_keyboard(),
                parse_mode="Markdown"
            )
            await state.clear()
        
    else:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        permission = data.replace("perm_", "")
        state_data = await state.get_data()
        permissions = state_data.get("permissions", {})
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        permissions[permission] = not permissions.get(permission, False)
        await state.update_data(permissions=permissions)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            from main import get_role_manager_async as get_role_manager
            role_manager = await get_role_manager()
            available_permissions = await role_manager.get_available_permissions()
            
            keyboard = get_permission_keyboard(available_permissions, permissions)
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
            
        except Exception as e:
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_main_menu_back_keyboard()
            )
            await state.clear()


async def edit_role_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π.", show_alert=True)
        return
    
    try:
        from main import get_role_manager_async as get_role_manager
        role_manager = await get_role_manager()
        
        if not role_manager:
            await callback_query.message.edit_text(
                "‚ùå –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.",
                reply_markup=get_role_management_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        system_roles = await role_manager.get_all_roles()
        system_role_names = {role.role_name for role in system_roles}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏ –∏–∑ Lark
        lark_users = await role_manager.user_provider.get_all_users()
        lark_role_names = {user.role for user in lark_users if user.role}
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Ä–æ–ª–∏ (–µ—Å—Ç—å –≤ Lark, –Ω–æ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ)
        new_roles = lark_role_names - system_role_names
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏
        if system_roles:
            keyboard.inline_keyboard.append([
                types.InlineKeyboardButton(text="üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏:", callback_data="noop")
            ])
            
            for role in system_roles:
                keyboard.inline_keyboard.append([
                    types.InlineKeyboardButton(
                        text=f"üîß {role.role_name}",
                        callback_data=f"edit_role_{role.role_name}"
                    )
                ])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–æ–ª–∏ –∏–∑ Lark
        if new_roles:
            if system_roles:
                keyboard.inline_keyboard.append([])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            
            keyboard.inline_keyboard.append([
                types.InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ —Ä–æ–ª–∏ –∏–∑ Lark:", callback_data="noop")
            ])
            
            for role_name in sorted(new_roles):
                keyboard.inline_keyboard.append([
                    types.InlineKeyboardButton(
                        text=f"‚ûï {role_name} (–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)",
                        callback_data=f"create_role_{role_name}"
                    )
                ])
        
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="role_management")
        ])
        
        text = "üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π\n\n"
        if system_roles:
            text += f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ–ª–µ–π: {len(system_roles)}\n"
        if new_roles:
            text += f"üÜï –ù–æ–≤—ã—Ö —Ä–æ–ª–µ–π –∏–∑ Lark: {len(new_roles)}\n"
        
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        
        await callback_query.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_menu_back_keyboard()
        )


async def select_role_to_edit_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = callback_query.data
    print(f"[DEBUG] select_role_to_edit_callback: callback_data={data}")
    current_state = await state.get_state()
    print(f"[DEBUG] select_role_to_edit_callback: FSM state before={current_state}")
    
    if data == "role_management":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
        await callback_query.message.edit_text(
            "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "‚Ä¢ ‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏\n"
            "‚Ä¢ üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ–ª–µ–π\n"
            "‚Ä¢ üìã –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–æ–ª–µ–π\n"
            "‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            reply_markup=get_role_management_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    role_name = data.replace("edit_role_", "")
    print(f"[DEBUG] select_role_to_edit_callback: role_name={role_name}")
    
    try:
        from main import get_role_manager_async as get_role_manager
        role_manager = await get_role_manager()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏
        role_info = await role_manager.role_provider.get_role_info(role_name)
        print(f"[DEBUG] select_role_to_edit_callback: role_info={role_info}")
        
        if not role_info:
            await callback_query.message.edit_text(
                f"‚ùå –†–æ–ª—å '{escape_markdown(role_name)}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_menu_back_keyboard()
            )
            return
        
        await state.update_data(editing_role=role_name)
        print(f"[DEBUG] select_role_to_edit_callback: FSM state after update_data={await state.get_state()}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏
        permissions = role_info["permissions"]
        enabled_permissions = [perm for perm, enabled in permissions.items() if enabled]
        
        role_text = f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏: {escape_markdown(role_name)}\n\n"
        role_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {escape_markdown(role_info['description'])}\n"
        role_text += f"üîë –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: {len(enabled_permissions)}\n\n"
        
        if enabled_permissions:
            role_text += "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            for perm in enabled_permissions:
                description = await role_manager.get_permission_description(perm)
                role_text += f"   ‚Ä¢ {escape_markdown(description)}\n"
        
        keyboard = get_role_edit_keyboard(role_name)
        await callback_query.message.edit_text(role_text, reply_markup=keyboard)
        
    except Exception as e:
        print(f"[DEBUG] select_role_to_edit_callback: Exception: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_menu_back_keyboard()
        )


async def edit_role_options_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏"""
    data = callback_query.data
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π.", show_alert=True)
        return
    
    if data == "edit_permissions":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        await state.set_state(RoleManagementStates.editing_permissions)
        
        try:
            from main import get_role_manager_async as get_role_manager
            role_manager = await get_role_manager()
            
            state_data = await state.get_data()
            role_name = state_data.get("editing_role")
            
            if not role_name:
                await callback_query.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_main_menu_back_keyboard()
                )
                await state.clear()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–æ–ª–∏
            role_info = await role_manager.role_provider.get_role_info(role_name)
            if not role_info:
                await callback_query.message.edit_text(
                    f"‚ùå –†–æ–ª—å '{role_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=get_main_menu_back_keyboard()
                )
                await state.clear()
                return
            
            current_permissions = role_info["permissions"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏ —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            await state.update_data(
                editing_role=role_name,
                permissions=current_permissions
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            available_permissions = await role_manager.get_available_permissions()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            keyboard = get_permission_keyboard(available_permissions, current_permissions)
            
            await callback_query.message.edit_text(
                f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ä–æ–ª–∏ '{escape_markdown(role_name)}'\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_main_menu_back_keyboard()
            )
            await state.clear()
            
    elif data == "delete_role":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —É–¥–∞–ª–µ–Ω–∏—è
        try:
            await state.set_state(RoleManagementStates.confirming_delete)
            
            state_data = await state.get_data()
            role_name = state_data.get("editing_role")
            
            if not role_name:
                await callback_query.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_main_menu_back_keyboard()
                )
                await state.clear()
                return
            
            keyboard = get_confirm_keyboard(f"delete_role_{role_name}")
            
            await callback_query.message.edit_text(
                f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ '{escape_markdown(role_name)}'\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å?\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                reply_markup=keyboard
            )
        except Exception as e:
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_main_menu_back_keyboard()
            )
            await state.clear()
        
    elif data == "cancel_edit_role":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π
        await callback_query.message.edit_text(
            "üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_role_edit_list_keyboard()
        )
        await state.clear()


async def edit_permissions_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–æ–ª–∏"""
    data = callback_query.data
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π.", show_alert=True)
        return
    
    if data == "save_permissions":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        state_data = await state.get_data()
        role_name = state_data.get("editing_role")
        
        if not role_name:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_menu_back_keyboard()
            )
            await state.clear()
            return
        
        permissions = state_data.get("permissions", {})
        
        try:
            from main import get_role_manager_async as get_role_manager
            role_manager = await get_role_manager()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏
            role_info = await role_manager.role_provider.get_role_info(role_name)
            if not role_info:
                await callback_query.message.edit_text(
                    f"‚ùå –†–æ–ª—å '{role_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=get_main_menu_back_keyboard()
                )
                await state.clear()
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
            success = await role_manager.update_role(role_name, permissions, role_info["description"])
            
            if success:
                await callback_query.message.edit_text(
                    f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–æ–ª–∏ '{escape_markdown(role_name)}' –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üîë –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: {sum(permissions.values())}",
                    reply_markup=get_main_menu_back_keyboard()
                )
            else:
                await callback_query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ '{escape_markdown(role_name)}'.",
                    reply_markup=get_main_menu_back_keyboard()
                )
            
            await state.clear()
            
        except Exception as e:
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_main_menu_back_keyboard()
            )
            await state.clear()
            
    elif data == "back_to_permissions_edit":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–æ–ª–∏
        state_data = await state.get_data()
        role_name = state_data.get("editing_role", "")
        
        if role_name:
            await callback_query.message.edit_text(
                f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏: {role_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_role_edit_keyboard(role_name)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(editing_role=role_name)
        else:
            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π
            await callback_query.message.edit_text(
                "üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_role_edit_list_keyboard()
            )
            await state.clear()
            
    elif data == "back_to_previous_step":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–æ–ª–∏
        state_data = await state.get_data()
        role_name = state_data.get("editing_role", "")
        
        if role_name:
            await callback_query.message.edit_text(
                f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏: {role_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_role_edit_keyboard(role_name)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(editing_role=role_name)
        else:
            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π
            await callback_query.message.edit_text(
                "üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_role_edit_list_keyboard()
            )
            await state.clear()
        
    else:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        permission = data.replace("perm_", "")
        state_data = await state.get_data()
        permissions = state_data.get("permissions", {})
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        permissions[permission] = not permissions.get(permission, False)
        await state.update_data(permissions=permissions)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            from main import get_role_manager_async as get_role_manager
            role_manager = await get_role_manager()
            available_permissions = await role_manager.get_available_permissions()
            
            keyboard = get_permission_keyboard(available_permissions, permissions)
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
            
        except Exception as e:
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_main_menu_back_keyboard()
            )
            await state.clear()


async def delete_role_confirm_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏"""
    data = callback_query.data
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π.", show_alert=True)
        return
    
    if data.startswith("confirm_delete_role_"):
        role_name = data.replace("confirm_delete_role_", "")
        
        try:
            from main import get_role_manager_async as get_role_manager
            role_manager = await get_role_manager()
            
            success = await role_manager.delete_role(role_name)
            
            if success:
                await callback_query.message.edit_text(
                    f"‚úÖ –†–æ–ª—å '{escape_markdown(role_name)}' —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
                    reply_markup=get_main_menu_back_keyboard()
                )
            else:
                await callback_query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ '{escape_markdown(role_name)}'.",
                    reply_markup=get_main_menu_back_keyboard()
                )
            
            await state.clear()
            
        except Exception as e:
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_main_menu_back_keyboard()
            )
            await state.clear()
            
    elif data == "back_to_role_edit":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–æ–ª–∏
        state_data = await state.get_data()
        role_name = state_data.get("editing_role", "")
        
        if role_name:
            await callback_query.message.edit_text(
                f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏: {role_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_role_edit_keyboard(role_name)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(editing_role=role_name)
        else:
            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π
            await callback_query.message.edit_text(
                "üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_role_edit_list_keyboard()
            )
            await state.clear()


async def users_page_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    data = callback_query.data
    
    if data.startswith("users_page_"):
        try:
            page = int(data.replace("users_page_", ""))
            await list_users_callback(callback_query, page)
        except ValueError:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
                reply_markup=get_main_menu_back_keyboard()
            )
    elif data == "role_management":
        await callback_query.message.edit_text(
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_role_management_keyboard()
        )


async def list_roles_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–æ–ª–µ–π.", show_alert=True)
        return
    
    try:
        from main import get_role_manager_async as get_role_manager
        role_manager = await get_role_manager()
        
        if not role_manager:
            await callback_query.message.edit_text(
                "‚ùå –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_role_management_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏
        roles = await role_manager.get_all_roles()
        
        if not roles:
            await callback_query.message.edit_text(
                "üìã –†–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–æ–ª—å, –Ω–∞–∂–∞–≤ '–°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å'.",
                reply_markup=get_role_management_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
        roles_text = "üìã **–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π**\n\n"
        
        for i, role in enumerate(roles, 1):
            permissions_count = sum(1 for perm, enabled in role.permissions.items() if enabled)
            roles_text += f"{i}. **{escape_markdown(role.role_name)}**\n"
            roles_text += f"   üìù {escape_markdown(role.description)}\n"
            roles_text += f"   üîë –†–∞–∑—Ä–µ—à–µ–Ω–∏–π: {permissions_count}\n\n"
        
        await callback_query.message.edit_text(
            roles_text,
            reply_markup=get_role_management_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {str(e)}",
            reply_markup=get_main_menu_back_keyboard()
        )


async def list_users_callback(callback_query: types.CallbackQuery, page: int = 0):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not username:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.", show_alert=True)
        return
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
        return
    
    try:
        from main import get_role_manager_async as get_role_manager
        role_manager = await get_role_manager()
        
        if not role_manager:
            await callback_query.message.edit_text(
                "‚ùå –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_role_management_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await role_manager.get_all_users()
        
        if not users:
            await callback_query.message.edit_text(
                "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É.",
                reply_markup=get_role_management_keyboard()
            )
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        users_per_page = 10
        total_pages = (len(users) + users_per_page - 1) // users_per_page
        start_idx = page * users_per_page
        end_idx = min(start_idx + users_per_page, len(users))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        users_text = f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)})\n"
        users_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
        
        for i, user in enumerate(users[start_idx:end_idx], start_idx + 1):
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_whitelisted else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            role = user.role or "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
            username = user.telegram_username or "N/A"
            employee_status = getattr(user, 'employee_status', 'N/A') or 'N/A'
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º employee_name - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ–π, —Å–ª–æ–≤–∞—Ä–µ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
            employee_name = getattr(user, 'employee_name', 'N/A')
            if isinstance(employee_name, list) and len(employee_name) > 0:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                first_item = employee_name[0]
                if isinstance(first_item, dict):
                    if 'name' in first_item:
                        employee_name = first_item['name']
                    elif 'en_name' in first_item:
                        employee_name = first_item['en_name']
                    else:
                        employee_name = str(first_item)
                else:
                    employee_name = str(first_item)
            elif isinstance(employee_name, dict):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è
                if 'name' in employee_name:
                    employee_name = employee_name['name']
                elif 'en_name' in employee_name:
                    employee_name = employee_name['en_name']
                else:
                    employee_name = str(employee_name)
            elif not employee_name:
                employee_name = 'N/A'
            
            users_text += f"{i}. @{username}\n"
            users_text += f"   üë§ –ò–º—è: {employee_name}\n"
            users_text += f"   üè¢ –†–æ–ª—å: {role}\n"
            users_text += f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            users_text += f"   üíº –°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_status}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"users_page_{page - 1}"
            ))
        
        if page < total_pages - 1:
            nav_buttons.append(types.InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
                callback_data=f"users_page_{page + 1}"
            ))
        
        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="role_management")
        ])
        
        await callback_query.message.edit_text(
            users_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}",
            reply_markup=get_main_menu_back_keyboard()
        )


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    dp.message.register(cmd_role_management, Command("role_management"))
    dp.message.register(role_name_handler, RoleManagementStates.waiting_for_role_name)
    dp.message.register(role_description_handler, RoleManagementStates.waiting_for_role_description)
    
    dp.callback_query.register(create_role_callback, lambda c: c.data == "create_role" or c.data.startswith("create_role_"))
    dp.callback_query.register(list_roles_callback, lambda c: c.data == "list_roles")
    dp.callback_query.register(edit_role_callback, lambda c: c.data == "edit_role")
    dp.callback_query.register(list_users_callback, lambda c: c.data == "list_users")
    dp.callback_query.register(users_page_callback, lambda c: c.data.startswith("users_page_") or c.data == "role_management")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π (—Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_permissions)
    dp.callback_query.register(permission_callback, RoleManagementStates.waiting_for_permissions)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π
    dp.callback_query.register(select_role_to_edit_callback, lambda c: c.data.startswith("edit_role_") or c.data == "role_management")
    dp.callback_query.register(edit_role_options_callback, lambda c: c.data in ["edit_permissions", "delete_role", "cancel_edit_role"])
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (—Å–æ—Å—Ç–æ—è–Ω–∏–µ editing_permissions)
    dp.callback_query.register(edit_permissions_callback, RoleManagementStates.editing_permissions)
    
    dp.callback_query.register(delete_role_confirm_callback, lambda c: c.data.startswith("confirm_delete_role_") or c.data == "back_to_role_edit") 