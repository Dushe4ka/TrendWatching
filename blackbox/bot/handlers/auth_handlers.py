import os
import requests
import asyncio
import time
from aiogram import Dispatcher, types
from aiogram.fsm.context import FSMContext
from bot.states.states import AuthStates
from bot.keyboards.inline_keyboards import (
    get_auth_menu_keyboard,
    get_auth_service_menu_keyboard,
    get_main_menu_back_keyboard
)
from bot.utils.misc import has_admin_permissions

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AUTH_SERVICE_URL = os.getenv("AUTH_SERVICE_URL", "http://localhost:8000")
TELEGRAM_API_ID = os.getenv("API_ID", "27259576")
TELEGRAM_API_HASH = os.getenv("API_HASH", "f9662a5c2300c4d881b05fb63344ba93")

async def auth_menu_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    keyboard = get_auth_menu_keyboard()
    await callback_query.message.edit_text(
        "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def auth_service_menu_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    if not await has_admin_permissions(user_id, username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    keyboard = get_auth_service_menu_keyboard()
    await callback_query.message.edit_text(
        "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def add_new_account_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    await callback_query.message.edit_text(
        "üì± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "+7XXXXXXXXXX\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: +79091234567",
        reply_markup=get_main_menu_back_keyboard()
    )
    await state.set_state(AuthStates.waiting_for_phone)

async def process_phone_number(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not await has_admin_permissions(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        await state.clear()
        return
    
    phone_number = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
    if not phone_number.startswith('+') or len(phone_number) < 10:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: +79091234567"
        )
        return
    
    await state.update_data(phone_number=phone_number)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
        response = requests.post(
            f"{AUTH_SERVICE_URL}/auth/request_code",
            json={
                "phone_number": phone_number,
                "api_id": int(TELEGRAM_API_ID),
                "api_hash": TELEGRAM_API_HASH,
                "admin_chat_id": str(message.chat.id)
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            await message.answer(
                f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –≤ Telegram:"
            )
            await state.set_state(AuthStates.waiting_for_code)
        else:
            error_msg = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {error_msg}")
            await state.clear()
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}")
        await state.clear()

async def process_confirmation_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    if not await has_admin_permissions(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        await state.clear()
        return
    
    code = message.text.strip()
    data = await state.get_data()
    phone_number = data.get('phone_number')
    
    if not phone_number:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        response = requests.post(
            f"{AUTH_SERVICE_URL}/auth/confirm_code",
            json={
                "phone_number": phone_number,
                "code": code,
                "api_id": int(TELEGRAM_API_ID),
                "api_hash": TELEGRAM_API_HASH,
                "admin_chat_id": str(message.chat.id)
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            status = result.get('status')
            
            if status == 'confirmed':
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
                try:
                    distribute_response = requests.post(f"{AUTH_SERVICE_URL}/auth/redistribute_all_channels", timeout=30)
                    if distribute_response.status_code == 200:
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                        task_id = distribute_response.json().get('task_id')
                        if task_id:
                            # –ñ–¥–µ–º –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                            for _ in range(12):  # 12 * 5 —Å–µ–∫—É–Ω–¥ = 60 —Å–µ–∫—É–Ω–¥
                                time.sleep(5)
                                try:
                                    task_status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/task_status/{task_id}", timeout=10)
                                    if task_status_response.status_code == 200:
                                        task_result = task_status_response.json()
                                        if task_result.get('status') == 'SUCCESS':
                                            break
                                except:
                                    pass
                        
                        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                        status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/status", timeout=30)
                        if status_response.status_code == 200:
                            status_result = status_response.json()
                            total_accounts = status_result.get('total_accounts', 0)
                            total_channels = status_result.get('total_channels', 0)
                            available_slots = status_result.get('available_slots', 0)
                            
                            status_text = (
                                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!\n\n"
                                f"üîÑ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–æ–≤\n\n"
                                f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n"
                                f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n"
                                f"üì∫ Telegram –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n"
                                f"üÜì –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {available_slots}\n\n"
                                f"–°–µ—Å—Å–∏–∏:\n"
                            )
                            
                            sessions = status_result.get('sessions', [])
                            for i, session in enumerate(sessions, 1):
                                phone = session.get('phone_number', 'Unknown')
                                channels_count = len(session.get('channels', []))
                                status_text += f"{i}. {phone}: {channels_count} –∫–∞–Ω–∞–ª–æ–≤\n"
                            
                            await message.answer(
                                status_text,
                                reply_markup=get_auth_menu_keyboard()
                            )
                        else:
                            await message.answer(
                                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!\n\n"
                                "üîÑ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–æ–≤\n\n"
                                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.",
                                reply_markup=get_auth_menu_keyboard()
                            )
                    else:
                        await message.answer(
                            f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!\n\n"
                            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–æ–≤.",
                            reply_markup=get_auth_menu_keyboard()
                        )
                except Exception as e:
                    await message.answer(
                        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!\n\n"
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ Telegram –∫–∞–Ω–∞–ª–æ–≤: {str(e)}",
                        reply_markup=get_auth_menu_keyboard()
                    )
                
                await state.clear()
            elif status == 'awaiting_password':
                await message.answer(
                    f"üîê –î–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone_number} —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:"
                )
                await state.set_state(AuthStates.waiting_for_password)
            elif status == 'restart_auth':
                await message.answer(
                    f"üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {phone_number}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_auth_menu_keyboard()
                )
                await state.clear()
            elif status == 'invalid_code':
                await message.answer(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è {phone_number}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=get_auth_menu_keyboard()
                )
                await state.clear()
            else:
                error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞: {error_msg}",
                    reply_markup=get_auth_menu_keyboard()
                )
                await state.clear()
        else:
            error_msg = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞: {error_msg}",
                reply_markup=get_auth_menu_keyboard()
            )
            await state.clear()
            
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞: {str(e)}",
            reply_markup=get_auth_menu_keyboard()
        )
        await state.clear()

async def process_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è 2FA"""
    if not await has_admin_permissions(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        await state.clear()
        return
    
    password = message.text.strip()
    data = await state.get_data()
    phone_number = data.get('phone_number')
    
    if not phone_number:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        response = requests.post(
            f"{AUTH_SERVICE_URL}/auth/confirm_password",
            json={
                "phone_number": phone_number,
                "password": password,
                "api_id": int(TELEGRAM_API_ID),
                "api_hash": TELEGRAM_API_HASH,
                "admin_chat_id": str(message.chat.id)
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            status = result.get('status')
            
            if status == 'confirmed':
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
                try:
                    distribute_response = requests.post(f"{AUTH_SERVICE_URL}/auth/redistribute_all_channels", timeout=30)
                    if distribute_response.status_code == 200:
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                        task_id = distribute_response.json().get('task_id')
                        if task_id:
                            # –ñ–¥–µ–º –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                            for _ in range(12):  # 12 * 5 —Å–µ–∫—É–Ω–¥ = 60 —Å–µ–∫—É–Ω–¥
                                time.sleep(5)
                                try:
                                    task_status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/task_status/{task_id}", timeout=10)
                                    if task_status_response.status_code == 200:
                                        task_result = task_status_response.json()
                                        if task_result.get('status') == 'SUCCESS':
                                            break
                                except:
                                    pass
                        
                        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                        status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/status", timeout=30)
                        if status_response.status_code == 200:
                            status_result = status_response.json()
                            total_accounts = status_result.get('total_accounts', 0)
                            total_channels = status_result.get('total_channels', 0)
                            available_slots = status_result.get('available_slots', 0)
                            
                            status_text = (
                                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å 2FA!\n\n"
                                f"üîÑ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–æ–≤\n\n"
                                f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n"
                                f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n"
                                f"üì∫ Telegram –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n"
                                f"üÜì –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {available_slots}\n\n"
                                f"–°–µ—Å—Å–∏–∏:\n"
                            )
                            
                            sessions = status_result.get('sessions', [])
                            for i, session in enumerate(sessions, 1):
                                phone = session.get('phone_number', 'Unknown')
                                channels_count = len(session.get('channels', []))
                                status_text += f"{i}. {phone}: {channels_count} –∫–∞–Ω–∞–ª–æ–≤\n"
                            
                            await message.answer(
                                status_text,
                                reply_markup=get_auth_menu_keyboard()
                            )
                        else:
                            await message.answer(
                                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å 2FA!\n\n"
                                "üîÑ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–æ–≤\n\n"
                                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.",
                                reply_markup=get_auth_menu_keyboard()
                            )
                    else:
                        await message.answer(
                            f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å 2FA!\n\n"
                            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–æ–≤.",
                            reply_markup=get_auth_menu_keyboard()
                        )
                except Exception as e:
                    await message.answer(
                        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å 2FA!\n\n"
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ Telegram –∫–∞–Ω–∞–ª–æ–≤: {str(e)}",
                        reply_markup=get_auth_menu_keyboard()
                    )
                
                await state.clear()
            else:
                error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {error_msg}",
                    reply_markup=get_auth_menu_keyboard()
                )
                await state.clear()
        else:
            error_msg = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {error_msg}",
                reply_markup=get_auth_menu_keyboard()
            )
            await state.clear()
            
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {str(e)}",
            reply_markup=get_auth_menu_keyboard()
        )
        await state.clear()

async def check_auth_status_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    try:
        response = requests.get(f"{AUTH_SERVICE_URL}/auth/status", timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            total_accounts = result.get('total_accounts', 0)
            total_channels = result.get('total_channels', 0)
            available_slots = result.get('available_slots', 0)
            
            status_text = (
                f"üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
                f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n"
                f"üì∫ Telegram –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n"
                f"üÜì –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {available_slots}\n\n"
                f"–°–µ—Å—Å–∏–∏:\n"
            )
            
            sessions = result.get('sessions', [])
            for i, session in enumerate(sessions, 1):
                phone = session.get('phone_number', 'Unknown')
                channels_count = len(session.get('channels', []))
                status_text += f"{i}. {phone}: {channels_count} –∫–∞–Ω–∞–ª–æ–≤\n"
            
            try:
                await callback_query.message.edit_text(
                    status_text,
                    reply_markup=get_auth_menu_keyboard()
                )
            except Exception as edit_error:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await callback_query.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                reply_markup=get_auth_menu_keyboard()
            )
            
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}",
            reply_markup=get_auth_menu_keyboard()
        )

async def distribute_channels_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
        await callback_query.message.edit_text(
            "üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤...",
            reply_markup=get_auth_service_menu_keyboard()
        )
        
        response = requests.post(f"{AUTH_SERVICE_URL}/auth/distribute_channels_from_db", timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            task_id = result.get('task_id')
            
            if task_id:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                for _ in range(12):  # 12 * 5 —Å–µ–∫—É–Ω–¥ = 60 —Å–µ–∫—É–Ω–¥
                    time.sleep(5)
                    try:
                        task_status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/task_status/{task_id}", timeout=10)
                        if task_status_response.status_code == 200:
                            task_result = task_status_response.json()
                            if task_result.get('status') == 'SUCCESS':
                                break
                    except:
                        pass
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/status", timeout=30)
            if status_response.status_code == 200:
                status_result = status_response.json()
                total_accounts = status_result.get('total_accounts', 0)
                total_channels = status_result.get('total_channels', 0)
                available_slots = status_result.get('available_slots', 0)
                
                status_text = (
                    f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                    f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n"
                    f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n"
                    f"üì∫ Telegram –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n"
                    f"üÜì –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {available_slots}\n\n"
                    f"–°–µ—Å—Å–∏–∏:\n"
                )
                
                sessions = status_result.get('sessions', [])
                for i, session in enumerate(sessions, 1):
                    phone = session.get('phone_number', 'Unknown')
                    channels_count = len(session.get('channels', []))
                    status_text += f"{i}. {phone}: {channels_count} –∫–∞–Ω–∞–ª–æ–≤\n"
                
                await callback_query.message.edit_text(
                    status_text,
                    reply_markup=get_auth_service_menu_keyboard()
                )
            else:
                await callback_query.message.edit_text(
                    "‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.",
                    reply_markup=get_auth_service_menu_keyboard()
                )
        else:
            error_msg = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {error_msg}",
                reply_markup=get_auth_service_menu_keyboard()
            )
            
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}",
            reply_markup=get_auth_service_menu_keyboard()
        )

async def clean_duplicates_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
        await callback_query.message.edit_text(
            "üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...",
            reply_markup=get_auth_service_menu_keyboard()
        )
        
        response = requests.post(f"{AUTH_SERVICE_URL}/auth/clean_duplicate_channels", timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            task_id = result.get('task_id')
            
            if task_id:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏
                for _ in range(12):  # 12 * 5 —Å–µ–∫—É–Ω–¥ = 60 —Å–µ–∫—É–Ω–¥
                    time.sleep(5)
                    try:
                        task_status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/task_status/{task_id}", timeout=10)
                        if task_status_response.status_code == 200:
                            task_result = task_status_response.json()
                            if task_result.get('status') == 'SUCCESS':
                                break
                    except:
                        pass
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏
            if task_id:
                try:
                    task_status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/task_status/{task_id}", timeout=10)
                    if task_status_response.status_code == 200:
                        task_result = task_status_response.json()
                        if task_result.get('result'):
                            result_data = task_result.get('result', {})
                            removed_count = result_data.get('removed_count', 0)
                            total_duplicates = result_data.get('total_duplicates', 0)
                            
                            status_text = (
                                f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:\n"
                                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {removed_count}\n"
                                f"üìã –í—Å–µ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_duplicates}\n\n"
                            )
                            
                            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                            status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/status", timeout=30)
                            if status_response.status_code == 200:
                                status_result = status_response.json()
                                total_accounts = status_result.get('total_accounts', 0)
                                total_channels = status_result.get('total_channels', 0)
                                
                                status_text += (
                                    f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n"
                                    f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n"
                                    f"üì∫ Telegram –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n\n"
                                    f"–°–µ—Å—Å–∏–∏:\n"
                                )
                                
                                sessions = status_result.get('sessions', [])
                                for i, session in enumerate(sessions, 1):
                                    phone = session.get('phone_number', 'Unknown')
                                    channels_count = len(session.get('channels', []))
                                    status_text += f"{i}. {phone}: {channels_count} –∫–∞–Ω–∞–ª–æ–≤\n"
                                
                                await callback_query.message.edit_text(
                                    status_text,
                                    reply_markup=get_auth_service_menu_keyboard()
                                )
                            else:
                                await callback_query.message.edit_text(
                                    status_text + "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å.",
                                    reply_markup=get_auth_service_menu_keyboard()
                                )
                        else:
                            await callback_query.message.edit_text(
                                "‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.",
                                reply_markup=get_auth_service_menu_keyboard()
                            )
                    else:
                        await callback_query.message.edit_text(
                            "‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.",
                            reply_markup=get_auth_service_menu_keyboard()
                        )
                except:
                    await callback_query.message.edit_text(
                        "‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.",
                        reply_markup=get_auth_service_menu_keyboard()
                    )
            else:
                await callback_query.message.edit_text(
                    "‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                    reply_markup=get_auth_service_menu_keyboard()
                )
        else:
            error_msg = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {error_msg}",
                reply_markup=get_auth_service_menu_keyboard()
            )
            
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {str(e)}",
            reply_markup=get_auth_service_menu_keyboard()
        )

async def clear_all_channels_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
        await callback_query.message.edit_text(
            "üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...",
            reply_markup=get_auth_service_menu_keyboard()
        )
        
        response = requests.post(f"{AUTH_SERVICE_URL}/auth/clear_all_channels", timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            task_id = result.get('task_id')
            
            if task_id:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏
                for _ in range(12):  # 12 * 5 —Å–µ–∫—É–Ω–¥ = 60 —Å–µ–∫—É–Ω–¥
                    time.sleep(5)
                    try:
                        task_status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/task_status/{task_id}", timeout=10)
                        if task_status_response.status_code == 200:
                            task_result = task_status_response.json()
                            if task_result.get('status') == 'SUCCESS':
                                break
                    except:
                        pass
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/status", timeout=30)
            if status_response.status_code == 200:
                status_result = status_response.json()
                total_accounts = status_result.get('total_accounts', 0)
                total_channels = status_result.get('total_channels', 0)
                available_slots = status_result.get('available_slots', 0)
                
                status_text = (
                    f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:\n"
                    f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n"
                    f"üì∫ Telegram –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n"
                    f"üÜì –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {available_slots}\n\n"
                    f"–°–µ—Å—Å–∏–∏:\n"
                )
                
                sessions = status_result.get('sessions', [])
                for i, session in enumerate(sessions, 1):
                    phone = session.get('phone_number', 'Unknown')
                    channels_count = len(session.get('channels', []))
                    status_text += f"{i}. {phone}: {channels_count} –∫–∞–Ω–∞–ª–æ–≤\n"
                
                await callback_query.message.edit_text(
                    status_text,
                    reply_markup=get_auth_service_menu_keyboard()
                )
            else:
                await callback_query.message.edit_text(
                    "‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å.",
                    reply_markup=get_auth_service_menu_keyboard()
                )
        else:
            error_msg = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await callback_query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {error_msg}",
                reply_markup=get_auth_service_menu_keyboard()
            )
            
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}",
            reply_markup=get_auth_service_menu_keyboard()
        )

async def delete_account_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    await callback_query.message.edit_text(
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "+7XXXXXXXXXX\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: +79091234567\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç —Å–µ—Å—Å–∏—é –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –¥–∞–Ω–Ω—ã–µ!",
        reply_markup=get_main_menu_back_keyboard()
    )
    await state.set_state(AuthStates.waiting_for_delete_phone)

async def process_delete_phone_number(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not await has_admin_permissions(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        await state.clear()
        return

    phone_number = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
    if not phone_number.startswith('+') or len(phone_number) < 10:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: +79091234567"
        )
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        response = requests.delete(
            f"{AUTH_SERVICE_URL}/auth/delete_session",
            json={
                "phone_number": phone_number,
                "admin_chat_id": str(message.chat.id)
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            task_id = result.get('task_id')
            if task_id:
                # –ñ–¥–µ–º –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                for _ in range(12):  # 12 * 5 —Å–µ–∫—É–Ω–¥ = 60 —Å–µ–∫—É–Ω–¥
                    time.sleep(5)
                    try:
                        task_status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/task_status/{task_id}", timeout=10)
                        if task_status_response.status_code == 200:
                            task_result = task_status_response.json()
                            if task_result.get('status') == 'SUCCESS':
                                break
                    except:
                        pass
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            try:
                status_response = requests.get(f"{AUTH_SERVICE_URL}/auth/status", timeout=30)
                if status_response.status_code == 200:
                    status_result = status_response.json()
                    total_accounts = status_result.get('total_accounts', 0)
                    total_channels = status_result.get('total_channels', 0)
                    available_slots = status_result.get('available_slots', 0)
                    
                    if total_accounts > 0:
                        status_text = (
                            f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
                            f"üîÑ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–æ–≤\n\n"
                            f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:\n"
                            f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n"
                            f"üì∫ Telegram –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n"
                            f"üÜì –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {available_slots}\n\n"
                            f"–°–µ—Å—Å–∏–∏:\n"
                        )
                        
                        sessions = status_result.get('sessions', [])
                        for i, session in enumerate(sessions, 1):
                            phone = session.get('phone_number', 'Unknown')
                            channels_count = len(session.get('channels', []))
                            status_text += f"{i}. {phone}: {channels_count} –∫–∞–Ω–∞–ª–æ–≤\n"
                        
                        await message.answer(
                            status_text,
                            reply_markup=get_auth_menu_keyboard()
                        )
                    else:
                        await message.answer(
                            f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
                            "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤.\n"
                            "–ü—Ä–∏–≤—è–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã.\n"
                            "–ö–∞–Ω–∞–ª—ã –±—É–¥—É—Ç –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.",
                            reply_markup=get_auth_menu_keyboard()
                        )
                else:
                    await message.answer(
                        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
                        "üîÑ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–æ–≤\n\n"
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.",
                        reply_markup=get_auth_menu_keyboard()
                    )
            except Exception as e:
                await message.answer(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
                    f"üîÑ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Telegram –∫–∞–Ω–∞–ª–æ–≤\n\n"
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}",
                    reply_markup=get_auth_menu_keyboard()
                )
        else:
            error_msg = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {error_msg}",
                reply_markup=get_auth_menu_keyboard()
            )
    except requests.exceptions.RequestException as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}",
            reply_markup=get_auth_menu_keyboard()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_auth_menu_keyboard()
        )
    
    await state.clear()

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    # –ú–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    dp.callback_query.register(auth_menu_callback, lambda c: c.data == "auth_menu")
    dp.callback_query.register(auth_service_menu_callback, lambda c: c.data == "auth_service_menu")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    dp.callback_query.register(add_new_account_callback, lambda c: c.data == "add_new_account")
    dp.message.register(process_phone_number, AuthStates.waiting_for_phone)
    dp.message.register(process_confirmation_code, AuthStates.waiting_for_code)
    dp.message.register(process_password, AuthStates.waiting_for_password)
    dp.callback_query.register(delete_account_callback, lambda c: c.data == "delete_account")
    dp.message.register(process_delete_phone_number, AuthStates.waiting_for_delete_phone)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    dp.callback_query.register(check_auth_status_callback, lambda c: c.data == "check_auth_status")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    dp.callback_query.register(distribute_channels_callback, lambda c: c.data == "distribute_channels")
    dp.callback_query.register(clean_duplicates_callback, lambda c: c.data == "clean_duplicates")
    dp.callback_query.register(clear_all_channels_callback, lambda c: c.data == "clear_all_channels") 