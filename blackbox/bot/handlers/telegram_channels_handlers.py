from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from bot.states.states import TelegramChannelStates
from bot.utils.misc import has_admin_permissions, check_permission
from bot.utils.callback_utils import parse_short_callback
from bot.keyboards.inline_keyboards import (
    get_telegram_channels_menu_keyboard,
    get_telegram_channels_list_keyboard,
    get_telegram_channel_info_keyboard,
    get_digest_category_keyboard,
    get_digest_time_input_keyboard,
    get_digest_success_keyboard,
    get_digest_error_keyboard,
    get_digest_list_keyboard,
    get_digest_info_keyboard,
    get_confirm_delete_digest_keyboard
)
from telegram_channels_service import telegram_channels_service
from database import get_categories
from bot.utils.misc import category_to_callback
from logger_config import setup_logger
import re
from bot.apscheduler_digest import add_digest_job, remove_digest_job, update_digest_job, get_digest_jobs, init_digest_jobs_from_db, start_scheduler

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logger("telegram_channels_handlers")

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö callback –¥–∞–Ω–Ω—ã—Ö
async def debug_callback_handler(callback_query: types.CallbackQuery):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ callback –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω callback: {callback_query.data}")
    print(f"üîç DEBUG: –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback_query.from_user.id}")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback_query.answer(f"DEBUG: {callback_query.data}")

# –£–±—Ä–∞–ª –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä - –æ–Ω —Ç–µ–ø–µ—Ä—å –≤ admin_handlers.py

async def telegram_channels_list_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    print(f"üîç DEBUG: telegram_channels_list_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        channels = telegram_channels_service.get_all_channels()
        
        print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels) if channels else 0}")
        
        if not channels:
            text = (
                "üì¢ <b>Telegram –∫–∞–Ω–∞–ª—ã</b>\n\n"
                "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"
            )
            
            print(f"üîç DEBUG: –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:100]}...")
            
            await callback_query.message.edit_text(
                text,
                reply_markup=get_telegram_channels_menu_keyboard(),
                parse_mode="HTML"
            )
            
            print(f"üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        channels_data = []
        for channel in channels:
            channels_data.append({
                "id": channel.id,
                "title": channel.title,
                "username": channel.username
            })
        
        text = (
            f"üì¢ <b>Telegram –∫–∞–Ω–∞–ª—ã</b> ({len(channels)})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏:"
        )
        
        print(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {text[:100]}...")
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_telegram_channels_list_keyboard(channels_data),
            parse_mode="HTML"
        )
        
        print(f"üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ telegram_channels_list_callback: {str(e)}")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}",
            reply_markup=get_telegram_channels_menu_keyboard()
        )

async def telegram_channel_info_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ"""
    print(f"üîç DEBUG: telegram_channel_info_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, data = parse_short_callback(callback_query.data)
        print(f"üîç DEBUG: action = {action}, data = {data}")
        
        # –ü–æ–ª—É—á–∞–µ–º channel_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
        channel_id = data.get('channel_id') if data else None
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if action == "add_digest":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            await add_digest_callback(callback_query)
            return
        elif action == "edit_digests":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
            await edit_digests_callback(callback_query)
            return
        elif action == "digest_cat":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            await handle_digest_category_selection(callback_query)
            return
        elif action == "digest_info":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ
            await digest_info_callback(callback_query)
            return
        elif action == "edit_digest_time":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            await edit_digest_time_callback(callback_query, None)  # state –±—É–¥–µ—Ç None
            return
        elif action == "edit_digest_category":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            await edit_digest_category_callback(callback_query, None)  # state –±—É–¥–µ—Ç None
            return
        elif action == "edit_digest_category_select":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            await edit_digest_category_select_callback(callback_query)
            return
        elif action == "delete_digest":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            await delete_digest_callback(callback_query)
            return
        elif action == "confirm_delete_digest":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            await confirm_delete_digest_callback(callback_query)
            return
        elif action == "test_digest":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            await test_digest_callback(callback_query)
            return
        elif action == "schedule_digests_now":
            await schedule_digests_now_callback(callback_query)
            return
        
        elif action == "initialize_schedule":
            await initialize_schedule_callback(callback_query)
            return
            
        elif action == "check_schedule":
            await check_schedule_callback(callback_query)
            return
            
        elif action == "back_to_channels":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤
            await telegram_channels_list_callback(callback_query)
            return
            
        elif action == "channel_info":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            if action == "channel_info" and channel_id:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                channel_info = telegram_channels_service.get_channel_by_id(channel_id)
                if not channel_info:
                    await callback_query.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
                text = (
                    f"üì¢ <b>–ö–∞–Ω–∞–ª: {channel_info.channel.title}</b>\n\n"
                )
                if channel_info.channel.username:
                    text += f"Username: @{channel_info.channel.username}\n"
                text += f"ID: <code>{channel_info.channel.id}</code>\n"
                text += f"–¢–∏–ø: {channel_info.channel.type}\n"
                text += f"–î–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(channel_info.digests)}\n\n"
                if channel_info.digests:
                    text += "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã:</b>\n"
                    for digest in channel_info.digests:
                        status = "‚úÖ" if digest.is_active else "‚è∏Ô∏è"
                        text += f"{status} {digest.category} - {digest.time}\n"
                else:
                    text += "–î–∞–π–¥–∂–µ—Å—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
                await callback_query.message.edit_text(
                    text,
                    reply_markup=get_telegram_channel_info_keyboard(channel_id),
                    parse_mode="HTML"
                )
                return
        
        else:
            await callback_query.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}", show_alert=True)
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        # if action == "channel_info" and channel_id: # This line is removed as per the edit hint
        #     # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        #     channel_info = telegram_channels_service.get_channel_by_id(channel_id)
        #     if not channel_info:
        #         await callback_query.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        #         return
        #     # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
        #     text = (
        #         f"üì¢ <b>–ö–∞–Ω–∞–ª: {channel_info.channel.title}</b>\n\n"
        #     )
        #     if channel_info.channel.username:
        #         text += f"Username: @{channel_info.channel.username}\n"
        #     text += f"ID: <code>{channel_info.channel.id}</code>\n"
        #     text += f"–¢–∏–ø: {channel_info.channel.type}\n"
        #     text += f"–î–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(channel_info.digests)}\n\n"
        #     if channel_info.digests:
        #         text += "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã:</b>\n"
        #         for digest in channel_info.digests:
        #             status = "‚úÖ" if digest.is_active else "‚è∏Ô∏è"
        #             text += f"{status} {digest.category} - {digest.time}\n"
        #     else:
        #         text += "–î–∞–π–¥–∂–µ—Å—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
        #     await callback_query.message.edit_text(
        #         text,
        #         reply_markup=get_telegram_channel_info_keyboard(channel_id),
        #         parse_mode="HTML"
        #     )
        #     return
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ telegram_channel_info_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ user_id
temp_digest_data = {}
print(f"üîç DEBUG: temp_digest_data –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {temp_digest_data}")

async def handle_digest_category_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ (–±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è)"""
    print(f"üîç DEBUG: handle_digest_category_selection –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, data = parse_short_callback(callback_query.data)
        channel_id = data['channel_id']
        category = data['category']
        
        print(f"üîç DEBUG: action = {action}, channel_id = {channel_id}, category = {category}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        channel_info = telegram_channels_service.get_channel_by_id(channel_id)
        channel_title = channel_info.channel.title if channel_info else str(channel_id)
        
        text = (
            f"üì∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
            f"–ö–∞–Ω–∞–ª: {channel_title}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30, 9:05, 23:45\n\n"
            "‚è∞ –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
        )
        
        print(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {text[:100]}...")
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_digest_time_input_keyboard(channel_id, category),
            parse_mode="HTML"
        )
        
        print(f"üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è
        await callback_query.answer(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} –≤—ã–±—Ä–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
            show_alert=False
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ user_id
        user_id = callback_query.from_user.id
        temp_digest_data[user_id] = {
            'channel_id': channel_id,
            'category': category,
            'type': 'create'
        }
        
        print(f"üîç DEBUG: temp_digest_data[{user_id}] —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {temp_digest_data[user_id]}")
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ handle_digest_category_selection: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def add_digest_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: add_digest_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, data = parse_short_callback(callback_query.data)
        channel_id = data['channel_id']
        
        print(f"üîç DEBUG: action = {action}, channel_id = {channel_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = get_categories()
        
        print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}")
        
        if not categories:
            await callback_query.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        channel_info = telegram_channels_service.get_channel_by_id(channel_id)
        channel_title = channel_info.channel.title if channel_info else str(channel_id)
        
        text = (
            f"üì∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
            f"–ö–∞–Ω–∞–ª: {channel_title}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞:"
        )
        
        print(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {text[:100]}...")
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_digest_category_keyboard(categories, channel_id),
            parse_mode="HTML"
        )
        
        print(f"üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ add_digest_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def digest_category_selected_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        print(f"üîç DEBUG: callback_data = {callback_query.data}")
        
        action, data = parse_short_callback(callback_query.data)
        channel_id = data['channel_id']
        category = data['category']
        
        print(f"üîç DEBUG: action = {action}, channel_id = {channel_id}, category = {category}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(channel_id=channel_id, category=category)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        channel_info = telegram_channels_service.get_channel_by_id(channel_id)
        channel_title = channel_info.channel.title if channel_info else str(channel_id)
        
        text = (
            f"üì∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
            f"–ö–∞–Ω–∞–ª: {channel_title}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30, 9:05, 23:45\n\n"
            "‚è∞ –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
        )
        
        print(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {text[:100]}...")
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_digest_time_input_keyboard(channel_id, category),
            parse_mode="HTML"
        )
        
        print(f"üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        await state.set_state(TelegramChannelStates.waiting_for_digest_time)
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ digest_category_selected_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def process_digest_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    if not await has_admin_permissions(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        time_input = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_pattern = re.compile(r'^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$')
        if not time_pattern.match(time_input):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>–ß–ß:–ú–ú</b>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30, 9:05, 23:45\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        channel_id = data.get("channel_id")
        category = data.get("category")
        
        if not channel_id or not category:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        channel_info = telegram_channels_service.get_channel_by_id(channel_id)
        channel_title = channel_info.channel.title if channel_info else str(channel_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –∫ –∫–∞–Ω–∞–ª—É
        success = telegram_channels_service.add_digest_to_channel(channel_id, category, time_input)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º id —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            channel_info = telegram_channels_service.get_channel_by_id(channel_id)
            digest = None
            if channel_info and channel_info.digests:
                for d in channel_info.digests:
                    if d.category == category and d.time == time_input:
                        digest = d
                        break
            if digest:
                await add_digest_job(channel_id, digest.id, category, time_input)
            text = (
                f"‚úÖ <b>–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {channel_title}\n"
                f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time_input}\n\n"
                f"–î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {time_input}"
            )
            
            await message.answer(
                text,
                reply_markup=get_digest_success_keyboard(channel_id),
                parse_mode="HTML"
            )
        else:
            text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_title}.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            await message.answer(
                text,
                reply_markup=get_digest_error_keyboard(channel_id),
                parse_mode="HTML"
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

async def process_digest_time_no_state(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
    if not await has_admin_permissions(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        time_input = message.text.strip()
        user_id = message.from_user.id
        
        print(f"üîç DEBUG: process_digest_time_no_state –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {time_input}")
        print(f"üîç DEBUG: user_id = {user_id}")
        print(f"üîç DEBUG: temp_digest_data[{user_id}] = {temp_digest_data.get(user_id)}")
        print(f"üîç DEBUG: –í–µ—Å—å —Å–ª–æ–≤–∞—Ä—å temp_digest_data: {temp_digest_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_pattern = re.compile(r'^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$')
        if not time_pattern.match(time_input):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>–ß–ß:–ú–ú</b>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30, 9:05, 23:45\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        user_data = temp_digest_data.get(user_id)
        print(f"üîç DEBUG: user_data = {user_data}")
        
        if not user_data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        action_type = user_data.get('type') or user_data.get('edit_type')
        print(f"üîç DEBUG: action_type = {action_type}")
        
        if action_type == 'create':
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            channel_id = user_data.get("channel_id")
            category = user_data.get("category")
            
            print(f"üîç DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ - channel_id = {channel_id}, category = {category}")
        
            if not channel_id or not category:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                if user_id in temp_digest_data:
                    del temp_digest_data[user_id]
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
            channel_info = telegram_channels_service.get_channel_by_id(channel_id)
            channel_title = channel_info.channel.title if channel_info else str(channel_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –∫ –∫–∞–Ω–∞–ª—É
            success = telegram_channels_service.add_digest_to_channel(channel_id, category, time_input)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º id —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
                channel_info = telegram_channels_service.get_channel_by_id(channel_id)
                digest = None
                if channel_info and channel_info.digests:
                    for d in channel_info.digests:
                        if d.category == category and d.time == time_input:
                            digest = d
                            break
                if digest:
                    await add_digest_job(channel_id, digest.id, category, time_input)
                text = (
                    f"‚úÖ <b>–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                    f"üì¢ –ö–∞–Ω–∞–ª: {channel_title}\n"
                    f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {time_input}\n\n"
                    f"–î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {time_input}"
                )
                
                await message.answer(
                    text,
                    reply_markup=get_digest_success_keyboard(channel_id),
                    parse_mode="HTML"
                )
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                if user_id in temp_digest_data:
                    del temp_digest_data[user_id]
                return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            else:
                text = (
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_title}.\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                
                await message.answer(
                    text,
                    reply_markup=get_digest_error_keyboard(channel_id),
                    parse_mode="HTML"
                )
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                if user_id in temp_digest_data:
                    del temp_digest_data[user_id]
                return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                
        elif action_type == 'time':
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            channel_id = user_data.get("channel_id")
            digest_id = user_data.get("digest_id")
            
            print(f"üîç DEBUG: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ - channel_id = {channel_id}, digest_id = {digest_id}")
            
            if not channel_id or not digest_id:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                if user_id in temp_digest_data:
                    del temp_digest_data[user_id]
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
            success = telegram_channels_service.update_digest(channel_id, digest_id, {"time": time_input})
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                channel_info = telegram_channels_service.get_channel_by_id(channel_id)
                digest = None
                if channel_info and channel_info.digests:
                    for d in channel_info.digests:
                        if d.id == digest_id:
                            digest = d
                            break
                if digest:
                    await update_digest_job(channel_id, digest_id, digest.category, time_input)
                await message.answer(
                    f"‚úÖ –í—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time_input}!",
                    reply_markup=get_digest_success_keyboard(channel_id)
                )
            else:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞",
                    reply_markup=get_digest_error_keyboard(channel_id)
                )
        
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è '{action_type}'")
            return
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in temp_digest_data:
            del temp_digest_data[user_id]
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ process_digest_time_no_state: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        user_id = message.from_user.id
        if user_id in temp_digest_data:
            del temp_digest_data[user_id]

async def edit_digests_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    print(f"üîç DEBUG: edit_digests_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, data = parse_short_callback(callback_query.data)
        channel_id = data['channel_id']
        
        print(f"üîç DEBUG: action = {action}, channel_id = {channel_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —Å –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏
        channel_info = telegram_channels_service.get_channel_by_id(channel_id)
        
        if not channel_info:
            await callback_query.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(channel_info.digests) if channel_info.digests else 0}")
        
        if not channel_info.digests:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
            print(f"üîç DEBUG: –ù–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ")
            
            text = (
                f"üì∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤</b>\n\n"
                f"–ö–∞–Ω–∞–ª: {channel_info.channel.title}\n\n"
                "–î–∞–π–¥–∂–µ—Å—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç'."
            )
            
            await callback_query.message.edit_text(
                text,
                reply_markup=get_telegram_channel_info_keyboard(channel_id),
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        digests_data = []
        for digest in channel_info.digests:
            digests_data.append({
                "id": digest.id,
                "category": digest.category,
                "time": digest.time,
                "is_active": digest.is_active
            })
        
        text = (
            f"üì∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤</b>\n\n"
            f"–ö–∞–Ω–∞–ª: {channel_info.channel.title}\n"
            f"–í—Å–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(channel_info.digests)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
        
        print(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {text[:100]}...")
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_digest_list_keyboard(channel_id, digests_data),
            parse_mode="HTML"
        )
        
        print(f"üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ edit_digests_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def digest_info_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–∞–π–¥–∂–µ—Å—Ç–µ"""
    print(f"üîç DEBUG: digest_info_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, data = parse_short_callback(callback_query.data)
        channel_id = data['channel_id']
        digest_id = data['digest_id']
        
        print(f"üîç DEBUG: action = {action}, channel_id = {channel_id}, digest_id = {digest_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = telegram_channels_service.get_channel_by_id(channel_id)
        
        if not channel_info:
            await callback_query.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        digest = None
        for d in channel_info.digests:
            if d.id == digest_id:
                digest = d
                break
        
        if not digest:
            await callback_query.answer("‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        text = (
            f"üì∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {channel_info.channel.title}\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {digest.category}\n"
            f"‚è∞ –í—Ä–µ–º—è: {digest.time}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if digest.is_active else '‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {digest.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {digest.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        print(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {text[:100]}...")
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_digest_info_keyboard(channel_id, digest_id),
            parse_mode="HTML"
        )
        
        print(f"üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ digest_info_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def edit_digest_time_callback(callback_query: types.CallbackQuery, state: FSMContext = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: edit_digest_time_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, data = parse_short_callback(callback_query.data)
        channel_id = data['channel_id']
        digest_id = data['digest_id']
        
        print(f"üîç DEBUG: action = {action}, channel_id = {channel_id}, digest_id = {digest_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ user_id
        user_id = callback_query.from_user.id
        temp_digest_data[user_id] = {
                'channel_id': channel_id,
                'digest_id': digest_id,
            'user_id': user_id,
                'edit_type': 'time'
            }
        
        print(f"üîç DEBUG: temp_digest_data[{user_id}] —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {temp_digest_data[user_id]}")
        print(f"üîç DEBUG: –í–µ—Å—å —Å–ª–æ–≤–∞—Ä—å temp_digest_data: {temp_digest_data}")
        
        text = (
            f"üïê <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30, 9:05, 23:45\n\n"
            f"‚è∞ –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
        )
        
        await callback_query.message.edit_text(
            text,
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è
        await callback_query.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
            show_alert=False
        )
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def edit_digest_category_callback(callback_query: types.CallbackQuery, state: FSMContext = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: edit_digest_category_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, data = parse_short_callback(callback_query.data)
        channel_id = data['channel_id']
        digest_id = data['digest_id']
        
        print(f"üîç DEBUG: action = {action}, channel_id = {channel_id}, digest_id = {digest_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ user_id
        user_id = callback_query.from_user.id
        temp_digest_data[user_id] = {
                'channel_id': channel_id,
                'digest_id': digest_id,
                'edit_type': 'category'
            }
        
        print(f"üîç DEBUG: temp_digest_data[{user_id}] —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {temp_digest_data[user_id]}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = get_categories()
        
        if not categories:
            await callback_query.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        text = (
            f"üè∑Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        from bot.keyboards.inline_keyboards import get_digest_edit_category_keyboard
        keyboard = get_digest_edit_category_keyboard(categories, channel_id, digest_id)
        
        await callback_query.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await callback_query.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            show_alert=False
        )
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def edit_digest_category_select_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: edit_digest_category_select_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, data = parse_short_callback(callback_query.data)
        channel_id = data['channel_id']
        digest_id = data['digest_id']
        category = data['category']
        
        print(f"üîç DEBUG: action = {action}, channel_id = {channel_id}, digest_id = {digest_id}, category = {category}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
        success = telegram_channels_service.update_digest(channel_id, digest_id, {"category": category})
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            channel_info = telegram_channels_service.get_channel_by_id(channel_id)
            digest = None
            if channel_info and channel_info.digests:
                for d in channel_info.digests:
                    if d.id == digest_id:
                        digest = d
                        break
            if digest:
                await update_digest_job(channel_id, digest_id, category, digest.time)
            await callback_query.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{category}'!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ
            await digest_info_callback(callback_query)
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞", show_alert=True)
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def delete_digest_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: delete_digest_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, data = parse_short_callback(callback_query.data)
        channel_id = data['channel_id']
        digest_id = data['digest_id']
        
        print(f"üîç DEBUG: action = {action}, channel_id = {channel_id}, digest_id = {digest_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = telegram_channels_service.get_channel_by_id(channel_id)
        
        if not channel_info:
            await callback_query.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        digest = None
        for d in channel_info.digests:
            if d.id == digest_id:
                digest = d
                break
        
        if not digest:
            await callback_query.answer("‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        text = (
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {channel_info.channel.title}\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {digest.category}\n"
            f"‚è∞ –í—Ä–µ–º—è: {digest.time}\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–∞–π–¥–∂–µ—Å—Ç?"
        )
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_confirm_delete_digest_keyboard(channel_id, digest_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def confirm_delete_digest_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: confirm_delete_digest_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, data = parse_short_callback(callback_query.data)
        channel_id = data['channel_id']
        digest_id = data['digest_id']
        
        print(f"üîç DEBUG: action = {action}, channel_id = {channel_id}, digest_id = {digest_id}")
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        success = telegram_channels_service.delete_digest(channel_id, digest_id)
        
        if success:
            await remove_digest_job(digest_id)
            await callback_query.answer("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
            await edit_digests_callback(callback_query)
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞", show_alert=True)
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def process_digest_edit_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    if not await has_admin_permissions(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        time_input = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_pattern = re.compile(r'^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$')
        if not time_pattern.match(time_input):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>–ß–ß:–ú–ú</b>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30, 9:05, 23:45\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        channel_id = data.get("channel_id")
        digest_id = data.get("digest_id")
        
        if not channel_id or not digest_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
        success = telegram_channels_service.update_digest(channel_id, digest_id, {"time": time_input})
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            channel_info = telegram_channels_service.get_channel_by_id(channel_id)
            digest = None
            if channel_info and channel_info.digests:
                for d in channel_info.digests:
                    if d.id == digest_id:
                        digest = d
                        break
            if digest:
                await update_digest_job(channel_id, digest_id, digest.category, time_input)
            await message.answer(
                f"‚úÖ –í—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time_input}!",
                reply_markup=get_digest_success_keyboard(channel_id)
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞",
                reply_markup=get_digest_error_keyboard(channel_id)
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

async def process_digest_edit_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    if not await has_admin_permissions(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        category_input = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        channel_id = data.get("channel_id")
        digest_id = data.get("digest_id")
        
        if not channel_id or not digest_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
        success = telegram_channels_service.update_digest(channel_id, digest_id, {"category": category_input})
        
        if success:
            await message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{category_input}'!",
                reply_markup=get_digest_success_keyboard(channel_id)
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞",
                reply_markup=get_digest_error_keyboard(channel_id)
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

async def process_digest_edit_time_no_state(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    if not await has_admin_permissions(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        time_input = message.text.strip()
        user_id = message.from_user.id
        
        print(f"üîç DEBUG: process_digest_edit_time_no_state –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {time_input}")
        print(f"üîç DEBUG: user_id = {user_id}")
        print(f"üîç DEBUG: temp_digest_data[{user_id}] = {temp_digest_data.get(user_id)}")
        print(f"üîç DEBUG: –í–µ—Å—å —Å–ª–æ–≤–∞—Ä—å temp_digest_data: {temp_digest_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_pattern = re.compile(r'^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$')
        if not time_pattern.match(time_input):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>–ß–ß:–ú–ú</b>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30, 9:05, 23:45\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        user_data = temp_digest_data.get(user_id)
        print(f"üîç DEBUG: user_data = {user_data}")
        
        if not user_data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        if user_data.get('edit_type') != 'time':
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–∂–∏–¥–∞–µ—Ç—Å—è 'time', –ø–æ–ª—É—á–µ–Ω–æ '{user_data.get('edit_type')}'")
            return
        
        print(f"üîç DEBUG: edit_type = {user_data.get('edit_type')}")
        
        channel_id = user_data.get("channel_id")
        digest_id = user_data.get("digest_id")
        
        print(f"üîç DEBUG: channel_id = {channel_id}, digest_id = {digest_id}")
        
        if not channel_id or not digest_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            if user_id in temp_digest_data:
                del temp_digest_data[user_id]
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
        success = telegram_channels_service.update_digest(channel_id, digest_id, {"time": time_input})
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            channel_info = telegram_channels_service.get_channel_by_id(channel_id)
            digest = None
            if channel_info and channel_info.digests:
                for d in channel_info.digests:
                    if d.id == digest_id:
                        digest = d
                        break
            if digest:
                await update_digest_job(channel_id, digest_id, digest.category, time_input)
            await message.answer(
                f"‚úÖ –í—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time_input}!",
                reply_markup=get_digest_success_keyboard(channel_id)
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞",
                reply_markup=get_digest_error_keyboard(channel_id)
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in temp_digest_data:
            del temp_digest_data[user_id]
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ process_digest_edit_time_no_state: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        user_id = message.from_user.id
        if user_id in temp_digest_data:
            del temp_digest_data[user_id]

async def process_digest_edit_category_no_state(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    if not await has_admin_permissions(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        category_input = message.text.strip()
        user_id = message.from_user.id
        
        user_data = temp_digest_data.get(user_id)
        if not user_data or user_data.get('edit_type') != 'category':
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        channel_id = user_data.get("channel_id")
        digest_id = user_data.get("digest_id")
        
        if not channel_id or not digest_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            if user_id in temp_digest_data:
                del temp_digest_data[user_id]
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
        success = telegram_channels_service.update_digest(channel_id, digest_id, {"category": category_input})
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            channel_info = telegram_channels_service.get_channel_by_id(channel_id)
            digest = None
            if channel_info and channel_info.digests:
                for d in channel_info.digests:
                    if d.id == digest_id:
                        digest = d
                        break
            if digest:
                await update_digest_job(channel_id, digest_id, category_input, digest.time)
            await message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{category_input}'!",
                reply_markup=get_digest_success_keyboard(channel_id)
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞",
                reply_markup=get_digest_error_keyboard(channel_id)
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in temp_digest_data:
            del temp_digest_data[user_id]
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        user_id = message.from_user.id
        if user_id in temp_digest_data:
            del temp_digest_data[user_id]

async def test_digest_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: test_digest_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, data = parse_short_callback(callback_query.data)
        channel_id = data['channel_id']
        digest_id = data['digest_id']
        
        print(f"üîç DEBUG: action = {action}, channel_id = {channel_id}, digest_id = {digest_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = telegram_channels_service.get_channel_by_id(channel_id)
        
        if not channel_info:
            await callback_query.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        digest = None
        for d in channel_info.digests:
            if d.id == digest_id:
                digest = d
                break
        
        if not digest:
            await callback_query.answer("‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
        from celery_app.tasks.digest_tasks import send_test_digest
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        task = send_test_digest.delay(channel_id, digest.category)
        
        await callback_query.answer(
            f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω! Task ID: {task.id}",
            show_alert=True
        )
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def schedule_digests_now_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    print(f"üîç DEBUG: schedule_digests_now_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        from celery_app.tasks.digest_tasks import schedule_daily_digests
        
        task = schedule_daily_digests.delay()
        
        await callback_query.answer(
            f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ! Task ID: {task.id}",
            show_alert=True
        )
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def initialize_schedule_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback.data
        action, data = parse_short_callback(callback_data)
        
        if action == "initialize_schedule":
            channel_id = data.get("channel_id")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await callback.message.edit_text(
                "üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            active_digests = telegram_channels_service.get_active_digests()
            await init_digest_jobs_from_db(active_digests)
            
            await callback.message.edit_text(
                "‚úÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!</b>\n\n"
                "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.\n"
                "–î–∞–π–¥–∂–µ—Å—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_telegram_channel_info_keyboard(channel_id),
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ initialize_schedule_callback: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

async def check_schedule_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback.data
        action, data = parse_short_callback(callback_data)
        
        if action == "check_schedule":
            channel_id = data.get("channel_id")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            await callback.message.edit_text(
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            jobs = await get_digest_jobs()
            if not jobs:
                await callback.message.edit_text(
                    "–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.",
                    reply_markup=get_telegram_channel_info_keyboard(channel_id),
                    parse_mode="HTML"
                )
                return
            text = f"üóìÔ∏è –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ {len(jobs)} –∑–∞–¥–∞—á:\n"
            for idx, job in enumerate(jobs, 1):
                args = job.args if hasattr(job, 'args') else job.kwargs.get('args', [])
                channel_id = args[0] if len(args) > 0 else '‚Äî'
                digest_id = args[1] if len(args) > 1 else '‚Äî'
                category = args[2] if len(args) > 2 else '‚Äî'
                time_str = args[3] if len(args) > 3 else '?'
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                channel_title = str(channel_id)
                try:
                    channel_info = telegram_channels_service.get_channel_by_id(channel_id)
                    if channel_info and hasattr(channel_info, 'channel'):
                        channel_title = channel_info.channel.title
                except Exception:
                    pass
                text += f"\n{idx}. üì∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n   –ö–∞–Ω–∞–ª: {channel_title}\n   –í—Ä–µ–º—è: {time_str}\n   Digest ID: {digest_id}\n"
            await callback.message.edit_text(
                text,
                reply_markup=get_telegram_channel_info_keyboard(channel_id),
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_schedule_callback: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–∞–º–∏"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    dp.callback_query.register(initialize_schedule_callback, lambda c: c.data.startswith('digest_')) 
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ FSM
    dp.message.register(process_digest_edit_time_no_state, TelegramChannelStates.editing_digest_time)
    dp.message.register(process_digest_edit_category_no_state, TelegramChannelStates.editing_digest_category) 