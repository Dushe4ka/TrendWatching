from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from bot.states.states import TelegramChannelStates
from bot.utils.misc import has_admin_permissions, check_permission
from bot.utils.callback_utils import parse_short_callback, _callback_cache
from bot.keyboards.inline_keyboards import (
    get_telegram_channels_menu_keyboard,
    get_telegram_channels_list_keyboard,
    get_telegram_channel_info_keyboard,
    get_digest_category_keyboard,
    get_digest_time_input_keyboard,
    get_digest_success_keyboard,
    get_digest_error_keyboard,
    get_digest_list_keyboard,
    get_digest_info_keyboard,
    get_confirm_delete_digest_keyboard,
    get_digest_edit_category_keyboard
)
from telegram_channels_service import telegram_channels_service
from database import get_categories
from bot.utils.misc import category_to_callback
from logger_config import setup_logger
import re
from bot.apscheduler_digest import add_digest_job, remove_digest_job, update_digest_job, get_digest_jobs, init_digest_jobs_from_db, start_scheduler

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logger("telegram_channels_handlers")

async def telegram_channels_list_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    print(f"üîç DEBUG: telegram_channels_list_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        channels = telegram_channels_service.get_all_channels()
        
        print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels) if channels else 0}")
        
        if not channels:
            text = (
                "üì¢ <b>Telegram –∫–∞–Ω–∞–ª—ã</b>\n\n"
                "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"
            )
            
            await callback_query.message.edit_text(
                text,
                reply_markup=get_telegram_channels_menu_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        channels_data = []
        for channel in channels:
            channels_data.append({
                "id": channel.id,
                "title": channel.title,
                "username": channel.username
            })
        
        text = (
            f"üì¢ <b>Telegram –∫–∞–Ω–∞–ª—ã</b> ({len(channels)})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞–º–∏:"
        )
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_telegram_channels_list_keyboard(channels_data),
            parse_mode="HTML"
        )
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ telegram_channels_list_callback: {str(e)}")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}",
            reply_markup=get_telegram_channels_menu_keyboard(),
            parse_mode="HTML"
        )

async def telegram_channel_info_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Telegram –∫–∞–Ω–∞–ª–µ"""
    print(f"üîç DEBUG: telegram_channel_info_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback_query.data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç—ã–º callback_data
        if callback_data == "telegram_channels_list":
            await telegram_channels_list_callback(callback_query)
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ –∫–æ—Ä–æ—Ç–∫–∏–π callback
        try:
            action, data = parse_short_callback(callback_data)
        except ValueError:
            print(f"üîç DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å callback_data: {callback_data}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback")
            return
            
        print(f"üîç DEBUG: action = {action}, data = {data}")
        
        if action == "channel_info":
            channel_id = data.get("channel_id")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_info = telegram_channels_service.get_channel_by_id(channel_id)
            
            if not channel_info:
                await callback_query.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞
            active_digests = telegram_channels_service.get_active_digests_by_channel(channel_id)
            
            text = (
                f"üì¢ <b>{channel_info.channel.title}</b>\n\n"
                f"üÜî ID: <code>{channel_id}</code>\n"
                f"üë§ Username: @{channel_info.channel.username or '–ù–µ—Ç'}\n"
                f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(active_digests) if active_digests else 0}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            await callback_query.message.edit_text(
                text,
                reply_markup=get_telegram_channel_info_keyboard(channel_id),
                parse_mode="HTML"
            )
        
        elif action == "add_digest":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
            channel_id = data.get("channel_id")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = get_categories()
            
            text = (
                "üì∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞:"
            )
            
            await callback_query.message.edit_text(
                text,
                reply_markup=get_digest_category_keyboard(categories, channel_id),
                parse_mode="HTML"
            )
        
        elif action == "edit_digests":
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
            await edit_digests_callback(callback_query)
        
        elif action == "initialize_schedule":
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            await initialize_schedule_callback(callback_query)
        
        elif action == "check_schedule":
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            await check_schedule_callback(callback_query)
        
        else:
            print(f"üîç DEBUG: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            await callback_query.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}", show_alert=True)
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ telegram_channel_info_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def add_digest_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: add_digest_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback_query.data
        action, data = parse_short_callback(callback_data)
        
        if action == "add_digest":
            channel_id = data.get("channel_id")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
            await state.update_data(
                channel_id=channel_id,
                user_id=callback_query.from_user.id,
                action="add_digest"
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await state.set_state(TelegramChannelStates.waiting_for_digest_category)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = get_categories()
        
        text = (
                "üì∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞:"
        )
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_digest_category_keyboard(categories, channel_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ add_digest_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def digest_category_selected_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: digest_category_selected_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback_query.data
        action, data = parse_short_callback(callback_data)
        
        print(f"üîç DEBUG: action = {action}, data = {data}")
        
        if action == "digest_cat":
            category = data.get("category")
            channel_id = data.get("channel_id")
            
            print(f"üîç DEBUG: category = {category}, channel_id = {channel_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
            await state.update_data(
                channel_id=channel_id,
                category=category,
                user_id=callback_query.from_user.id,
                action="add_digest"
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
            await state.set_state(TelegramChannelStates.waiting_for_digest_time)
        
        text = (
                "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
                "–§–æ—Ä–º–∞—Ç: <code>HH:MM</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00)\n"
                "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
            )
        
        await callback_query.message.edit_text(
            text,
                reply_markup=get_digest_time_input_keyboard(channel_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ digest_category_selected_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def process_digest_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: process_digest_time –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")
    
    if not await has_admin_permissions(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        time_input = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        if not re.match(r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$', time_input):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>HH:MM</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00)\n"
                "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        user_data = await state.get_data()
        channel_id = user_data.get("channel_id")
        category = user_data.get("category")
        user_id = user_data.get("user_id")
        
        print(f"üîç DEBUG: user_data = {user_data}")
        print(f"üîç DEBUG: channel_id = {channel_id}, category = {category}, user_id = {user_id}")
        print(f"üîç DEBUG: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö - channel_id: {type(channel_id)}, category: {type(category)}, user_id: {type(user_id)}")
        
        if not all([channel_id, category, user_id]):
            missing_data = []
            if not channel_id: missing_data.append("channel_id")
            if not category: missing_data.append("category")
            if not user_id: missing_data.append("user_id")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing_data)}")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        digest = telegram_channels_service.create_digest(
            channel_id=channel_id,
            category=category,
            time=time_input,
            user_id=user_id
        )
        
        if digest:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            await add_digest_job(channel_id, digest["id"], category, time_input)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            await state.clear()
            
            text = (
                "‚úÖ <b>–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üì∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"‚è∞ –í—Ä–µ–º—è: {time_input}\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {channel_id}\n\n"
                "–î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
            )
            
            await message.answer(
                text,
                reply_markup=get_digest_success_keyboard(channel_id),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞",
                reply_markup=get_digest_error_keyboard(channel_id),
                parse_mode="HTML"
            )
            await state.clear()
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ process_digest_time: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
        await state.clear()

async def edit_digests_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    print(f"üîç DEBUG: edit_digests_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback_query.data
        action, data = parse_short_callback(callback_data)
        
        if action == "edit_digests":
            channel_id = data.get("channel_id")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞
            active_digests = telegram_channels_service.get_active_digests_by_channel(channel_id)
            
            if not active_digests:
                text = (
                    "üì∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤</b>\n\n"
                    "–£ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤."
                )
                
                await callback_query.message.edit_text(
                    text,
                    reply_markup=get_telegram_channel_info_keyboard(channel_id),
                    parse_mode="HTML"
                )
                return
            
            text = (
                f"üì∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤</b>\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {len(active_digests)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
            )
        
        await callback_query.message.edit_text(
            text,
                reply_markup=get_digest_list_keyboard(channel_id, active_digests),
            parse_mode="HTML"
        )
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ edit_digests_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def digest_info_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ"""
    print(f"üîç DEBUG: digest_info_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback_query.data
        action, data = parse_short_callback(callback_data)
        
        if action == "digest_info":
            digest_id = data.get("digest_id")
            channel_id = data.get("channel_id")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ
            digest = telegram_channels_service.get_digest_by_id(digest_id)
        
        if not digest:
            await callback_query.answer("‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        text = (
            f"üì∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ</b>\n\n"
                f"üÜî ID: <code>{digest['id']}</code>\n"
                f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {digest['category']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {digest['time']}\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {digest['channel_id']}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {digest.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if digest.get('is_active', True) else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
            )
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_digest_info_keyboard(channel_id, digest_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ digest_info_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def edit_digest_time_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: edit_digest_time_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback_query.data
        action, data = parse_short_callback(callback_data)
        
        print(f"üîç DEBUG: action = {action}, data = {data}")
        
        if action == "edit_digest_time":
            channel_id = data.get("channel_id")
            digest_id = data.get("digest_id")
            
            print(f"üîç DEBUG: channel_id = {channel_id}, digest_id = {digest_id}")
            print(f"üîç DEBUG: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö - channel_id: {type(channel_id)}, digest_id: {type(digest_id)}")
            
            if not digest_id:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –¥–∞–π–¥–∂–µ—Å—Ç–∞", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ digest_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è channel_id
            if str(digest_id).startswith('-100'):
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –¥–∞–π–¥–∂–µ—Å—Ç–∞", show_alert=True)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
            await state.update_data(
                channel_id=channel_id,
                digest_id=digest_id,
                user_id=callback_query.from_user.id,
                edit_type="time"
            )
            
            print(f"üîç DEBUG: –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM: channel_id={channel_id}, digest_id={digest_id}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            await state.set_state(TelegramChannelStates.editing_digest_time)
        
        text = (
                "‚è∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>HH:MM</code>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00"
        )
        
        await callback_query.message.edit_text(
            text,
            parse_mode="HTML"
        )
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ edit_digest_time_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def process_digest_edit_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: process_digest_edit_time –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")
    
    if not await has_admin_permissions(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        time_input = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        if not re.match(r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$', time_input):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>HH:MM</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00)\n"
                "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        user_data = await state.get_data()
        channel_id = user_data.get("channel_id")
        digest_id = user_data.get("digest_id")
        
        print(f"üîç DEBUG: user_data = {user_data}")
        print(f"üîç DEBUG: channel_id = {channel_id}, digest_id = {digest_id}")
        print(f"üîç DEBUG: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö - channel_id: {type(channel_id)}, digest_id: {type(digest_id)}")
        
        if not all([channel_id, digest_id]):
            missing_data = []
            if not channel_id: missing_data.append("channel_id")
            if not digest_id: missing_data.append("digest_id")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing_data)}")
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ digest_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è channel_id
        if str(digest_id).startswith('-100'):
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –¥–∞–π–¥–∂–µ—Å—Ç–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
        success = telegram_channels_service.update_digest_time(digest_id, time_input)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            digest = telegram_channels_service.get_digest_by_id(digest_id)
            if digest:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
                await update_digest_job(channel_id, digest_id, digest['category'], time_input)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            await state.clear()
            
            text = (
                "‚úÖ <b>–í—Ä–µ–º—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                f"‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {time_input}\n"
                f"üì∞ Digest ID: {digest_id}\n\n"
                "–î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è."
            )
            
            await message.answer(
                text,
                reply_markup=get_telegram_channel_info_keyboard(channel_id),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞",
                reply_markup=get_telegram_channel_info_keyboard(channel_id),
                parse_mode="HTML"
            )
            await state.clear()
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ process_digest_edit_time: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {str(e)}")
        await state.clear()

async def edit_digest_category_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: edit_digest_category_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback_query.data
        action, data = parse_short_callback(callback_data)
        
        print(f"üîç DEBUG: action = {action}, data = {data}")
        
        if action == "edit_digest_category":
            channel_id = data.get("channel_id")
            digest_id = data.get("digest_id")
            
            print(f"üîç DEBUG: channel_id = {channel_id}, digest_id = {digest_id}")
            print(f"üîç DEBUG: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö - channel_id: {type(channel_id)}, digest_id: {type(digest_id)}")
            
            if not digest_id:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –¥–∞–π–¥–∂–µ—Å—Ç–∞", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ digest_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è channel_id
            if str(digest_id).startswith('-100'):
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –¥–∞–π–¥–∂–µ—Å—Ç–∞", show_alert=True)
                return
        
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = get_categories()
            
            text = (
                "üìä <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            keyboard = get_digest_edit_category_keyboard(categories, channel_id, digest_id)
            
            await callback_query.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ edit_digest_category_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def edit_digest_category_select_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: edit_digest_category_select_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback_query.data
        action, data = parse_short_callback(callback_data)
        
        print(f"üîç DEBUG: action = {action}, data = {data}")
        
        if action == "edit_digest_category_select":
            channel_id = data.get("channel_id")
            digest_id = data.get("digest_id")
            category = data.get("category")
            
            print(f"üîç DEBUG: channel_id = {channel_id}, digest_id = {digest_id}, category = {category}")
            print(f"üîç DEBUG: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö - channel_id: {type(channel_id)}, digest_id: {type(digest_id)}")
            
            if not digest_id:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –¥–∞–π–¥–∂–µ—Å—Ç–∞", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ digest_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è channel_id
            if str(digest_id).startswith('-100'):
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –¥–∞–π–¥–∂–µ—Å—Ç–∞", show_alert=True)
                return
        
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–∞–π–¥–∂–µ—Å—Ç–∞
            success = telegram_channels_service.update_digest_category(digest_id, category)
        
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                digest = telegram_channels_service.get_digest_by_id(digest_id)
                if digest:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
                    await update_digest_job(channel_id, digest_id, category, digest['time'])
                
                await callback_query.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{category}'!")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ
                await digest_info_callback(callback_query)
            else:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞", show_alert=True)
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ edit_digest_category_select_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def delete_digest_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: delete_digest_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback_query.data
        action, data = parse_short_callback(callback_data)
        
        if action == "delete_digest":
            channel_id = data.get("channel_id")
            digest_id = data.get("digest_id")
        
        text = (
                "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞</b>\n\n"
                f"üì∞ Digest ID: {digest_id}\n\n"
                "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–∞–π–¥–∂–µ—Å—Ç?\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        )
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_confirm_delete_digest_keyboard(channel_id, digest_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ delete_digest_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def confirm_delete_digest_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: confirm_delete_digest_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback_query.data
        action, data = parse_short_callback(callback_data)
        
        if action == "confirm_delete_digest":
            channel_id = data.get("channel_id")
            digest_id = data.get("digest_id")
        
                # –£–¥–∞–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        success = telegram_channels_service.delete_digest(digest_id)
        
        if success:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            await remove_digest_job(digest_id)
            
            text = (
                "‚úÖ <b>–î–∞–π–¥–∂–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üì∞ Digest ID: {digest_id}\n"
                "–î–∞–π–¥–∂–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è."
            )
            
            await callback_query.message.edit_text(
                text,
                reply_markup=get_telegram_channel_info_keyboard(channel_id),
                parse_mode="HTML"
            )
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞", show_alert=True)
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ confirm_delete_digest_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def test_digest_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    print(f"üîç DEBUG: test_digest_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback_query.data
        action, data = parse_short_callback(callback_data)
        
        if action == "test_digest":
            channel_id = data.get("channel_id")
            digest_id = data.get("digest_id")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–π–¥–∂–µ—Å—Ç–µ
            digest = telegram_channels_service.get_digest_by_id(digest_id)
            
            if not digest:
                await callback_query.answer("‚ùå –î–∞–π–¥–∂–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
            from celery_app.tasks.digest_tasks import send_test_digest
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
            task = send_test_digest.delay(channel_id, digest['category'])
            
            await callback_query.answer(
                f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω! Task ID: {task.id}",
                show_alert=True
            )
        
    except Exception as e:
        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –≤ test_digest_callback: {str(e)}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def schedule_digests_now_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    print(f"üîç DEBUG: schedule_digests_now_callback –≤—ã–∑–≤–∞–Ω —Å callback_data = {callback_query.data}")
    
    if not await has_admin_permissions(callback_query.from_user.id, callback_query.from_user.username):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback_query.data
        action, data = parse_short_callback(callback_data)
        
        if action == "schedule_digests_now":
            channel_id = data.get("channel_id")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback_query.message.edit_text(
                "üîÑ –ó–∞–ø—É—Å–∫ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        from celery_app.tasks.digest_tasks import schedule_daily_digests
        
        task = schedule_daily_digests.delay()
        
        await callback_query.answer(
            f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ! Task ID: {task.id}",
            show_alert=True
        )
        
    except Exception as e:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def initialize_schedule_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback.data
        action, data = parse_short_callback(callback_data)
        
        if action == "initialize_schedule":
            channel_id = data.get("channel_id")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await callback.message.edit_text(
                "üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            active_digests = telegram_channels_service.get_active_digests()
            await init_digest_jobs_from_db(active_digests)
            
            await callback.message.edit_text(
                "‚úÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!</b>\n\n"
                "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.\n"
                "–î–∞–π–¥–∂–µ—Å—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_telegram_channel_info_keyboard(channel_id),
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ initialize_schedule_callback: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

async def check_schedule_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    try:
        # –ü–∞—Ä—Å–∏–º callback data
        callback_data = callback.data
        action, data = parse_short_callback(callback_data)
        
        if action == "check_schedule":
            channel_id = data.get("channel_id")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            await callback.message.edit_text(
                "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤...\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            jobs = await get_digest_jobs()
            if not jobs:
                await callback.message.edit_text(
                    "–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.",
                    reply_markup=get_telegram_channel_info_keyboard(channel_id),
                    parse_mode="HTML"
                )
                return
            text = f"üóìÔ∏è –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ {len(jobs)} –∑–∞–¥–∞—á:\n"
            for idx, job in enumerate(jobs, 1):
                args = job.args if hasattr(job, 'args') else job.kwargs.get('args', [])
                channel_id = args[0] if len(args) > 0 else '‚Äî'
                digest_id = args[1] if len(args) > 1 else '‚Äî'
                category = args[2] if len(args) > 2 else '‚Äî'
                time_str = args[3] if len(args) > 3 else '?'
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                channel_title = str(channel_id)
                try:
                    channel_info = telegram_channels_service.get_channel_by_id(channel_id)
                    if channel_info and hasattr(channel_info, 'channel'):
                        channel_title = channel_info.channel.title
                except Exception:
                    pass
                text += f"\n{idx}. üì∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n   –ö–∞–Ω–∞–ª: {channel_title}\n   –í—Ä–µ–º—è: {time_str}\n   Digest ID: {digest_id}\n"
            await callback.message.edit_text(
                text,
                reply_markup=get_telegram_channel_info_keyboard(channel_id),
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_schedule_callback: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–∞–º–∏"""
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(telegram_channels_list_callback, lambda c: c.data == "telegram_channels_list")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    # telegram_channel_info_callback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–Ω–∞–ª–∞–º–∏
    dp.callback_query.register(telegram_channel_info_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] in [
        'channel_info', 'add_digest', 'edit_digests', 'initialize_schedule', 'check_schedule'
    ])
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–ª—è –∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    dp.callback_query.register(add_digest_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'add_digest')
    dp.callback_query.register(digest_category_selected_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'digest_cat')
    dp.callback_query.register(edit_digests_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'edit_digests')
    dp.callback_query.register(digest_info_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'digest_info')
    dp.callback_query.register(edit_digest_time_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'edit_digest_time')
    dp.callback_query.register(edit_digest_category_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'edit_digest_category')
    dp.callback_query.register(edit_digest_category_select_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'edit_digest_category_select')
    dp.callback_query.register(delete_digest_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'delete_digest')
    dp.callback_query.register(confirm_delete_digest_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'confirm_delete_digest')
    dp.callback_query.register(test_digest_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'test_digest')
    dp.callback_query.register(schedule_digests_now_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'schedule_digests_now')
    dp.callback_query.register(initialize_schedule_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'initialize_schedule')
    dp.callback_query.register(check_schedule_callback, lambda c: c.data in _callback_cache and _callback_cache[c.data]['action'] == 'check_schedule')
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ FSM
    dp.message.register(process_digest_time, TelegramChannelStates.waiting_for_digest_time)
    dp.message.register(process_digest_edit_time, TelegramChannelStates.editing_digest_time) 