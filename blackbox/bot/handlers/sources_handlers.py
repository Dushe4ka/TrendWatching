import os
import tempfile
import urllib.parse
import requests
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from bot.states.states import CSVUpload, RSSUpload, TGUpload
from bot.keyboards.inline_keyboards import (
    get_menu_sources_keyboard,
    get_sources_upload_keyboard,
    get_sources_manage_keyboard,
    get_parse_sources_keyboard,
    get_add_more_sources_keyboard,
    create_sources_pagination_keyboard,
    get_csv_upload_back_keyboard,
    get_rss_category_keyboard,
    get_tg_category_keyboard,
    get_custom_category_back_keyboard,
    get_source_input_back_keyboard,
    get_main_menu_back_keyboard
)
from bot.utils.misc import category_to_callback, callback_to_category, get_subscription_id_and_type
from bot.utils.sources_helpers import get_categories_set, get_category_filter, filter_sources_by_category, format_sources_text
from database import (
    get_sources,
    save_sources_db,
    is_source_exists_db,
    delete_source,
    get_categories
)
from csv_sources_reader import process_csv as process_csv_sources

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è auth_service
AUTH_SERVICE_URL = os.getenv("AUTH_SERVICE_URL", "http://localhost:8000")

async def auto_redistribute_channels():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    try:
        response = requests.post(
            f"{AUTH_SERVICE_URL}/auth/distribute_channels_from_db",
            timeout=30
        )
        if response.status_code == 200:
            return True
        else:
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return False

async def auto_clean_duplicates():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        response = requests.post(
            f"{AUTH_SERVICE_URL}/auth/clean_duplicate_channels",
            timeout=30
        )
        if response.status_code == 200:
            return True
        else:
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
        return False

async def menu_sources_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    keyboard = get_menu_sources_keyboard()
    await callback_query.message.edit_text(
        "üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def sources_upload_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    keyboard = get_sources_upload_keyboard()
    await callback_query.message.edit_text(
        "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n‚ùóÔ∏è–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏/–∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö‚ùóÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=keyboard
    )

async def process_csv_file(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ñ–∞–π–ª, –∞ —Ç–µ–∫—Å—Ç "–ù–∞–∑–∞–¥"
    if message.text and message.text.strip() == "‚Üê –ù–∞–∑–∞–¥":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
        await state.clear()
        return
    
    if not message.document or not message.document.file_name.endswith('.csv'):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.",
            reply_markup=get_csv_upload_back_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    from main import bot
    file = await bot.get_file(message.document.file_id)
    with tempfile.NamedTemporaryFile(suffix=".csv", delete=False) as tmp:
        await bot.download_file(file.file_path, tmp.name)
        temp_file = tmp.name

    try:
        report = await process_csv_sources(temp_file, message)
        await message.answer(
            f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ CSV –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {report['added']}\n"
            f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤: {report['skipped']}\n"
            f"–û—à–∏–±–æ–∫: {report['errors']}"
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –∏ –æ—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if report['added'] > 0:
            await message.answer("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã...")
            redistribute_success = await auto_redistribute_channels()
            clean_success = await auto_clean_duplicates()
            
            if redistribute_success and clean_success:
                await message.answer("‚úÖ –ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã!")
            elif redistribute_success:
                await message.answer("‚úÖ –ö–∞–Ω–∞–ª—ã –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            else:
                await message.answer("‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤")
        
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤?",
            reply_markup=get_parse_sources_keyboard()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    finally:
        os.remove(temp_file)
    await state.clear()

async def upload_csv_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CSV"""
    await callback_query.message.edit_text(
        "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
        reply_markup=get_csv_upload_back_keyboard()
    )
    await state.set_state(CSVUpload.waiting_for_file)

async def upload_rss_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ RSS"""
    categories = get_categories()
    keyboard = get_rss_category_keyboard(categories)
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∞:", reply_markup=keyboard)
    await state.set_state(RSSUpload.waiting_for_category)

async def rss_category_chosen(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è RSS"""
    cat = callback_query.data.replace("rss_cat_", "")
    cat = urllib.parse.unquote(cat)
    if cat == "custom":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_custom_category_back_keyboard("rss")
        )
        await state.set_state(RSSUpload.waiting_for_category)
        await state.update_data(rss_custom=True)
    else:
        await state.update_data(category=cat, rss_custom=False)
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {cat}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ RSS-—Å—Å—ã–ª–∫—É:",
            reply_markup=get_source_input_back_keyboard("rss")
        )
        await state.set_state(RSSUpload.waiting_for_rss)

async def rss_custom_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è RSS"""
    data = await state.get_data()
    if not data.get("rss_custom"):
        return
    await state.update_data(category=message.text.strip(), rss_custom=False)
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {message.text.strip()}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ RSS-—Å—Å—ã–ª–∫—É:",
        reply_markup=get_source_input_back_keyboard("rss")
    )
    await state.set_state(RSSUpload.waiting_for_rss)

async def process_rss_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ RSS —Å—Å—ã–ª–∫–∏"""
    url = message.text.strip()
    data = await state.get_data()
    category = data.get("category", "–û–±—â–µ–µ")
    if not url.startswith("http"):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ RSS-–ª–µ–Ω—Ç—É.")
        return
    if is_source_exists_db(url):
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª–∏–∫–∞—Ç).")
    else:
        source = {"url": url, "type": "rss", "category": category}
        if save_sources_db(source):
            await message.answer(f"‚úÖ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {url}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –∏ –æ—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            await message.answer("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã...")
            redistribute_success = await auto_redistribute_channels()
            clean_success = await auto_clean_duplicates()
            
            if redistribute_success and clean_success:
                await message.answer("‚úÖ –ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã!")
            elif redistribute_success:
                await message.answer("‚úÖ –ö–∞–Ω–∞–ª—ã –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            else:
                await message.answer("‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤")
            
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω RSS-–∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                reply_markup=get_add_more_sources_keyboard("rss")
            )
            await state.set_state(RSSUpload.waiting_for_more_rss)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
            await state.clear()

async def upload_tg_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    categories = get_categories()
    keyboard = get_tg_category_keyboard(categories)
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞:", reply_markup=keyboard)
    await state.set_state(TGUpload.waiting_for_category)

async def tg_category_chosen(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è Telegram"""
    cat = callback_query.data.replace("tg_cat_", "")
    cat = urllib.parse.unquote(cat)
    if cat == "custom":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_custom_category_back_keyboard("tg")
        )
        await state.set_state(TGUpload.waiting_for_category)
        await state.update_data(tg_custom=True)
    else:
        await state.update_data(category=cat, tg_custom=False)
        await callback_query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {cat}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–∫–∞–Ω–∞–ª:",
            reply_markup=get_source_input_back_keyboard("tg")
        )
        await state.set_state(TGUpload.waiting_for_tg)

async def tg_custom_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è Telegram"""
    data = await state.get_data()
    if not data.get("tg_custom"):
        return
    await state.update_data(category=message.text.strip(), tg_custom=False)
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {message.text.strip()}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–∫–∞–Ω–∞–ª:",
        reply_markup=get_source_input_back_keyboard("tg")
    )
    await state.set_state(TGUpload.waiting_for_tg)

async def process_tg_channel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ Telegram –∫–∞–Ω–∞–ª–∞"""
    url = message.text.strip()
    data = await state.get_data()
    category = data.get("category", "–û–±—â–µ–µ")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL Telegram –∫–∞–Ω–∞–ª–∞
    if not url.startswith("http"):
        if url.startswith("@"):
            url = f"https://t.me/{url[1:]}"
        elif not url.startswith("t.me/"):
            url = f"https://t.me/{url}"
        else:
            url = f"https://{url}"
    
    if is_source_exists_db(url):
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª–∏–∫–∞—Ç).")
    else:
        source = {"url": url, "type": "telegram", "category": category}
        if save_sources_db(source):
            await message.answer(f"‚úÖ Telegram-–∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {url}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –∏ –æ—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            await message.answer("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã...")
            redistribute_success = await auto_redistribute_channels()
            clean_success = await auto_clean_duplicates()
            
            if redistribute_success and clean_success:
                await message.answer("‚úÖ –ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã!")
            elif redistribute_success:
                await message.answer("‚úÖ –ö–∞–Ω–∞–ª—ã –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            else:
                await message.answer("‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤")
            
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω Telegram-–∫–∞–Ω–∞–ª –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                reply_markup=get_add_more_sources_keyboard("tg")
            )
            await state.set_state(TGUpload.waiting_for_more_tg)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Telegram-–∫–∞–Ω–∞–ª–∞.")
            await state.clear()

async def process_more_rss_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    url = message.text.strip()
    data = await state.get_data()
    category = data.get("category", "–û–±—â–µ–µ")
    if not url.startswith("http"):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ RSS-–ª–µ–Ω—Ç—É.")
        return
    if is_source_exists_db(url):
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª–∏–∫–∞—Ç).")
    else:
        source = {"url": url, "type": "rss", "category": category}
        if save_sources_db(source):
            await message.answer(f"‚úÖ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {url}")
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω RSS-–∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                reply_markup=get_add_more_sources_keyboard("rss")
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
            await state.clear()

async def process_more_tg_channel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    tg_id = message.text.strip()
    data = await state.get_data()
    category = data.get("category", "–û–±—â–µ–µ")
    # –ü—Ä–∏–≤–µ—Å—Ç–∏ –∫ username
    if tg_id.startswith("https://t.me/"):
        tg_id = tg_id.replace("https://t.me/", "").replace("/", "")
    tg_id = tg_id.lstrip("@")
    if not tg_id:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–∫–∞–Ω–∞–ª.")
        return
    url = f"https://t.me/{tg_id}"
    if is_source_exists_db(url):
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª–∏–∫–∞—Ç).")
    else:
        source = {"url": url, "type": "telegram", "category": category}
        if save_sources_db(source):
            await message.answer(f"‚úÖ Telegram-–∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {url}")
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω Telegram-–∫–∞–Ω–∞–ª –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                reply_markup=get_add_more_sources_keyboard("tg")
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Telegram-–∫–∞–Ω–∞–ª–∞.")
            await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
async def sources_manage_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    sources = get_sources()
    categories_set = get_categories_set(sources)
    keyboard = get_sources_manage_keyboard(categories_set)
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

async def sources_manage_category_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    category_hash = callback_query.data.replace("sources_manage_category_", "")
    sources = get_sources()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_categories() –≤–º–µ—Å—Ç–æ get_categories_set(sources) –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    categories = get_categories()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîç [DEBUG] category_hash: {category_hash}")
    print(f"üîç [DEBUG] categories: {categories}")
    
    category_filter = get_category_filter(category_hash, categories)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞
    if category_filter is None:
        print(f"‚ùå [DEBUG] –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è hash: {category_hash}")
        await callback_query.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    print(f"‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_filter}")
    
    filtered_sources = filter_sources_by_category(sources, category_filter)
    # –ü–µ—Ä–µ–¥–∞–µ–º category_hash (—Ö–µ—à) –≤–º–µ—Å—Ç–æ category_filter (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
    keyboard = create_sources_pagination_keyboard(filtered_sources, category_hash, page=0)
    total_sources = len(filtered_sources)
    text = format_sources_text(category_filter, total_sources)
    await callback_query.message.edit_text(text, reply_markup=keyboard)

async def delete_source_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    parts = callback_query.data.replace("delete_source_", "").split("_", 2)
    if len(parts) < 3:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        return
    try:
        category_hash = parts[0]
        source_idx = int(parts[1])
        page = int(parts[2])
    except Exception:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        return
    
    sources = get_sources()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_categories() –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    categories = get_categories()
    category_filter = get_category_filter(category_hash, categories)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞
    if category_filter is None:
        await callback_query.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    filtered_sources = filter_sources_by_category(sources, category_filter)
    
    if source_idx >= len(filtered_sources):
        await callback_query.answer("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    url = filtered_sources[source_idx].get('url')
    if delete_source(url):
        await callback_query.answer("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ —É–¥–∞–ª—ë–Ω", show_alert=False)
    else:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–∞—è—Å—å –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    try:
        sources = get_sources()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_categories() –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        categories = get_categories()
        category_filter = get_category_filter(category_hash, categories)
        filtered_sources = filter_sources_by_category(sources, category_filter)
        total_sources = len(filtered_sources)
        sources_per_page = 10
        total_pages = (total_sources + sources_per_page - 1) // sources_per_page
        if page >= total_pages and total_pages > 0:
            page = total_pages - 1
        keyboard = create_sources_pagination_keyboard(filtered_sources, category_hash, page=page)
        text = format_sources_text(category_filter, total_sources, page, total_pages)
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        await sources_manage_category_callback(callback_query)

async def sources_page_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    try:
        parts = callback_query.data.replace("sources_page_", "").split("_", 1)
        category_hash = parts[0]
        page = int(parts[1])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"üîç [DEBUG] sources_page_callback: category_hash={category_hash}, page={page}")
        sources = get_sources()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_categories() –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        categories = get_categories()
        category_filter = get_category_filter(category_hash, categories)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞
        if category_filter is None:
            await callback_query.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        filtered_sources = filter_sources_by_category(sources, category_filter)
        keyboard = create_sources_pagination_keyboard(filtered_sources, category_hash, page=page)
        total_sources = len(filtered_sources)
        sources_per_page = 10
        total_pages = (total_sources + sources_per_page - 1) // sources_per_page
        text = format_sources_text(category_filter, total_sources, page, total_pages)
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")

async def sources_manage_all_category_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    sources = get_sources()
    keyboard = create_sources_pagination_keyboard(sources, category_filter="all", page=0)
    total_sources = len(sources)
    if total_sources == 0:
        text = "üóÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n\n‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else:
        text = f"üóÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n\nüìä –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_sources}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1"
    await callback_query.message.edit_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
async def parse_sources_menu_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    await callback_query.message.edit_text(
        "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤?",
        reply_markup=get_parse_sources_keyboard()
    )

async def parse_sources_confirm_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ auth_tg_service
        import requests
        auth_service_url = os.getenv("AUTH_SERVICE_URL", "http://localhost:8000")
        
        response = requests.post(
            f"{auth_service_url}/parsing/parse_all_sources",
            json={
                "limit": None,
                "chat_id": str(callback_query.message.chat.id)
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            await callback_query.message.edit_text(
                "‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                reply_markup=get_main_menu_back_keyboard()
            )
        else:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_back_keyboard()
            )
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}",
            reply_markup=get_main_menu_back_keyboard()
        )
    
    await state.clear()

async def parse_sources_cancel_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    await callback_query.message.edit_text("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω—ë–Ω.")

async def add_more_sources_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    source_type = callback_query.data.replace("add_more_", "")
    data = await state.get_data()
    category = data.get("category", "–û–±—â–µ–µ")
    
    if source_type == "rss":
        await callback_query.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ RSS-–ª–µ–Ω—Ç—É:",
            reply_markup=get_source_input_back_keyboard("rss")
        )
        await state.set_state(RSSUpload.waiting_for_more_rss)
    elif source_type == "tg":
        await callback_query.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–∫–∞–Ω–∞–ª:",
            reply_markup=get_source_input_back_keyboard("tg")
        )
        await state.set_state(TGUpload.waiting_for_more_tg)

async def finish_adding_sources_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    await callback_query.message.edit_text(
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
        reply_markup=get_main_menu_back_keyboard()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
async def back_to_sources_upload(callback_query: types.CallbackQuery, state: FSMContext):
    await sources_upload_callback(callback_query, state)

async def back_to_upload_rss(callback_query: types.CallbackQuery, state: FSMContext):
    await upload_rss_callback(callback_query, state)

async def back_to_upload_tg(callback_query: types.CallbackQuery, state: FSMContext):
    await upload_tg_callback(callback_query, state)

async def back_to_upload_rss_from_more(callback_query: types.CallbackQuery, state: FSMContext):
    await upload_rss_callback(callback_query, state)

async def back_to_upload_tg_from_more(callback_query: types.CallbackQuery, state: FSMContext):
    await upload_tg_callback(callback_query, state)

async def noop_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è (noop)"""
    await callback_query.answer()

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é
    dp.callback_query.register(menu_sources_callback, lambda c: c.data == "menu_sources")
    dp.callback_query.register(sources_upload_callback, lambda c: c.data == "sources_upload")
    
    # CSV –∑–∞–≥—Ä—É–∑–∫–∞
    dp.callback_query.register(upload_csv_callback, lambda c: c.data == "upload_csv")
    dp.message.register(process_csv_file, CSVUpload.waiting_for_file)
    
    # RSS –∑–∞–≥—Ä—É–∑–∫–∞
    dp.callback_query.register(upload_rss_callback, lambda c: c.data == "upload_rss")
    dp.callback_query.register(rss_category_chosen, lambda c: c.data.startswith("rss_cat_"))
    dp.message.register(rss_custom_category, RSSUpload.waiting_for_category)
    dp.message.register(process_rss_link, RSSUpload.waiting_for_rss)
    dp.message.register(process_more_rss_link, RSSUpload.waiting_for_more_rss)
    
    # Telegram –∑–∞–≥—Ä—É–∑–∫–∞
    dp.callback_query.register(upload_tg_callback, lambda c: c.data == "upload_tg")
    dp.callback_query.register(tg_category_chosen, lambda c: c.data.startswith("tg_cat_"))
    dp.message.register(tg_custom_category, TGUpload.waiting_for_category)
    dp.message.register(process_tg_channel, TGUpload.waiting_for_tg)
    dp.message.register(process_more_tg_channel, TGUpload.waiting_for_more_tg)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    dp.callback_query.register(sources_manage_callback, lambda c: c.data == "sources_manage")
    dp.callback_query.register(sources_manage_category_callback, lambda c: c.data.startswith("sources_manage_category_"))
    dp.callback_query.register(delete_source_callback, lambda c: c.data.startswith("delete_source_"))
    dp.callback_query.register(sources_page_callback, lambda c: c.data.startswith("sources_page_"))
    dp.callback_query.register(sources_manage_all_category_callback, lambda c: c.data == "sources_manage_category_all")
    
    # –ü–∞—Ä—Å–∏–Ω–≥
    dp.callback_query.register(parse_sources_menu_callback, lambda c: c.data == "parse_sources_menu")
    dp.callback_query.register(parse_sources_confirm_callback, lambda c: c.data == "parse_sources_confirm")
    dp.callback_query.register(parse_sources_cancel_callback, lambda c: c.data == "parse_sources_cancel")
    dp.callback_query.register(add_more_sources_callback, lambda c: c.data.startswith("add_more_"))
    dp.callback_query.register(finish_adding_sources_callback, lambda c: c.data == "finish_adding_sources")
    
    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    dp.callback_query.register(back_to_sources_upload, lambda c: c.data == "sources_upload")
    dp.callback_query.register(back_to_upload_rss, lambda c: c.data == "upload_rss")
    dp.callback_query.register(back_to_upload_tg, lambda c: c.data == "upload_tg")
    dp.callback_query.register(back_to_upload_rss_from_more, lambda c: c.data == "upload_rss", RSSUpload.waiting_for_more_rss)
    dp.callback_query.register(back_to_upload_tg_from_more, lambda c: c.data == "upload_tg", TGUpload.waiting_for_more_tg)
    
    # Noop –∫–Ω–æ–ø–∫–∏
    dp.callback_query.register(noop_callback, lambda c: c.data.startswith("noop_")) 