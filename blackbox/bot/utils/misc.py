# utils/misc.py
import hashlib
import os
from typing import Union, Optional, Dict
from aiogram import types
from functools import wraps
from role_model.base_provider import UserInfo

def get_subscription_id_and_type(obj: Union[types.Message, types.CallbackQuery]) -> tuple[int, str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç ID –∏ —Ç–∏–ø (user/group) –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫."""
    user_id = obj.from_user.id
    chat_type = obj.chat.type if hasattr(obj, 'chat') else 'private'

    if chat_type in ["group", "supergroup"]:
        return obj.chat.id, "group"
    
    return user_id, "user"

def category_to_callback(category: str) -> str:
    """–•—ç—à–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback_data."""
    if category == "all":
        return "all"
    
    hash_result = hashlib.md5(category.encode('utf-8')).hexdigest()[:16]
    print(f"üîç [DEBUG] category_to_callback: {category} -> {hash_result}")
    return hash_result

def callback_to_category(callback: str, all_categories: list) -> str:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ö—ç—à–∞ –≤ callback_data."""
    if callback == "all":
        return "all"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîç [DEBUG] callback_to_category: callback={callback}, all_categories={all_categories}")
    
    for cat in all_categories:
        cat_hash = category_to_callback(cat)
        print(f"üîç [DEBUG] –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: {cat} -> {cat_hash} == {callback}")
        if cat_hash == callback:
            print(f"‚úÖ [DEBUG] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {cat}")
            return cat
    
    print(f"‚ùå [DEBUG] –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è callback: {callback}")
    return None

def is_admin_from_env(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID"""
    admin_ids_str = os.getenv("ADMIN_ID", "")
    
    if not admin_ids_str:
        return False
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    user_id_str = str(user_id)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∞–¥–º–∏–Ω–æ–≤ –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    admin_ids = [admin_id.strip() for admin_id in admin_ids_str.split(",")]
    
    return user_id_str in admin_ids

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID
        admin_ids_str = os.getenv("ADMIN_ID")
        if admin_ids_str:
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            admin_ids = [int(admin_id.strip()) for admin_id in admin_ids_str.split(',') if admin_id.strip().isdigit()]
            if user_id in admin_ids:
                print(f"‚úÖ [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (ADMIN_ID)")
                return True
            else:
                print(f"üîç [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_ids}")
        else:
            print(f"üîç [DEBUG] –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ ADMIN_ID, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–æ–ª–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
        role_manager = await get_role_manager_async()
        if not role_manager:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await role_manager.get_user_info(user_id)
        if not user_info or not user_info.telegram_username:
            print(f"‚ùå [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç username")
            return False
        
        print(f"üîç [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}")
        print(f"üîç [DEBUG] Username: @{user_info.telegram_username}")
        print(f"üîç [DEBUG] –†–æ–ª—å: {user_info.role}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
        print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è @{user_info.telegram_username}...")
        access_granted, error_message = await role_manager.check_user_access(user_info.telegram_username)
        
        if not access_granted:
            print(f"‚ùå [DEBUG] –î–æ—Å—Ç—É–ø –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{user_info.telegram_username}: {error_message}")
            return False
        
        print(f"‚úÖ [DEBUG] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{user_info.telegram_username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–π
        is_admin_role = user_info.role and user_info.role.lower() == "admin"
        print(f"üîç [DEBUG] –†–æ–ª—å '{user_info.role}' —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–π: {is_admin_role}")
        
        if is_admin_role:
            print(f"‚úÖ [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info.telegram_username} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        else:
            print(f"‚ùå [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info.telegram_username} –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Ä–æ–ª—å: {user_info.role})")
        
        return is_admin_role
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}")
        return False

async def is_admin_chat(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –∞–¥–º–∏–Ω—Å–∫–∏–º"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    return True

async def has_admin_permissions(user_id: int, username: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID
        if is_admin_from_env(user_id):
            print(f"‚úÖ [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (ADMIN_ID)")
            return True
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ ADMIN_ID, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–æ–ª–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        role_manager = await get_role_manager_async()
        if not role_manager:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if username:
            print(f"üîç [DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤: @{username}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
            user_permissions = await role_manager.get_user_permissions_by_username(username)
            if not user_permissions:
                print(f"‚ùå [DEBUG] –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            print(f"üîç [DEBUG] –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {user_permissions}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
            admin_permissions = [
                "can_manage_telegram_auth",
                "can_access_admin_panel"
            ]
            
            has_admin_rights = any(user_permissions.get(perm, False) for perm in admin_permissions)
            
            if has_admin_rights:
                print(f"‚úÖ [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞: {user_permissions}")
            else:
                print(f"‚ùå [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤: {user_permissions}")
            
            return has_admin_rights
        else:
            print(f"‚ùå [DEBUG] Username –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤")
            return False
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤: {e}")
        return False

async def check_permission(user_id: int, permission: str, username: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è '{permission}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    if username:
        print(f"üì± [DEBUG] Username –∏–∑ Telegram: @{username}")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID
        admin_ids_str = os.getenv("ADMIN_ID")
        if admin_ids_str:
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            admin_ids = [int(admin_id.strip()) for admin_id in admin_ids_str.split(',') if admin_id.strip().isdigit()]
            if user_id in admin_ids:
                print(f"‚úÖ [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (ADMIN_ID) - –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã")
                return True
            else:
                print(f"üîç [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_ids}")
        else:
            print(f"üîç [DEBUG] –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
        if username:
            print(f"üîç [DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: @{username}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
            role_manager = await get_role_manager_async()
            if not role_manager:
                print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ username
            print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ role_manager.check_user_access –¥–ª—è @{username}...")
            access_granted, error_message = await role_manager.check_user_access(username)
            
            if not access_granted:
                print(f"‚ùå [DEBUG] –î–æ—Å—Ç—É–ø –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{username}: {error_message}")
                return False
            
            print(f"‚úÖ [DEBUG] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è '{permission}'...")
            has_permission = await role_manager.check_permission(user_id, permission)
            
            if has_permission:
                print(f"‚úÖ [DEBUG] –£ @{username} –ï–°–¢–¨ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ '{permission}'")
            else:
                print(f"‚ùå [DEBUG] –£ @{username} –ù–ï–¢ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è '{permission}'")
            
            return has_permission
        
        # –ï—Å–ª–∏ username –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —á–µ—Ä–µ–∑ ID
        print(f"üîç [DEBUG] Username –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ ID")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
        role_manager = await get_role_manager_async()
        if not role_manager:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await role_manager.get_user_info(user_id)
        if not user_info or not user_info.telegram_username:
            print(f"‚ùå [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç username")
            return False
        
        print(f"üîç [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}")
        print(f"üîç [DEBUG] Username: @{user_info.telegram_username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
        print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è @{user_info.telegram_username}...")
        access_granted, error_message = await role_manager.check_user_access(user_info.telegram_username)
        
        if not access_granted:
            print(f"‚ùå [DEBUG] –î–æ—Å—Ç—É–ø –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{user_info.telegram_username}: {error_message}")
            return False
        
        print(f"‚úÖ [DEBUG] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{user_info.telegram_username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è '{permission}'...")
        has_permission = await role_manager.check_permission(user_id, permission)
        
        if has_permission:
            print(f"‚úÖ [DEBUG] –£ @{user_info.telegram_username} –ï–°–¢–¨ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ '{permission}'")
        else:
            print(f"‚ùå [DEBUG] –£ @{user_info.telegram_username} –ù–ï–¢ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è '{permission}'")
        
        return has_permission
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è '{permission}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}")
        return False

async def check_user_access(user_id: int, username: str = None) -> tuple[bool, str, Optional[str]]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    if username:
        print(f"üì± [DEBUG] Username –∏–∑ Telegram: @{username}")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID
        admin_ids_str = os.getenv("ADMIN_ID")
        if admin_ids_str:
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            admin_ids = [int(admin_id.strip()) for admin_id in admin_ids_str.split(',') if admin_id.strip().isdigit()]
            if user_id in admin_ids:
                print(f"‚úÖ [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (ADMIN_ID) - –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω")
                return True, "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)", "admin"
            else:
                print(f"üîç [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_ids}")
        else:
            print(f"üîç [DEBUG] –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
        if username:
            print(f"üîç [DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: @{username}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
            role_manager = await get_role_manager_async()
            if not role_manager:
                print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
                return False, "‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ username
            print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ role_manager.check_user_access –¥–ª—è @{username}...")
            access_granted, error_message = await role_manager.check_user_access(username)
            
            if not access_granted:
                print(f"‚ùå [DEBUG] –î–æ—Å—Ç—É–ø –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{username}: {error_message}")
                return False, error_message, None
            
            print(f"‚úÖ [DEBUG] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{username}")
            return True, "", None
        
        # –ï—Å–ª–∏ username –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —á–µ—Ä–µ–∑ ID
        print(f"üîç [DEBUG] Username –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ ID")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
        role_manager = await get_role_manager_async()
        if not role_manager:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
            return False, "‚ùå –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print(f"üîç [DEBUG] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ID {user_id}...")
        user_info = await role_manager.get_user_info(user_id)
        
        if not user_info:
            print(f"‚ùå [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False, "‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.", None
        
        if not user_info.telegram_username:
            print(f"‚ùå [DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –Ω–µ—Ç username –≤ —Å–∏—Å—Ç–µ–º–µ")
            return False, "‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.", None
        
        print(f"‚úÖ [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–∞–π–¥–µ–Ω–∞:")
        print(f"   - Username: @{user_info.telegram_username}")
        print(f"   - –ò–º—è: {user_info.employee_name}")
        print(f"   - –†–æ–ª—å: {user_info.role}")
        print(f"   - –°—Ç–∞—Ç—É—Å: {user_info.employee_status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
        print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ role_manager.check_user_access...")
        access_granted, error_message = await role_manager.check_user_access(user_info.telegram_username)
        
        if not access_granted:
            print(f"‚ùå [DEBUG] –î–æ—Å—Ç—É–ø –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{user_info.telegram_username}: {error_message}")
            return False, error_message, user_info.role
        
        print(f"‚úÖ [DEBUG] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{user_info.telegram_username}")
        return True, "", user_info.role
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}")
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}", None

async def get_user_role(user_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîç [DEBUG] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
        role_manager = await get_role_manager_async()
        if not role_manager:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await role_manager.get_user_info(user_id)
        if not user_info:
            print(f"‚ùå [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        print(f"üîç [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}")
        print(f"üîç [DEBUG] –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.role}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
        if user_info.telegram_username:
            print(f"üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è @{user_info.telegram_username}...")
            access_granted, error_message = await role_manager.check_user_access(user_info.telegram_username)
            
            if not access_granted:
                print(f"‚ùå [DEBUG] –î–æ—Å—Ç—É–ø –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{user_info.telegram_username}: {error_message}")
                return None
            
            print(f"‚úÖ [DEBUG] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è @{user_info.telegram_username}")
        else:
            print(f"‚ùå [DEBUG] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –Ω–µ—Ç username")
            return None
        
        return user_info.role
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}")
        return None

async def get_user_info(user_id: int, username: str = None) -> Optional[UserInfo]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    print(f"üîç [DEBUG] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ID: {user_id}")
    if username:
        print(f"üì± [DEBUG] Username –∏–∑ Telegram: @{username}")
    
    try:
        role_manager = await get_role_manager_async()
        if not role_manager:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
            return None
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
        if username:
            print(f"üîç [DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º username –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: @{username}")
            user_info = await role_manager.get_user_by_username(username)
            
            if user_info:
                print(f"‚úÖ [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ username:")
                print(f"   ID: {user_info.user_id}")
                print(f"   Username: @{user_info.telegram_username}")
                print(f"   –ò–º—è: {user_info.employee_name}")
                print(f"   –†–æ–ª—å: {user_info.role}")
                print(f"   –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if user_info.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
                print(f"   –°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {user_info.employee_status}")
            else:
                print(f"‚ùå [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            return user_info
        
        # –ï—Å–ª–∏ username –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —á–µ—Ä–µ–∑ ID
        print(f"üîç [DEBUG] Username –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ ID")
        print(f"üîç [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        user_info = await role_manager.get_user_info(user_id)
        
        if user_info:
            print(f"‚úÖ [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–∞–π–¥–µ–Ω–∞:")
            print(f"   ID: {user_info.user_id}")
            print(f"   Username: @{user_info.telegram_username}")
            print(f"   –ò–º—è: {user_info.employee_name}")
            print(f"   –†–æ–ª—å: {user_info.role}")
            print(f"   –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if user_info.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
            print(f"   –°—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {user_info.employee_status}")
        else:
            print(f"‚ùå [DEBUG] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        return user_info
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ID {user_id}: {e}")
        return None

async def get_role_manager_async():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    print(f"üîç [DEBUG] –ó–∞–ø—Ä–æ—Å —Ä–æ–ª–µ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
    
    try:
        from main import get_role_manager_async as get_manager
        role_manager = await get_manager()
        
        if role_manager:
            print(f"‚úÖ [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
        else:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω (None)")
        
        return role_manager
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return None

async def get_user_permissions(user_id: int) -> Dict[str, bool]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîç [DEBUG] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
        role_manager = await get_role_manager_async()
        if not role_manager:
            print(f"‚ùå [DEBUG] –†–æ–ª–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
            return {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"üîç [DEBUG] –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ role_manager.get_user_permissions...")
        permissions = await role_manager.get_user_permissions(user_id)
        
        if permissions:
            print(f"‚úÖ [DEBUG] –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: {permissions}")
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            enabled_permissions = sum(1 for perm, enabled in permissions.items() if enabled)
            print(f"üîç [DEBUG] –í—Å–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {len(permissions)}, –≤–∫–ª—é—á–µ–Ω–æ: {enabled_permissions}")
        else:
            print(f"‚ùå [DEBUG] –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å)")
        
        return permissions
        
    except Exception as e:
        print(f"‚ùå [DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {e}")
        return {}

def require_permission(permission: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
    def decorator(func):
        @wraps(func)
        async def wrapper(event, *args, **kwargs):
            user_id = event.from_user.id
            username = event.from_user.username
            
            print(f"üîç [DEBUG] require_permission: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è '{permission}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
            if username:
                print(f"üì± [DEBUG] require_permission: username –∏–∑ Telegram: @{username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            has_permission = await check_permission(user_id, permission, username)
            
            if not has_permission:
                error_message = f"‚ùå –í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç –ø—Ä–∞–≤–∞–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                if isinstance(event, types.CallbackQuery):
                    await event.answer(error_message, show_alert=True)
                else:
                    await event.answer(error_message)
                return
            
            # –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            return await func(event, *args, **kwargs)
        return wrapper
    return decorator

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ Markdown —Å–∏–º–≤–æ–ª—ã"""
    escape_chars = r'\*_~`[]>#+-=|{}.!'
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text
    