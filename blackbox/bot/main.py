import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from logger_config import setup_logger

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logger("bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–æ–ª–µ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
role_manager = None

async def initialize_role_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    print(f"üîç [DEBUG] bot/main.py: initialize_role_system() –≤—ã–∑–≤–∞–Ω–∞")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from config import get_role_system_config
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"‚úÖ [DEBUG] bot/main.py: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        role_config = get_role_system_config()["lark"]
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {role_config['app_id']}")
        print(f"‚úÖ [DEBUG] bot/main.py: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {role_config['app_id']}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        from role_model.lark_provider import LarkUserProvider
        from role_model.mongodb_provider import MongoDBRoleProvider
        from role_model.role_manager import RoleManager
        logger.info("–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        print(f"‚úÖ [DEBUG] bot/main.py: –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        user_provider = LarkUserProvider(
            app_id=role_config["app_id"],
            app_secret=role_config["app_secret"],
            table_app_id=role_config["table_app_id"],
            table_id=role_config["table_id"]
        )
        logger.info("LarkUserProvider —Å–æ–∑–¥–∞–Ω")
        print(f"‚úÖ [DEBUG] bot/main.py: LarkUserProvider —Å–æ–∑–¥–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        await user_provider.start_periodic_sync()
        logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        print(f"‚úÖ [DEBUG] bot/main.py: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MongoDB –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–æ–ª–µ–π
        role_provider = MongoDBRoleProvider()
        logger.info("MongoDBRoleProvider —Å–æ–∑–¥–∞–Ω")
        print(f"‚úÖ [DEBUG] bot/main.py: MongoDBRoleProvider —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ–ª–µ–π
        role_manager = RoleManager(user_provider, role_provider)
        logger.info("RoleManager —Å–æ–∑–¥–∞–Ω")
        print(f"‚úÖ [DEBUG] bot/main.py: RoleManager —Å–æ–∑–¥–∞–Ω")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark
        logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark...")
        print(f"üîÑ [DEBUG] bot/main.py: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark...")
        try:
            users_count = await user_provider.sync_users_from_lark()
            logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark")
            print(f"‚úÖ [DEBUG] bot/main.py: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark: {e}")
            print(f"‚ùå [DEBUG] bot/main.py: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Lark: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await role_provider.ensure_default_roles()
        logger.info("–†–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        print(f"‚úÖ [DEBUG] bot/main.py: –†–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        logger.info("–†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å MongoDB")
        print(f"‚úÖ [DEBUG] bot/main.py: –†–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å MongoDB")
        
        return role_manager
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        print(f"‚ùå [DEBUG] bot/main.py: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        return None

async def set_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="main_menu", description="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞"),
        types.BotCommand(command="permissions", description="–ú–æ–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"),
        types.BotCommand(command="role_management", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ (–∞–¥–º–∏–Ω)"),
    ]
    await bot.set_my_commands(commands)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–ª–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        await initialize_role_system()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        from digest_scheduler_service import get_digest_scheduler
        digest_scheduler = get_digest_scheduler(bot)
        await digest_scheduler.start_scheduler()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
        from handlers.start_handlers import register_handlers as register_start_handlers
        from handlers.sources_handlers import register_handlers as register_sources_handlers
        from handlers.analysis_handlers import register_handlers as register_analysis_handlers
        from handlers.subscription_handlers import register_handlers as register_subscription_handlers
        from handlers.auth_handlers import register_handlers as register_auth_handlers
        from handlers.admin_handlers import register_handlers as register_admin_handlers
        from handlers.role_management_handlers import register_handlers as register_role_management_handlers
        from handlers.telegram_channels_handlers import register_handlers as register_telegram_channels_handlers
        from handlers.channel_join_handlers import register_handlers as register_channel_join_handlers
        from handlers.main_handlers import register_main_handlers

        def register_all_handlers(dp: Dispatcher):
            """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
            register_main_handlers(dp)  # –ù–æ–≤—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
            register_start_handlers(dp)
            register_sources_handlers(dp)
            register_analysis_handlers(dp)
            register_subscription_handlers(dp)
            register_auth_handlers(dp)
            register_admin_handlers(dp)
            register_role_management_handlers(dp)
            register_telegram_channels_handlers(dp)
            register_channel_join_handlers(dp)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        register_all_handlers(dp)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await set_commands()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        raise

def get_role_manager():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ–ª–µ–π"""
    return role_manager

async def get_role_manager_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print(f"üîç [DEBUG] bot/main.py: get_role_manager_async() –≤—ã–∑–≤–∞–Ω–∞")
    
    global role_manager
    if not role_manager:
        print(f"üîç [DEBUG] bot/main.py: role_manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...")
        role_manager = await initialize_role_system()
        if role_manager:
            print(f"‚úÖ [DEBUG] bot/main.py: role_manager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print(f"‚ùå [DEBUG] bot/main.py: role_manager –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
    else:
        print(f"‚úÖ [DEBUG] bot/main.py: role_manager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    return role_manager

if __name__ == "__main__":
    asyncio.run(main())
