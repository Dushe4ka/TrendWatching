#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ–ª–µ–π —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
"""

import asyncio
import sys
import os
from pymongo import MongoClient
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def update_existing_roles():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ–ª–µ–π —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏"""
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ–ª–µ–π —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏")
    print("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        mongo_uri = os.getenv("MONGODB_URI", "mongodb://localhost:27017/")
        client = MongoClient(mongo_uri)
        db = client.blackbox
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–∞–≤ –Ω–∞ –Ω–æ–≤—ã–µ
        permission_mapping = {
            "can_manage_sources": "can_access_sources",
            "can_use_analysis": "can_access_analysis",
            "can_receive_digest": "can_access_subscriptions",
            "can_auth_telegram": "can_manage_telegram_auth",
            "can_create_roles": "can_manage_roles",
            "can_manage_roles": "can_manage_roles"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏
        print("üìã –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏...")
        existing_roles = list(db.roles.find({}))
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(existing_roles)} —Ä–æ–ª–µ–π")
        
        for role in existing_roles:
            role_name = role.get("name") or role.get("role_name")
            print(f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ '{role_name}'...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∞
            old_permissions = role.get("permissions", {})
            print(f"   –°—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∞: {old_permissions}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∞
            new_permissions = {
                "can_access_sources": False,
                "can_access_analysis": False,
                "can_access_subscriptions": False,
                "can_manage_roles": False,
                "can_manage_users": False,
                "can_manage_telegram_auth": False
            }
            
            # –ú–∞–ø–ø–∏–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–æ–≤—ã–µ
            for old_perm, new_perm in permission_mapping.items():
                if old_perm in old_permissions and old_permissions[old_perm]:
                    new_permissions[new_perm] = True
                    print(f"   ‚úÖ {old_perm} -> {new_perm}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–æ–ª–∏ tester
            if role_name == "tester":
                new_permissions.update({
                    "can_access_sources": True,
                    "can_access_analysis": True,
                    "can_access_subscriptions": True
                })
                print(f"   üîß –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è tester: –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∞–Ω–∞–ª–∏–∑, –ø–æ–¥–ø–∏—Å–∫–∏")
            
            print(f"   –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∞: {new_permissions}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ –±–∞–∑–µ
            update_data = {
                "permissions": new_permissions,
                "updated_at": "2025-08-21T14:20:00.000000"
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ –ø–æ–ª—é name
            result = db.roles.update_one(
                {"_id": role["_id"]},
                {"$set": update_data}
            )
            
            if result.modified_count > 0:
                print(f"   ‚úÖ –†–æ–ª—å '{role_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ö†Ô∏è –†–æ–ª—å '{role_name}' –Ω–µ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
        print("\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏:")
        for role in db.roles.find():
            role_name = role.get("name") or role.get("role_name")
            print(f"   üè∑Ô∏è {role_name}: {role['description']}")
            print(f"      –ü—Ä–∞–≤–∞:")
            for permission, value in role['permissions'].items():
                status = "‚úÖ" if value else "‚ùå"
                print(f"        {status} {permission}")
            print()
        
        print("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ–ª–µ–π")
    print("=" * 50)
    
    await update_existing_roles()
    
    print("\nüèÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main()) 