#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_source_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ===")
    try:
        from parsers.source_parser import SourceParser
        from storage import db
        from blackbox_storage import blackbox_db
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        parsed_data_collection = db["parsed_data"]
        parser = SourceParser(parsed_data_collection, blackbox_db)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = await parser.get_available_sources(limit=5)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏
        sessions = await parser.get_active_sessions()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(sessions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        categorized = parser.categorize_sources(sources)
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(categorized['rss'])} RSS, {len(categorized['telegram'])} Telegram")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False

async def test_rss_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RSS –ø–∞—Ä—Å–µ—Ä"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RSS –ø–∞—Ä—Å–µ—Ä–∞ ===")
    try:
        from parsers.rss_parser import parse_rss
        from storage import db
        
        # –¢–µ—Å—Ç–æ–≤—ã–π RSS –∏—Å—Ç–æ—á–Ω–∏–∫
        test_url = "https://rss.cnn.com/rss/edition.rss"
        
        parsed_data_collection = db["parsed_data"]
        result = await parse_rss(
            url=test_url,
            category="test",
            parsed_data_collection=parsed_data_collection,
            verbose=True
        )
        
        if result is not None:
            print(f"‚úÖ RSS –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {result} –∑–∞–ø–∏—Å–µ–π")
            return True
        else:
            print("‚ùå RSS –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ RSS –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False

async def test_telegram_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Telegram –ø–∞—Ä—Å–µ—Ä"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ø–∞—Ä—Å–µ—Ä–∞ ===")
    try:
        from parsers.tg_parser import parse_tg_channel_with_session
        from storage import db, get_sessions
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        sessions = await get_sessions()
        active_sessions = [s for s in sessions if s.get('status') == 'active']
        
        if not active_sessions:
            print("‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –ø–∞—Ä—Å–µ—Ä–∞")
            return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π
        
        # –¢–µ—Å—Ç–æ–≤—ã–π Telegram –∫–∞–Ω–∞–ª
        test_channel = "https://t.me/durov"
        
        parsed_data_collection = db["parsed_data"]
        result = await parse_tg_channel_with_session(
            channel=test_channel,
            category="test",
            phone_number=active_sessions[0]['phone_number'],
            api_id=123456,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            api_hash="your_api_hash",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            parsed_data_collection=parsed_data_collection,
            limit=5
        )
        
        if result is not None:
            print(f"‚úÖ Telegram –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {result} –∑–∞–ø–∏—Å–µ–π")
            return True
        else:
            print("‚ùå Telegram –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False

async def test_celery_tasks():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Celery –∑–∞–¥–∞—á–∏"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery –∑–∞–¥–∞—á ===")
    try:
        from celery_app.parsing_tasks import parse_sources_task
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å –Ω–µ–±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º
        result = parse_sources_task.delay(limit=2)
        print(f"‚úÖ Celery –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞: {result.id}")
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥)
        try:
            task_result = result.get(timeout=30)
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_result}")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  –ó–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≤ —Å—Ä–æ–∫: {e}")
            return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Celery –∑–∞–¥–∞—á: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    print("=" * 60)
    
    tests = [
        test_source_parser,
        test_rss_parser,
        test_telegram_parser,
        test_celery_tasks
    ]
    
    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    passed = sum(results)
    total = len(results)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 