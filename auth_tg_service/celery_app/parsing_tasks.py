import logging
from celery_app.celery_config import celery_app
from parsers.source_parser import SourceParser
from storage import db
from blackbox_storage import blackbox_db
from celery_app.utils import monitor_performance, run_async
import os
import asyncio
import httpx
import requests

log = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
VECTORIZATION_SERVICE_URL = os.getenv("VECTORIZATION_SERVICE_URL", "http://localhost:8001")

async def call_vectorization_service(chat_id: str = None):
    """–í—ã–∑—ã–≤–∞–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    try:
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        import time
        time.sleep(5)
        
        payload = {}
        if chat_id:
            payload["chat_id"] = str(chat_id)
        
        response = requests.post(
            f"{VECTORIZATION_SERVICE_URL}/vectorization/start",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            log.info(f"‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {result}")
            return result
        else:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
            return None
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None

async def send_parsing_stats_to_telegram(stats: dict, chat_id: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ Telegram —á–∞—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
    try:
        from aiogram import Bot
        from config import TELEGRAM_BOT_TOKEN
        
        if not chat_id:
            chat_id = os.getenv("ADMIN_CHAT_ID")
        
        if not chat_id or not TELEGRAM_BOT_TOKEN:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id –∏–ª–∏ TELEGRAM_BOT_TOKEN")
            return
        
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        message = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞

–ò—Å—Ç–æ—á–Ω–∏–∫–∏:
‚Ä¢ –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {stats.get('total_sources', 0)}
‚Ä¢ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {stats.get('rss_sources', 0)}
‚Ä¢ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {stats.get('telegram_sources', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {stats.get('active_sessions', 0)}

–°–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats.get('total_parsed', 0)}
‚Ä¢ RSS –∑–∞–ø–∏—Å–µ–π: {stats.get('rss_parsed', 0)}
‚Ä¢ Telegram –∑–∞–ø–∏—Å–µ–π: {stats.get('telegram_parsed', 0)}

–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('execution_time', 'N/A')}"""
        
        await bot.send_message(chat_id=chat_id, text=message)
        await bot.session.close()
        log.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        total_parsed = stats.get('total_parsed', 0)
        if total_parsed > 0:
            log.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ ({total_parsed} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π)...")
            vectorization_result = await call_vectorization_service(chat_id)
            if vectorization_result:
                log.info("‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
            else:
                log.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
        else:
            log.info("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Telegram: {e}")

async def send_session_parsing_stats_to_telegram(stats: dict, chat_id: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Å–µ—Å—Å–∏–∏ –≤ Telegram"""
    try:
        bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not bot_token or not chat_id:
            return
        
        session_phone = stats.get('session_phone', 'Unknown')
        sources_count = stats.get('sources_count', 0)
        parsed_count = stats.get('parsed_count', 0)
        execution_time = stats.get('execution_time', '0s')
        
        message = f"""
üîç **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Å–µ—Å—Å–∏–∏**

üì± **–°–µ—Å—Å–∏—è:** `{session_phone}`
üìä **–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤:** {sources_count}
‚úÖ **–°–ø–∞—Ä—à–µ–Ω–æ:** {parsed_count}
‚è±Ô∏è **–í—Ä–µ–º—è:** {execution_time}

üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!
        """.strip()
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "Markdown"
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=data, timeout=10)
            if response.status_code == 200:
                log.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram (chat_id: {chat_id})")
            else:
                log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
                
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Telegram: {e}")

def clean_mongodb_data(data):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç MongoDB ObjectId –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    if isinstance(data, dict):
        cleaned = {}
        for key, value in data.items():
            if hasattr(value, '__class__') and value.__class__.__name__ == 'ObjectId':
                cleaned[key] = str(value)
            elif isinstance(value, (dict, list)):
                cleaned[key] = clean_mongodb_data(value)
            else:
                cleaned[key] = value
        return cleaned
    elif isinstance(data, list):
        return [clean_mongodb_data(item) for item in data]
    else:
        return data

@celery_app.task
@monitor_performance
def parse_telegram_with_session_task(session_phone: str, sources: list, chat_id: str = None):
    """–ü–∞—Ä—Å–∏—Ç Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–µ–π"""
    import time
    start_time = time.time()
    
    async def inner():
        try:
            parsed_data_collection = db["parsed_data"]
            parser = SourceParser(parsed_data_collection, blackbox_db)
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç ObjectId
            cleaned_sources = clean_mongodb_data(sources)
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
            result = await parser.parse_telegram_sources_with_session(cleaned_sources, session_phone)
            
            execution_time = time.time() - start_time
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            total_parsed = 0
            if result and isinstance(result, dict):
                for count in result.values():
                    if count is not None:
                        total_parsed += count
            
            stats = {
                "session_phone": session_phone,
                "sources_count": len(cleaned_sources),
                "parsed_count": total_parsed,
                "execution_time": f"{execution_time:.2f}s"
            }
            
            log.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å —Å–µ—Å—Å–∏–µ–π {session_phone} –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Ä—à–µ–Ω–æ: {total_parsed}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Telegram
            if chat_id:
                await send_parsing_stats_to_telegram(stats, chat_id)
            
            return {
                "session_phone": session_phone,
                "sources": cleaned_sources,
                "parsed": total_parsed,
                "results": result
            }
            
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å —Å–µ—Å—Å–∏–µ–π {session_phone}: {e}")
            return {"error": str(e)}
    
    return run_async(inner)

@celery_app.task
@monitor_performance
def parse_sources_task(limit: int = None, chat_id: str = None):
    """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (RSS + Telegram) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Å–µ—Å—Å–∏–π"""
    import time
    start_time = time.time()

    async def inner():
        try:
            parsed_data_collection = db["parsed_data"]
            parser = SourceParser(parsed_data_collection, blackbox_db)

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å–µ—Å—Å–∏–∏
            sources = await parser.get_available_sources(limit)
            sessions = await parser.get_active_sessions()

            log.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ {len(sessions)} —Å–µ—Å—Å–∏–π")

            if not sources:
                log.warning("–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
                return {"error": "–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"}

            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            categorized = parser.categorize_sources(sources)
            log.info(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(categorized['rss'])} RSS, {len(categorized['telegram'])} Telegram")

            # –ü–∞—Ä—Å–∏–º RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            log.info("üì∞ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            rss_results = await parser.parse_rss_sources(categorized['rss'])
            total_rss = sum(r for r in rss_results.values() if r is not None)
            log.info(f"‚úÖ RSS –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Ä—à–µ–Ω–æ: {total_rss}")

            # –ü–∞—Ä—Å–∏–º Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏–∑ —Å–µ—Å—Å–∏–π
            tg_results = []
            total_tg = 0
            for session in sessions:
                session_phone = session.get("phone_number", "Unknown")
                session_channels = session.get("channels", [])
                if session_channels:
                    log.info(f"üöÄ –ü–∞—Ä—Å–∏–º –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_phone} —Å {len(session_channels)} –∫–∞–Ω–∞–ª–∞–º–∏")
                    cleaned_session_sources = clean_mongodb_data(session_channels)
                    result = await parser.parse_telegram_sources_with_session(cleaned_session_sources, session_phone)
                    session_total = sum(result.values()) if result else 0
                    total_tg += session_total
                    tg_results.append({
                        "session_phone": session_phone,
                        "sources": cleaned_session_sources,
                        "parsed": session_total,
                        "results": result
                    })
                    log.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_phone} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Ä—à–µ–Ω–æ: {session_total}")

            execution_time = time.time() - start_time

            result = {
                "total_sources": len(sources),
                "rss_sources": len(categorized['rss']),
                "telegram_sources": len(categorized['telegram']),
                "active_sessions": len(sessions),
                "rss_parsed": total_rss,
                "telegram_parsed": total_tg,
                "total_parsed": total_rss + total_tg,
                "rss_results": rss_results,
                "telegram_results": tg_results,
                "execution_time": f"{execution_time:.2f}s"
            }

            log.info(f"üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ —Å–ø–∞—Ä—à–µ–Ω–æ: {result['total_parsed']}")

            await send_parsing_stats_to_telegram(result, chat_id)
            return result

        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            import traceback
            log.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return {"error": str(e)}

    return run_async(inner)

@celery_app.task
@monitor_performance
def parse_rss_sources_task(limit: int = 50, chat_id: str = None):
    """–ü–∞—Ä—Å–∏—Ç —Ç–æ–ª—å–∫–æ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏"""
    import time
    start_time = time.time()
    
    async def inner():
        try:
            parsed_data_collection = db["parsed_data"]
            parser = SourceParser(parsed_data_collection, blackbox_db)
            
            sources = await parser.get_available_sources(limit)
            categorized = parser.categorize_sources(sources)
            
            result = await parser.parse_rss_sources(categorized['rss'])
            
            execution_time = time.time() - start_time
            total_parsed = sum(r for r in result.values() if r is not None)
            
            stats = {
                "total_sources": len(sources),
                "rss_sources": len(categorized['rss']),
                "telegram_sources": len(categorized['telegram']),
                "active_sessions": 0,
                "rss_parsed": total_parsed,
                "telegram_parsed": 0,
                "total_parsed": total_parsed,
                "execution_time": f"{execution_time:.2f}s"
            }
            
            log.info(f"‚úÖ RSS –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Å–ø–∞—Ä—à–µ–Ω–æ: {total_parsed}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Telegram
            await send_parsing_stats_to_telegram(stats, chat_id)
            
            return {
                "rss_sources": len(categorized['rss']),
                "rss_parsed": total_parsed,
                "rss_results": result
            }
            
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            return {"error": str(e)}
    
    return run_async(inner)

@celery_app.task
@monitor_performance
def parse_telegram_sources_task(limit: int = 50, chat_id: str = None):
    """–ü–∞—Ä—Å–∏—Ç —Ç–æ–ª—å–∫–æ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏–∑ —Å–µ—Å—Å–∏–π"""
    import time
    start_time = time.time()

    async def inner():
        try:
            parsed_data_collection = db["parsed_data"]
            parser = SourceParser(parsed_data_collection, blackbox_db)

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å–µ—Å—Å–∏–∏
            sources = await parser.get_available_sources(limit)
            sessions = await parser.get_active_sessions()

            log.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ {len(sessions)} —Å–µ—Å—Å–∏–π")

            if not sources:
                log.warning("–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
                return {"error": "–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"}

            categorized = parser.categorize_sources(sources)
            log.info(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(categorized['rss'])} RSS, {len(categorized['telegram'])} Telegram")

            # –ü–∞—Ä—Å–∏–º Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ channels —Å–µ—Å—Å–∏–π
            tg_results = []
            total_tg = 0
            for session in sessions:
                session_phone = session.get("phone_number", "Unknown")
                session_channels = session.get("channels", [])
                if session_channels:
                    log.info(f"üöÄ –ü–∞—Ä—Å–∏–º –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_phone} —Å {len(session_channels)} –∫–∞–Ω–∞–ª–∞–º–∏")
                    cleaned_session_sources = clean_mongodb_data(session_channels)
                    result = await parser.parse_telegram_sources_with_session(cleaned_session_sources, session_phone)
                    session_total = sum(result.values()) if result else 0
                    total_tg += session_total
                    tg_results.append({
                        "session_phone": session_phone,
                        "sources": cleaned_session_sources,
                        "parsed": session_total,
                        "results": result
                    })
                    log.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_phone} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Ä—à–µ–Ω–æ: {session_total}")

            execution_time = time.time() - start_time

            stats = {
                "total_sources": len(sources),
                "rss_sources": len(categorized['rss']),
                "telegram_sources": len(categorized['telegram']),
                "active_sessions": len(sessions),
                "rss_parsed": 0,
                "telegram_parsed": total_tg,
                "total_parsed": total_tg,
                "execution_time": f"{execution_time:.2f}s"
            }

            log.info(f"‚úÖ Telegram –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Å–ø–∞—Ä—à–µ–Ω–æ: {total_tg}")

            await send_parsing_stats_to_telegram(stats, chat_id)
            return {
                "telegram_sources": len(categorized['telegram']),
                "telegram_parsed": total_tg,
                "telegram_results": tg_results
            }

        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            import traceback
            log.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return {"error": str(e)}

    return run_async(inner)

@celery_app.task
@monitor_performance
def parse_specific_source_task(source_url: str, source_type: str = "auto", chat_id: str = None):
    """–ü–∞—Ä—Å–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"""
    import time
    start_time = time.time()
    
    async def inner():
        try:
            parsed_data_collection = db["parsed_data"]
            parser = SourceParser(parsed_data_collection, blackbox_db)
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            result = await parser.parse_specific_source(source_url, source_type)
            
            execution_time = time.time() - start_time
            
            stats = {
                "total_sources": 1,
                "rss_sources": 1 if source_type == "rss" else 0,
                "telegram_sources": 1 if source_type == "telegram" else 0,
                "active_sessions": 0,
                "rss_parsed": result if source_type == "rss" else 0,
                "telegram_parsed": result if source_type == "telegram" else 0,
                "total_parsed": result,
                "execution_time": f"{execution_time:.2f}s"
            }
            
            log.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_url} –∑–∞–≤–µ—Ä—à–µ–Ω: {result}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Telegram
            await send_parsing_stats_to_telegram(stats, chat_id)
            
            return {
                "source_url": source_url,
                "source_type": source_type,
                "parsed": result
            }
            
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_url}: {e}")
            return {"error": str(e)}
    
    return run_async(inner) 