import os
import json
import logging
import redis
import asyncio
import time
from celery import shared_task
from celery_app.celery_config import celery_app
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError, AuthRestartError
from session_manager import get_session_file_path, session_exists, remove_session
from storage import db, get_session_by_phone, update_session_by_phone, create_channel_binding, get_channel_bindings, create_session
from blackbox_storage import blackbox_db, get_new_channels, mark_channel_assigned
from config import SESSION_DIR, MAX_CHANNELS_PER_ACCOUNT, API_ID, API_HASH, TELEGRAM_BOT_TOKEN, ADMIN_CHAT_ID
from datetime import datetime
from uuid import uuid4
from asgiref.sync import async_to_sync
from celery_app.utils import monitor_performance, run_async

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
log = logging.getLogger(__name__)

# Redis –∫–ª–∏–µ–Ω—Ç
REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')
REDIS_PORT = int(os.getenv('REDIS_PORT', 6379))
REDIS_DB = int(os.getenv('REDIS_DB', 0))
redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB, decode_responses=True)

AUTH_STATE_KEY_PREFIX = "telegram_auth_state:"

def send_admin_notification(text: str, chat_id=None):
    if not TELEGRAM_BOT_TOKEN or not ADMIN_CHAT_ID:
        return
    import requests
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id or ADMIN_CHAT_ID,
        "text": text,
        "parse_mode": "Markdown"
    }
    try:
        requests.post(url, data=payload, timeout=10)
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

def cleanup_expired_auth_states():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ Redis"""
    try:
        pattern = f"{AUTH_STATE_KEY_PREFIX}*"
        keys = redis_client.keys(pattern)
        cleaned_count = 0
        
        for key in keys:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL –∫–ª—é—á–∞
            ttl = redis_client.ttl(key)
            if ttl == -1:  # –ö–ª—é—á –±–µ–∑ TTL
                redis_client.delete(key)
                cleaned_count += 1
                log.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∫–ª—é—á –±–µ–∑ TTL: {key}")
            elif ttl == -2:  # –ö–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                cleaned_count += 1
                log.info(f"üóëÔ∏è –ö–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {key}")
        
        if cleaned_count > 0:
            log.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

# --- Celery –∑–∞–¥–∞—á–∏ ---

@celery_app.task
@monitor_performance
def request_code_task(phone_number: str, api_id: int, api_hash: str, admin_chat_id: str = None):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞."""
    async def inner():
        # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
        cleanup_expired_auth_states()
        
        session_file = get_session_file_path(phone_number)
        client = TelegramClient(session_file, api_id, api_hash)
        auth_key = f"{AUTH_STATE_KEY_PREFIX}{phone_number}"
        
        log.info(f"üì± –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –¥–ª—è {phone_number}")
        
        try:
            await client.connect()
            if await client.is_user_authorized():
                log.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone_number} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
                return {"status": "already_authorized", "phone_number": phone_number}
            
            log.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –Ω–∞ {phone_number}")
            sent_code = await client.send_code_request(phone_number)
            
            state = {
                "status": "awaiting_code",
                "phone_code_hash": sent_code.phone_code_hash,
                "requested_at": datetime.utcnow().isoformat()
            }
            redis_client.set(auth_key, json.dumps(state), ex=1800)  # 30 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 600
            
            log.info(f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone_number}. TTL: 30 –º–∏–Ω—É—Ç")
            return {"status": "code_sent", "phone_number": phone_number}
            
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
            log.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return {"status": "error", "error": str(e)}
        finally:
            try:
                if client.is_connected():
                    await client.disconnect()
                    log.info(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram –¥–ª—è {phone_number}")
            except Exception as disconnect_error:
                log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ disconnect: {disconnect_error}")
    return run_async(inner)

@celery_app.task
@monitor_performance
def confirm_code_task(phone_number: str, code: str, api_id: int, api_hash: str, admin_chat_id: str = None):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞."""
    async def inner():
        session_file = get_session_file_path(phone_number)
        client = TelegramClient(session_file, api_id, api_hash)
        auth_key = f"{AUTH_STATE_KEY_PREFIX}{phone_number}"
        
        log.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è {phone_number}")
        log.info(f"üîç –ö–ª—é—á Redis: {auth_key}")
        
        state_raw = redis_client.get(auth_key)
        if not state_raw:
            msg = f"–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {phone_number} –Ω–µ –∑–∞–ø—É—â–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–¥."
            log.warning(f"‚ùå {msg}")
            log.warning(f"‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Redis –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–ª—é—á–∞: {auth_key}")
            send_admin_notification(f"‚ùå {msg}", chat_id=admin_chat_id)
            return {"status": "error", "error": msg}
        
        log.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Redis –¥–ª—è {phone_number}")
        auth_state = json.loads(state_raw)
        current_status = auth_state.get("status")
        log.info(f"üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}")
        
        try:
            await client.connect()
            log.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {phone_number}")
            
            if current_status == "awaiting_code":
                log.info(f"üì± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–¥ –¥–ª—è {phone_number}")
                try:
                    await client.sign_in(
                        phone=phone_number,
                        code=code,
                        phone_code_hash=auth_state["phone_code_hash"]
                    )
                    log.info(f"‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è {phone_number}")
                except Exception as sign_in_error:
                    log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ sign_in: {sign_in_error}")
                    log.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏ sign_in: {type(sign_in_error).__name__}")
                    raise sign_in_error
            elif current_status == "awaiting_password":
                log.info(f"üîê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–∞—Ä–æ–ª—å 2FA –¥–ª—è {phone_number}")
                await client.sign_in(password=code)
                log.info(f"‚úÖ –ü–∞—Ä–æ–ª—å 2FA —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è {phone_number}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            if hasattr(client.session, 'save'):
                if asyncio.iscoroutinefunction(client.session.save):
                    await client.session.save()
                else:
                    client.session.save()
            
            session_file_path = f"{session_file}.session"
            if os.path.exists(session_file_path):
                session_size = os.path.getsize(session_file_path)
                log.info(f"üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {session_file_path}, {session_size} –±–∞–π—Ç")
                
                # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ MongoDB ---
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
                existing = await get_session_by_phone(phone_number)
                if not existing:
                    session_id = str(uuid4())
                    session_data = {
                        "session_id": session_id,
                        "phone_number": phone_number,
                        "session_file_path": session_file_path,
                        "created_at": datetime.utcnow().isoformat(),
                        "channels": [],
                        "status": "active"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    }
                    await create_session(session_data)
                    log.info(f"üìä –°–µ—Å—Å–∏—è {phone_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ MongoDB")
                # ---
            else:
                log.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –¥–ª—è {phone_number}")
                send_admin_notification(f"‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ —Å–µ—Å—Å–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –¥–ª—è {phone_number}", chat_id=admin_chat_id)
            
            redis_client.delete(auth_key)
            log.info(f"üóëÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Redis –¥–ª—è {phone_number}")
            
            # –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ –±–æ—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            log.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {phone_number} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            return {"status": "confirmed", "phone_number": phone_number}
            
        except SessionPasswordNeededError as e:
            log.info(f"üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ 2FA –¥–ª—è {phone_number}: {e}")
            auth_state["status"] = "awaiting_password"
            redis_client.set(auth_key, json.dumps(auth_state), ex=1800)  # 30 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 600
            return {"status": "awaiting_password", "phone_number": phone_number}
        except PhoneCodeInvalidError:
            log.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è {phone_number}")
            return {"status": "invalid_code", "phone_number": phone_number}
        except AuthRestartError:
            log.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {phone_number} –∏–∑-–∑–∞ AuthRestartError")
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            redis_client.delete(auth_key)
            return {"status": "restart_auth", "phone_number": phone_number}
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
            log.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            log.error(f"‚ùå –ú–æ–¥—É–ª—å –æ—à–∏–±–∫–∏: {e.__class__.__module__}")
            log.error(f"‚ùå –ü–æ–ª–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞: {e.__class__.__name__}")
            redis_client.delete(auth_key)
            return {"status": "error", "error": str(e)}
        finally:
            try:
                if client.is_connected():
                    await client.disconnect()
                    log.info(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram –¥–ª—è {phone_number}")
            except Exception as disconnect_error:
                log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ disconnect: {disconnect_error}")
    return run_async(inner)

@celery_app.task
@monitor_performance
def confirm_password_task(phone_number: str, password: str, api_id: int, api_hash: str, admin_chat_id: str = None):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–∞—Ä–æ–ª—å 2FA –¥–ª—è Telegram –∞–∫–∫–∞—É–Ω—Ç–∞."""
    async def inner():
        session_file = get_session_file_path(phone_number)
        client = TelegramClient(session_file, api_id, api_hash)
        auth_key = f"{AUTH_STATE_KEY_PREFIX}{phone_number}"
        state_raw = redis_client.get(auth_key)
        if not state_raw:
            msg = f"–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {phone_number} –Ω–µ –∑–∞–ø—É—â–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–¥."
            log.warning(msg)
            return {"status": "error", "error": msg}
        auth_state = json.loads(state_raw)
        current_status = auth_state.get("status")
        if current_status != "awaiting_password":
            msg = f"–î–ª—è {phone_number} –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}"
            log.warning(msg)
            return {"status": "error", "error": msg}
        try:
            await client.connect()
            await client.sign_in(password=password)
            
            # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            session_file_full = session_file + '.session'
            log.info(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏: {session_file_full}")
            log.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {os.path.exists(session_file_full)}")
            if os.path.exists(session_file_full):
                log.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {os.path.getsize(session_file_full)} –±–∞–π—Ç")
            
            log.info(f"–¢–∏–ø —Å–µ—Å—Å–∏–∏: {type(client.session).__name__}")
            log.info(f"–ú–µ—Ç–æ–¥ save –¥–æ—Å—Ç—É–ø–µ–Ω: {hasattr(client.session, 'save')}")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            try:
                if hasattr(client.session, 'save'):
                    if asyncio.iscoroutinefunction(client.session.save):
                        await client.session.save()
                        log.info("–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                    else:
                        client.session.save()
                        log.info("–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                else:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    await client.disconnect()
                    await client.connect()
                    log.info("–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ reconnect")
            except Exception as save_error:
                log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {save_error}")
            
            log.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {os.path.exists(session_file_full)}")
            if os.path.exists(session_file_full):
                session_size = os.path.getsize(session_file_full)
                log.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {session_size} –±–∞–π—Ç")
                # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ MongoDB ---
                existing = await get_session_by_phone(phone_number)
                if not existing:
                    session_id = str(uuid4())
                    session_data = {
                        "session_id": session_id,
                        "phone_number": phone_number,
                        "session_file_path": session_file_full,
                        "created_at": datetime.utcnow().isoformat(),
                        "channels": [],
                        "status": "active"  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    }
                    await create_session(session_data)
                    log.info(f"–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ MongoDB: {session_id}")
                # ---
            else:
                log.warning(f"–°–µ—Å—Å–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –¥–ª—è {phone_number}")
                log.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è sessions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(SESSION_DIR)}")
                log.warning(f"–ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ sessions: {os.access(SESSION_DIR, os.W_OK)}")
            redis_client.delete(auth_key)
            
            # –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ –±–æ—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            log.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {phone_number} —Å 2FA –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            return {"status": "confirmed", "phone_number": phone_number}
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {e}")
            log.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            log.error(f"‚ùå –ú–æ–¥—É–ª—å –æ—à–∏–±–∫–∏: {e.__class__.__module__}")
            log.error(f"‚ùå –ü–æ–ª–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞: {e.__class__.__name__}")
            redis_client.delete(auth_key)
            return {"status": "error", "error": str(e)}
        finally:
            try:
                if client.is_connected():
                    await client.disconnect()
            except Exception as disconnect_error:
                log.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ disconnect: {disconnect_error}")
    return run_async(inner)

@celery_app.task
@monitor_performance
def distribute_channels_task(channels: list):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º —Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤. –ï—Å–ª–∏ channels –ø—É—Å—Ç–æ–π ‚Äî –±–µ—Ä—ë—Ç –∏—Ö –∏–∑ sources (blackbox)."""
    import asyncio
    from storage import get_sessions, update_session, create_channel_binding
    from blackbox_storage import get_all_channels, mark_channel_assigned
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞
    task_key = "distribute_channels_running"
    if redis_client.get(task_key):
        log.warning("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ distribute_channels —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return {"status": "already_running", "message": "–ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"}
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    redis_client.setex(task_key, 300, "1")  # 5 –º–∏–Ω—É—Ç TTL
    
    async def inner():
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_session_by_id –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnboundLocalError
        from storage import get_session_by_id
        
        # –ï—Å–ª–∏ channels –ø—É—Å—Ç–æ–π ‚Äî –±–µ—Ä—ë–º –∏–∑ sources
        channels_to_distribute = channels
        sources_map = {}  # source_id -> channel (–µ—Å–ª–∏ –∏–∑ –ë–î)
        if not channels:
            sources = await get_all_channels()
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Telegram –∫–∞–Ω–∞–ª—ã
            telegram_sources = []
            for s in sources:
                source_type = s.get('type', '').lower()
                url = s.get('url', '')
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Telegram –∫–∞–Ω–∞–ª
                if ('telegram' in source_type or 
                    't.me' in url or 
                    url.startswith('@') or
                    url.startswith('https://t.me/') or
                    url.startswith('http://t.me/')):
                    telegram_sources.append(s)
            
            # –î–ª—è Telegram-–∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ url ‚Äî —ç—Ç–æ chat_id/username
            channels_to_distribute = [s["url"] for s in telegram_sources]
            sources_map = {s["url"]: str(s["_id"]) for s in telegram_sources}
            
            log.info(f"–ù–∞–π–¥–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –∏–∑ –Ω–∏—Ö {len(telegram_sources)} Telegram –∫–∞–Ω–∞–ª–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –∏—Ö –∫–∞–Ω–∞–ª—ã
        sessions = await get_sessions()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        distributed_channels = set()
        for session in sessions:
            distributed_channels.update(session.get('channels', []))
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        new_channels = [ch for ch in channels_to_distribute if ch not in distributed_channels]
        
        log.info(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {len(channels_to_distribute)}")
        log.info(f"–£–∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {len(distributed_channels)}")
        log.info(f"–ù–æ–≤—ã—Ö –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {len(new_channels)}")
        
        if not new_channels:
            log.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
            return {
                'distributed': {s['session_id']: [] for s in sessions},
                'not_loaded': [],
                'total_slots': sum(MAX_CHANNELS_PER_ACCOUNT - len(s.get('channels', [])) for s in sessions),
            }
        
        session_slots = {
            s['session_id']: MAX_CHANNELS_PER_ACCOUNT - len(s.get('channels', []))
            for s in sessions
        }
        distributed = {s['session_id']: [] for s in sessions}
        not_loaded = []
        session_id_list = list(session_slots.keys())
        idx = 0
        
        for channel in new_channels:
            placed = False
            for _ in range(len(session_id_list)):
                sid = session_id_list[idx % len(session_id_list)]
                if session_slots[sid] > 0:
                    await create_channel_binding({"session_id": sid, "chat_id": channel})
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                    from storage import get_session_by_id
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ ID
                        target_session = await get_session_by_id(sid)
                        if target_session:
                            current_channels = target_session.get('channels', [])
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
                            current_channels = []
                            log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é {sid} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    except Exception as e:
                        log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {sid}: {e}")
                        current_channels = []
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                    if channel in current_channels:
                        log.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Å—Å–∏–∏ {sid}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                    current_channels.append(channel)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    result = await update_session(sid, {"channels": current_channels})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                    if result.modified_count > 0:
                        log.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é {sid}")
                    else:
                        log.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel} –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é {sid}")
                    
                    session_slots[sid] -= 1
                    distributed[sid].append(channel)
                    
                    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –∏–∑ sources ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    if channel in sources_map:
                        await mark_channel_assigned(sources_map[channel], sid)
                    placed = True
                    idx += 1
                    break
                idx += 1
            if not placed:
                not_loaded.append(channel)
        
        total_slots = sum(session_slots.values())
        return {
            'distributed': distributed,
            'not_loaded': not_loaded,
            'total_slots': total_slots,
        }
    
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    redis_client.delete(task_key)
    return run_async(inner)

@celery_app.task
@monitor_performance
def check_session_status_task(phone_number: str, api_id: int, api_hash: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ MongoDB."""
    async def inner():
        from storage import update_session_by_phone
        session_file = get_session_file_path(phone_number)  # –±–µ–∑ .session
        session_file_full = session_file + '.session'
        log.info(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ (–¥–ª—è Telethon): {session_file}")
        log.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–∞ –¥–∏—Å–∫–µ: {session_file_full}")
        log.info(f"API_ID: {api_id}, API_HASH: {api_hash}")
        log.info(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(session_file_full)}")
        client = TelegramClient(session_file, api_id, api_hash)
        try:
            await client.connect()
            is_authorized = await client.is_user_authorized()
            log.info(f"is_user_authorized: {is_authorized}")
            status = "active" if is_authorized else "inactive"
            log.info(f"–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ {phone_number}: {status}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ MongoDB
            await update_session_by_phone(phone_number, {"status": status})
            return {"status": status, "phone_number": phone_number}
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ {phone_number}: {e}")
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é
            await update_session_by_phone(phone_number, {"status": "inactive"})
            return {"status": "error", "phone_number": phone_number, "error": str(e)}
        finally:
            try:
                if client.is_connected():
                    await client.disconnect()
            except Exception as disconnect_error:
                log.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ disconnect: {disconnect_error}")
    return run_async(inner)

@celery_app.task
@monitor_performance
def check_all_sessions_status_task():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –≤ MongoDB."""
    async def inner():
        from storage import get_sessions, update_session_by_phone
        sessions = await get_sessions()
        results = []
        for session in sessions:
            phone_number = session.get("phone_number")
            if not phone_number:
                continue
            api_id = API_ID
            api_hash = API_HASH
            session_file = get_session_file_path(phone_number)
            session_file_full = session_file + '.session'
            log.info(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏ (–¥–ª—è Telethon): {session_file}")
            log.info(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–∞ –¥–∏—Å–∫–µ: {session_file_full}")
            log.info(f"API_ID: {api_id}, API_HASH: {api_hash}")
            log.info(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(session_file_full)}")
            client = TelegramClient(session_file, api_id, api_hash)
            try:
                await client.connect()
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                try:
                    me = await client.get_me()
                    log.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} {me.last_name} (@{me.username})")
                except Exception as me_error:
                    log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {me_error}")
                
                is_authorized = await client.is_user_authorized()
                log.info(f"is_user_authorized: {is_authorized}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
                if os.path.exists(session_file_full):
                    session_size = os.path.getsize(session_file_full)
                    log.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {session_size} –±–∞–π—Ç")
                
                status = "active" if is_authorized else "inactive"
                log.info(f"–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ {phone_number}: {status}")
                await update_session_by_phone(phone_number, {"status": status})
                results.append({"status": status, "phone_number": phone_number})
            except Exception as e:
                log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ {phone_number}: {e}")
                await update_session_by_phone(phone_number, {"status": "inactive"})
                results.append({"status": "error", "phone_number": phone_number, "error": str(e)})
            finally:
                try:
                    if client.is_connected():
                        await client.disconnect()
                except Exception as disconnect_error:
                    log.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ disconnect: {disconnect_error}")
        return {"results": results}
    return run_async(inner) 

@celery_app.task
@monitor_performance
def clean_duplicate_channels_task():
    """–û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–µ—Å—Å–∏—è—Ö"""
    import asyncio
    from storage import get_sessions, update_session
    async def inner():
        sessions = await get_sessions()
        cleaned_count = 0
        
        for session in sessions:
            channels = session.get('channels', [])
            if channels:
                # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
                unique_channels = []
                seen = set()
                for ch in channels:
                    if ch not in seen:
                        unique_channels.append(ch)
                        seen.add(ch)
                
                # –ï—Å–ª–∏ –±—ã–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
                if len(unique_channels) != len(channels):
                    result = await update_session(session['session_id'], {"channels": unique_channels})
                    if result.modified_count > 0:
                        cleaned_count += len(channels) - len(unique_channels)
                        log.info(f"–û—á–∏—â–µ–Ω–æ {len(channels) - len(unique_channels)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏ {session['session_id']}")
                    else:
                        log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é {session['session_id']} –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        
        log.info(f"–í—Å–µ–≥–æ –æ—á–∏—â–µ–Ω–æ {cleaned_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        log.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
        updated_sessions = await get_sessions()
        for session in updated_sessions:
            phone = session.get('phone_number', 'Unknown')
            actual_channels = session.get('channels', [])
            log.info(f"   üì± {phone}: {len(actual_channels)} –∫–∞–Ω–∞–ª–æ–≤")
        
        return {"cleaned_duplicates": cleaned_count}
    return run_async(inner)

@celery_app.task
@monitor_performance
def clear_all_channels_from_sessions_task():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –≤ blackbox_db"""
    async def inner():
        try:
            log.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Å–µ—Å—Å–∏–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
            sessions_collection = db["sessions"]
            sessions = await sessions_collection.find({}).to_list(length=None)
            
            cleared_count = 0
            for session in sessions:
                phone_number = session.get("phone_number")
                if phone_number:
                    # –û—á–∏—â–∞–µ–º –∫–∞–Ω–∞–ª—ã –≤ —Å–µ—Å—Å–∏–∏
                    await sessions_collection.update_one(
                        {"phone_number": phone_number},
                        {"$set": {"channels": []}}
                    )
                    cleared_count += 1
                    log.info(f"üßπ –û—á–∏—â–µ–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ {phone_number}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –≤ blackbox_db
            sources_collection = blackbox_db["sources"]
            await sources_collection.update_many(
                {},
                {"$unset": {"session_id": "", "assigned_at": ""}}
            )
            
            log.info(f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleared_count} —Å–µ—Å—Å–∏–π, —Å–±—Ä–æ—à–µ–Ω—ã –ø—Ä–∏–≤—è–∑–∫–∏ –≤ blackbox_db")
            send_admin_notification(f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleared_count} —Å–µ—Å—Å–∏–π, —Å–±—Ä–æ—à–µ–Ω—ã –ø—Ä–∏–≤—è–∑–∫–∏ –≤ blackbox_db")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {e}"
            log.error(error_msg)
            send_admin_notification(error_msg)
            raise
    
    return run_async(inner)

@celery_app.task
@monitor_performance
def delete_session_and_redistribute_task(phone_number: str):
    """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ—ë –∫–∞–Ω–∞–ª—ã –ø–æ –¥—Ä—É–≥–∏–º —Å–µ—Å—Å–∏—è–º"""
    async def inner():
        try:
            log.info(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ {phone_number} —Å –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            sessions_collection = db["sessions"]
            session = await sessions_collection.find_one({"phone_number": phone_number})
            
            if not session:
                error_msg = f"‚ùå –°–µ—Å—Å–∏—è {phone_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                log.error(error_msg)
                send_admin_notification(error_msg)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª—è–µ–º–æ–π —Å–µ—Å—Å–∏–∏
            channels_to_redistribute = session.get("channels", [])
            log.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(channels_to_redistribute)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
            
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ MongoDB
            await sessions_collection.delete_one({"phone_number": phone_number})
            log.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è {phone_number} –∏–∑ MongoDB")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
            if session_exists(phone_number):
                remove_session(phone_number)
                log.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ {phone_number}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –≤ blackbox_db
            sources_collection = blackbox_db["sources"]
            for channel in channels_to_redistribute:
                await sources_collection.update_many(
                    {"url": channel},
                    {"$unset": {"session_id": "", "assigned_at": ""}}
                )
            
            log.info(f"üîÑ –°–±—Ä–æ—à–µ–Ω—ã –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è {len(channels_to_redistribute)} –∫–∞–Ω–∞–ª–æ–≤")
            
            # –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –æ—Å—Ç–∞–≤—à–∏–º—Å—è —Å–µ—Å—Å–∏—è–º
            if channels_to_redistribute:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                active_sessions = await sessions_collection.find({}).to_list(length=None)
                
                if active_sessions:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                    session_id_list = [s["session_id"] for s in active_sessions]
                    
                    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ—Å—Å–∏—è–º
                    for i, channel in enumerate(channels_to_redistribute):
                        target_session_id = session_id_list[i % len(session_id_list)]
                        target_session = next(s for s in active_sessions if s["session_id"] == target_session_id)
                        target_phone = target_session["phone_number"]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –∫ —Ü–µ–ª–µ–≤–æ–π —Å–µ—Å—Å–∏–∏
                        await sessions_collection.update_one(
                            {"phone_number": target_phone},
                            {"$push": {"channels": channel}}
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –≤ blackbox_db
                        await sources_collection.update_many(
                            {"url": channel},
                            {
                                "$set": {
                                    "session_id": target_session_id,
                                    "assigned_at": datetime.utcnow()
                                }
                            }
                        )
                        
                        log.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel} –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é {target_phone}")
                    
                    log.info(f"‚úÖ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {len(channels_to_redistribute)} –∫–∞–Ω–∞–ª–æ–≤ –ø–æ {len(active_sessions)} —Å–µ—Å—Å–∏—è–º")
                    send_admin_notification(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è {phone_number}, –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {len(channels_to_redistribute)} –∫–∞–Ω–∞–ª–æ–≤")
                else:
                    log.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤")
                    send_admin_notification(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è {phone_number}, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤")
                    
                    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª—ã –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Ö –ø—Ä–∏–≤—è–∑–∫–∏
                    if channels_to_redistribute:
                        log.info(f"üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è {len(channels_to_redistribute)} –∫–∞–Ω–∞–ª–æ–≤ (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π)")
                        for channel in channels_to_redistribute:
                            await sources_collection.update_many(
                                {"url": channel},
                                {"$unset": {"session_id": "", "assigned_at": ""}}
                            )
                        send_admin_notification(f"üîÑ –°–±—Ä–æ—à–µ–Ω—ã –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è {len(channels_to_redistribute)} –∫–∞–Ω–∞–ª–æ–≤ (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π)")
            else:
                log.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è {phone_number} (–∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ)")
                send_admin_notification(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è {phone_number}")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {phone_number}: {e}"
            log.error(error_msg)
            send_admin_notification(error_msg)
            raise
    
    return run_async(inner) 

@celery_app.task
@monitor_performance
def redistribute_all_channels_task():
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–µ—Å—Å–∏—è–º"""
    import asyncio
    from storage import get_sessions, update_session, create_channel_binding
    from blackbox_storage import get_all_channels, mark_channel_assigned
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞
    task_key = "redistribute_all_channels_running"
    if redis_client.get(task_key):
        log.warning("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ redistribute_all_channels —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return {"status": "already_running", "message": "–ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"}
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    redis_client.setex(task_key, 300, "1")  # 5 –º–∏–Ω—É—Ç TTL
    
    async def inner():
        try:
            log.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_session_by_id –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnboundLocalError
            from storage import get_session_by_id
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            sources = await get_all_channels()
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Telegram –∫–∞–Ω–∞–ª—ã
            telegram_sources = []
            for s in sources:
                source_type = s.get('type', '').lower()
                url = s.get('url', '')
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Telegram –∫–∞–Ω–∞–ª
                if ('telegram' in source_type or 
                    't.me' in url or 
                    url.startswith('@') or
                    url.startswith('https://t.me/') or
                    url.startswith('http://t.me/')):
                    telegram_sources.append(s)
            
            # –î–ª—è Telegram-–∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ url ‚Äî —ç—Ç–æ chat_id/username
            all_channels = [s["url"] for s in telegram_sources]
            sources_map = {s["url"]: str(s["_id"]) for s in telegram_sources}
            
            log.info(f"–ù–∞–π–¥–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –∏–∑ –Ω–∏—Ö {len(telegram_sources)} Telegram –∫–∞–Ω–∞–ª–æ–≤")
            log.info(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {len(all_channels)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
            sessions = await get_sessions()
            if not sessions:
                log.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
                return {
                    'distributed': {},
                    'not_loaded': all_channels,
                    'total_slots': 0,
                }
            
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
            for session in sessions:
                result = await update_session(session['session_id'], {"channels": []})
                if result.modified_count > 0:
                    log.info(f"üßπ –û—á–∏—â–µ–Ω—ã –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–µ—Å—Å–∏–∏ {session['phone_number']}")
                else:
                    log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–µ—Å—Å–∏–∏ {session['phone_number']}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ blackbox_db
            sources_collection = blackbox_db["sources"]
            await sources_collection.update_many(
                {},
                {"$unset": {"session_id": "", "assigned_at": ""}}
            )
            log.info("üßπ –°–±—Ä–æ—à–µ–Ω—ã –≤—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –≤ blackbox_db")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞–Ω–∞–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω—ã
            log.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω—ã...")
            for session in sessions:
                updated_session = await get_session_by_id(session['session_id'])
                if updated_session:
                    actual_channels = updated_session.get('channels', [])
                    if actual_channels:
                        log.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session['phone_number']} –≤—Å–µ –µ—â–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–Ω–∞–ª—ã: {actual_channels}")
                    else:
                        log.info(f"‚úÖ –°–µ—Å—Å–∏—è {session['phone_number']} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∑–∞–Ω–æ–≤–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
            session_slots = {
                s['session_id']: MAX_CHANNELS_PER_ACCOUNT
                for s in sessions
            }
            distributed = {s['session_id']: [] for s in sessions}
            not_loaded = []
            session_id_list = list(session_slots.keys())
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —Å–µ—Å—Å–∏—è–º
            for i, channel in enumerate(all_channels):
                # –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ –∫—Ä—É–≥—É –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                target_session_id = session_id_list[i % len(session_id_list)]
                
                if session_slots[target_session_id] > 0:
                    await create_channel_binding({"session_id": target_session_id, "chat_id": channel})
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                    from storage import get_session_by_id
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ ID
                        target_session = await get_session_by_id(target_session_id)
                        if target_session:
                            current_channels = target_session.get('channels', [])
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
                            current_channels = []
                            log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é {target_session_id} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    except Exception as e:
                        log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {target_session_id}: {e}")
                        current_channels = []
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                    if channel in current_channels:
                        log.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Å—Å–∏–∏ {target_session_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                    current_channels.append(channel)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    result = await update_session(target_session_id, {"channels": current_channels})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                    if result.modified_count > 0:
                        log.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é {target_session_id}")
                    else:
                        log.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel} –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é {target_session_id}")
                    
                    session_slots[target_session_id] -= 1
                    distributed[target_session_id].append(channel)
                    
                    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –∏–∑ sources ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    if channel in sources_map:
                        await mark_channel_assigned(sources_map[channel], target_session_id)
                    log.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel} —Ä–∞–∑–º–µ—â–µ–Ω –≤ —Å–µ—Å—Å–∏–∏ {target_session_id}")
                else:
                    not_loaded.append(channel)
                    log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª {channel} - –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_distributed = sum(len(channels) for channels in distributed.values())
            log.info(f"‚úÖ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
            log.info(f"   üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(all_channels)}")
            log.info(f"   ‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {total_distributed}")
            log.info(f"   ‚ùå –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(not_loaded)}")
            
            for session_id, channels in distributed.items():
                session = next(s for s in sessions if s['session_id'] == session_id)
                phone = session['phone_number']
                log.info(f"   üì± {phone}: {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            log.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            updated_sessions = await get_sessions()
            for session in updated_sessions:
                phone = session.get('phone_number', 'Unknown')
                actual_channels = session.get('channels', [])
                expected_channels = distributed.get(session['session_id'], [])
                log.info(f"   üì± {phone}: –æ–∂–∏–¥–∞–µ—Ç—Å—è {len(expected_channels)}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ {len(actual_channels)} –∫–∞–Ω–∞–ª–æ–≤")
                if len(actual_channels) != len(expected_channels):
                    log.warning(f"   ‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {phone}: –æ–∂–∏–¥–∞–µ—Ç—Å—è {len(expected_channels)}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ {len(actual_channels)}")
                    log.warning(f"   üìã –û–∂–∏–¥–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã: {expected_channels}")
                    log.warning(f"   üìã –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã: {actual_channels}")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    if len(actual_channels) == 0 and len(expected_channels) > 0:
                        log.info(f"   üîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {phone}...")
                        try:
                            result = await update_session(session['session_id'], {"channels": expected_channels})
                            if result.modified_count > 0:
                                log.info(f"   ‚úÖ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {phone}")
                            else:
                                log.warning(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {phone}")
                        except Exception as e:
                            log.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è {phone}: {e}")
                else:
                    log.info(f"   ‚úÖ {phone}: –∫–∞–Ω–∞–ª—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if len(actual_channels) != len(set(actual_channels)):
                        log.warning(f"   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ {phone}: {actual_channels}")
                    else:
                        log.info(f"   ‚úÖ {phone}: –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            log.info("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤...")
            final_sessions = await get_sessions()
            total_saved_channels = sum(len(s.get('channels', [])) for s in final_sessions)
            total_expected_channels = sum(len(channels) for channels in distributed.values())
            
            if total_saved_channels == total_expected_channels:
                log.info(f"‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {total_saved_channels}")
            else:
                log.warning(f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: –æ–∂–∏–¥–∞–µ—Ç—Å—è {total_expected_channels}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ {total_saved_channels}")
            
            return {
                'distributed': distributed,
                'not_loaded': not_loaded,
                'total_slots': sum(session_slots.values()),
                'total_saved_channels': total_saved_channels,
                'total_expected_channels': total_expected_channels,
            }
            
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            raise
        finally:
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            redis_client.delete(task_key)
    
    return run_async(inner) 