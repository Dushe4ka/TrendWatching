from telethon import TelegramClient
import logging
import re
import asyncio
from .utils import decode_if_bytes, save_parsed_data
from config import API_ID, API_HASH
from session_manager import get_session_file_path

log = logging.getLogger(__name__)

def extract_channel_username(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∫–∞–Ω–∞–ª–∞ –∏–∑ URL"""
    # –£–±–∏—Ä–∞–µ–º https://t.me/ –∏–ª–∏ @ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    username = re.sub(r'^https?://t\.me/', '', url)
    username = re.sub(r'^@', '', username)
    return username

async def parse_tg_channel_with_session(channel: str, category: str, phone_number: str, 
                                      api_id: int, api_hash: str, parsed_data_collection, 
                                      limit: int = 50):
    """
    –ü–∞—Ä—Å–∏—Ç Telegram –∫–∞–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é
    
    Args:
        channel: URL –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–µ—Å—Å–∏–∏
        api_id: API ID –¥–ª—è Telegram
        api_hash: API Hash –¥–ª—è Telegram
        parsed_data_collection: MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        limit: –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    log.info(f"–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram-–∫–∞–Ω–∞–ª–∞ {channel} —Å —Å–µ—Å—Å–∏–µ–π {phone_number}")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ URL
        channel_username = extract_channel_username(channel)
        if not channel_username:
            log.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å username –∏–∑ {channel}")
            return None
        
        log.info(f"–ò–∑–≤–ª–µ—á–µ–Ω username –∫–∞–Ω–∞–ª–∞: {channel_username}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
        session_file = get_session_file_path(phone_number)
        client = TelegramClient(session_file, api_id, api_hash)
        
        try:
            await client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            is_authorized = await client.is_user_authorized()
            if not is_authorized:
                log.error(f"‚ùå –°–µ—Å—Å–∏—è {phone_number} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return None

            if await client.is_bot():
                log.error(f"‚ùå –°–µ—Å—Å–∏—è {phone_number} - –±–æ—Ç. –ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –ø–∞—Ä—Å–∏—Ç—å –∫–∞–Ω–∞–ª—ã.")
                return None

            saved_count = 0
            async for message in client.iter_messages(channel_username, limit=limit):
                if message.text:
                    text = decode_if_bytes(message.text)
                    data = {
                        "url": f"https://t.me/{channel_username}/{message.id}",
                        "title": text[:100] if text else "",
                        "description": text,
                        "content": text,
                        "date": message.date,
                        "category": category,
                        "source_type": "telegram",
                        "source_url": channel,
                        "session_phone": phone_number
                    }
                    
                    if await save_parsed_data(data, parsed_data_collection):
                        saved_count += 1
                        print(f"üì± TG ({phone_number}): {text[:100]}... | https://t.me/{channel_username}/{message.id}")
            
            log.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—à–µ–Ω–æ {saved_count} –ø–æ—Å—Ç–æ–≤ –∏–∑ {channel_username} —Å —Å–µ—Å—Å–∏–µ–π {phone_number}")
            return saved_count
            
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channel} —Å —Å–µ—Å—Å–∏–µ–π {phone_number}: {str(e)}")
            return None
        finally:
            try:
                await client.disconnect()
                log.info(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram –¥–ª—è {phone_number}")
            except Exception as disconnect_error:
                log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ disconnect: {disconnect_error}")
            
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Telegram ({channel}): {str(e)}")
        return None

async def parse_tg_channel_distributed(channel: str, category: str, sessions: list, 
                                     parsed_data_collection, limit: int = 50):
    """
    –ü–∞—Ä—Å–∏—Ç Telegram –∫–∞–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Å—Å–∏—è–º
    
    Args:
        channel: URL –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        sessions: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        parsed_data_collection: MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        limit: –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Å–µ—Å—Å–∏—è–º
    """
    log.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram-–∫–∞–Ω–∞–ª–∞: {channel}")
    
    results = {}
    tasks = []
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
    for session in sessions:
        phone_number = session.get('phone_number')
        if not phone_number:
            continue
            
        task = parse_tg_channel_with_session(
            channel=channel,
            category=category,
            phone_number=phone_number,
            api_id=API_ID,
            api_hash=API_HASH,
            parsed_data_collection=parsed_data_collection,
            limit=limit
        )
        tasks.append((phone_number, task))
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    if tasks:
        phone_numbers, coroutines = zip(*tasks)
        results_list = await asyncio.gather(*coroutines, return_exceptions=True)
        
        for phone_number, result in zip(phone_numbers, results_list):
            if isinstance(result, Exception):
                log.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ {phone_number}: {result}")
                results[phone_number] = None
            else:
                results[phone_number] = result
    
    total_saved = sum(r for r in results.values() if r is not None)
    log.info(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Å–ø–∞—Ä—à–µ–Ω–æ: {total_saved}")
    
    return results
