import asyncio
import logging
from typing import List, Dict, Any
from .rss_parser import parse_rss
from .tg_parser import parse_tg_channel_distributed
from storage import get_sessions
from blackbox_storage import get_new_channels
import os
from .tg_parser import parse_tg_channel_with_session

log = logging.getLogger(__name__)

class SourceParser:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    def __init__(self, parsed_data_collection, blackbox_db):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
        
        Args:
            parsed_data_collection: MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            blackbox_db: MongoDB –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö blackbox
        """
        self.parsed_data_collection = parsed_data_collection
        self.blackbox_db = blackbox_db
        self.sources_collection = blackbox_db["sources"]
    
    async def get_available_sources(self, limit: int = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ blackbox
        
        Args:
            limit: –õ–∏–º–∏—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_all_channels –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            from blackbox_storage import get_all_channels
            sources = await get_all_channels(limit=limit)
            log.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return sources
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            return []
    
    async def get_active_sessions(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        """
        try:
            sessions = await get_sessions()
            active_sessions = [s for s in sessions if s.get('status') == 'active']
            log.info(f"–ù–∞–π–¥–µ–Ω–æ {len(active_sessions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            return active_sessions
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π: {e}")
            return []
    
    def categorize_sources(self, sources: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """
        –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ —Ç–∏–ø—É
        
        Args:
            sources: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –ø–æ —Ç–∏–ø–∞–º
        """
        categorized = {
            'rss': [],
            'telegram': []
        }
        
        for source in sources:
            source_type = source.get('type', '').lower()
            url = source.get('url', '').lower()
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            is_telegram = (
                'telegram' in source_type or 
                't.me' in url or 
                url.startswith('@') or
                url.startswith('https://t.me/') or
                url.startswith('http://t.me/') or
                url.startswith('https://telegram.me/') or
                url.startswith('http://telegram.me/')
            )
            
            if is_telegram:
                categorized['telegram'].append(source)
                log.info(f"Telegram –∏—Å—Ç–æ—á–Ω–∏–∫: {url}")
            else:
                categorized['rss'].append(source)
                log.info(f"RSS –∏—Å—Ç–æ—á–Ω–∏–∫: {url}")
        
        log.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(categorized['rss'])} RSS, {len(categorized['telegram'])} Telegram")
        return categorized
    
    async def parse_rss_sources(self, rss_sources: List[Dict[str, Any]]) -> Dict[str, int]:
        """
        –ü–∞—Ä—Å–∏—Ç RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        
        Args:
            rss_sources: –°–ø–∏—Å–æ–∫ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        """
        log.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {len(rss_sources)} RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        results = {}
        tasks = []
        
        for source in rss_sources:
            url = source.get('url')
            category = source.get('category', 'general')
            
            if not url:
                continue
                
            task = parse_rss(
                url=url,
                category=category,
                parsed_data_collection=self.parsed_data_collection,
                verbose=False
            )
            tasks.append((url, task))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if tasks:
            urls, coroutines = zip(*tasks)
            results_list = await asyncio.gather(*coroutines, return_exceptions=True)
            
            for url, result in zip(urls, results_list):
                if isinstance(result, Exception):
                    log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ RSS {url}: {result}")
                    results[url] = None
                else:
                    results[url] = result
        
        total_saved = sum(r for r in results.values() if r is not None)
        log.info(f"‚úÖ RSS –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Å–ø–∞—Ä—à–µ–Ω–æ: {total_saved}")
        
        return results

    async def parse_telegram_sources(self, tg_sources: List[Dict[str, Any]],
                                     sessions: List[Dict[str, Any]]) -> Dict[str, Dict[str, int]]:
        """
        –ü–∞—Ä—Å–∏—Ç Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ —Å–µ—Å—Å–∏—è—Ö.

        Args:
            tg_sources: –°–ø–∏—Å–æ–∫ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            sessions: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ —Å–µ—Å—Å–∏—è–º
        """
        log.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ –∫–∞–Ω–∞–ª–∞–º –∏–∑ —Å–µ—Å—Å–∏–π ({len(sessions)} —Å–µ—Å—Å–∏–π)")

        results = {}

        if not sessions:
            log.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram")
            return results

        for session in sessions:
            session_phone = session.get("phone_number", "Unknown")
            session_channels = session.get("channels", [])

            if not session_channels:
                log.warning(f"–°–µ—Å—Å–∏—è {session_phone} –Ω–µ –∏–º–µ–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
                continue

            log.info(f"üöÄ –ü–∞—Ä—Å–∏–º –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_phone} —Å {len(session_channels)} –∫–∞–Ω–∞–ª–∞–º–∏")

            cleaned_sources = clean_mongodb_data(session_channels)
            session_result = await self.parse_telegram_sources_with_session(cleaned_sources, session_phone)

            # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ URL –∫–∞–Ω–∞–ª–∞
            results.update(session_result)

            log.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_phone} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Ä—à–µ–Ω–æ: {sum(session_result.values())}")

        total_saved = sum(results.values())
        log.info(f"‚úÖ Telegram –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Å–ø–∞—Ä—à–µ–Ω–æ: {total_saved}")

        return results

    async def parse_telegram_sources_with_session(self, sources: list, session_phone: str) -> dict:
        """
        –ü–∞—Ä—Å–∏—Ç Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é
        
        Args:
            sources: –°–ø–∏—Å–æ–∫ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π)
            session_phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–µ—Å—Å–∏–∏
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        """
        log.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–µ—Å—Å–∏–µ–π {session_phone}")
        log.info(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(sources)}")
        
        if not sources:
            log.warning("–ù–µ—Ç Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return {}
        
        # –ü–æ–ª—É—á–∞–µ–º API credentials
        api_id = int(os.getenv("API_ID", "0"))
        api_hash = os.getenv("API_HASH", "")
        
        if not api_id or not api_hash:
            log.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API_ID –∏–ª–∏ API_HASH")
            return {}
        
        log.info(f"‚úÖ API credentials –ø–æ–ª—É—á–µ–Ω—ã: api_id={api_id}, api_hash={'*' * len(api_hash) if api_hash else 'None'}")
        
        results = {}
        
        for i, source in enumerate(sources):
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, —Ç–∞–∫ –∏ —Å–ª–æ–≤–∞—Ä–∏
                if isinstance(source, str):
                    # –ï—Å–ª–∏ source - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (URL –∫–∞–Ω–∞–ª–∞)
                    source_url = source
                    category = 'general'
                elif isinstance(source, dict):
                    # –ï—Å–ª–∏ source - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                    source_url = source.get('url', '')
                    category = source.get('category', 'general')
                else:
                    log.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {type(source)}")
                    continue
                
                if not source_url:
                    log.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source}")
                    continue
                
                log.info(f"üì± –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫ {i+1}/{len(sources)}: {source_url}")
                
                # –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
                result = await parse_tg_channel_with_session(
                    source_url, 
                    category, 
                    session_phone,  # –ü–µ—Ä–µ–¥–∞–µ–º session_phone –∫–∞–∫ phone_number
                    api_id, 
                    api_hash, 
                    self.parsed_data_collection
                )
                
                if result is not None:
                    results[source_url] = result
                    log.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—à–µ–Ω–æ {result} –∑–∞–ø–∏—Å–µ–π –∏–∑ {source_url}")
                else:
                    results[source_url] = 0
                    log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å {source_url}")
                    
            except Exception as e:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                source_url_for_log = source if isinstance(source, str) else source.get('url', '') if isinstance(source, dict) else str(source)
                log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {source_url_for_log}: {e}")
                log.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                results[source_url_for_log] = 0
        
        total_parsed = sum(results.values())
        log.info(f"üéâ –ü–∞—Ä—Å–∏–Ω–≥ —Å —Å–µ—Å—Å–∏–µ–π {session_phone} –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ —Å–ø–∞—Ä—à–µ–Ω–æ: {total_parsed}")
        
        return results
    
    async def parse_all_sources(self, limit: int = 100) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        
        Args:
            limit: –õ–∏–º–∏—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            
        Returns:
            Dict: –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
        """
        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å–µ—Å—Å–∏–∏
        sources = await self.get_available_sources(limit)
        sessions = await self.get_active_sessions()
        
        if not sources:
            log.warning("–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return {"error": "–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"}
        
        if not sessions:
            log.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
            return {"error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"}
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        categorized = self.categorize_sources(sources)
        
        # –ü–∞—Ä—Å–∏–º RSS –∏ Telegram –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        rss_task = self.parse_rss_sources(categorized['rss'])
        tg_task = self.parse_telegram_sources(categorized['telegram'], sessions)
        
        rss_results, tg_results = await asyncio.gather(rss_task, tg_task)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_rss = sum(r for r in rss_results.values() if r is not None)
        total_tg = sum(
            sum(r.values()) if r and isinstance(r, dict) else 0 
            for r in tg_results.values() if r is not None
        )
        
        result = {
            "total_sources": len(sources),
            "rss_sources": len(categorized['rss']),
            "telegram_sources": len(categorized['telegram']),
            "active_sessions": len(sessions),
            "rss_parsed": total_rss,
            "telegram_parsed": total_tg,
            "total_parsed": total_rss + total_tg,
            "rss_results": rss_results,
            "telegram_results": tg_results
        }
        
        log.info(f"üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ —Å–ø–∞—Ä—à–µ–Ω–æ: {result['total_parsed']}")
        return result 